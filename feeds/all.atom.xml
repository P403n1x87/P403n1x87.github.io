<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Hub of Heliopolis</title><link href="https://p403n1x87.github.io/" rel="alternate"></link><link href="https://p403n1x87.github.io/feeds/all.atom.xml" rel="self"></link><id>https://p403n1x87.github.io/</id><updated>2021-12-16T11:56:00+01:00</updated><entry><title>How I completed the Hacktoberfest 2021 challenge with a profiler</title><link href="https://p403n1x87.github.io/how-i-completed-the-hacktoberfest-2021-challenge-with-a-profiler.html" rel="alternate"></link><published>2021-12-16T11:56:00+01:00</published><updated>2021-12-16T11:56:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2021-12-16:/how-i-completed-the-hacktoberfest-2021-challenge-with-a-profiler.html</id><summary type="html">&lt;p&gt;I shall reveal to you how I managed to complete the Hacktoberfest 2021 challenge with just a profiler. So read on if you are interested!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember my post about &lt;a href="{filename}2021-06-22-bust-perf-issues"&gt;how to bust performace issues&lt;/a&gt;? My claim there was
that if you picked a project at random from e.g. GitHub, you'd find something
that would catch your eye if you ran the code through a profiler. Iterating this
process then seemed like a good strategy to generate PRs, which is what you need
to do if you want to &lt;a href="https://dev.to/p403n1x87"&gt;complete the Hacktoberfest challenge&lt;/a&gt; when that
time of the year comes around.&lt;/p&gt;
&lt;p&gt;But let's not get the wrong idea. You shouldn't walk away from here thinking
that performance analysis is as trivial as turning the profiler on during test
runs. What my previous post was trying to show is that, in many cases, code is
not profiled and therefore it is easy to find some (rather) low-hanging fruits
that can be fixed easily just as simply as looking at profiling data from the
test suite. Once these are out of the way, that's when the performance analysis
becomes a challenge itself, and some more serious and structured methodologies
are required to make further progress.&lt;/p&gt;
&lt;p&gt;So how did I actually use a profiler to complete the Hacktoberfest? I started by
looking at all the Python projects with the &lt;code&gt;hacktoberfest&lt;/code&gt; topic on GitHub and
picked some that looked interesting to me. The profiler of choice was (surprise,
surprise) &lt;a href="https://github.com/p403n1x87/austin"&gt;Austin&lt;/a&gt;, since it requires no instrumentation and has
practically no impact on the tracee, meaning that I could just sneak a &lt;code&gt;austin&lt;/code&gt;
in the command line used to start the tests to get the data that I needed.&lt;/p&gt;
&lt;p&gt;As a concrete example, let's look at how I was able to detect and fix a
performance regression in &lt;a href="https://github.com/bee-san/pyWhat"&gt;pyWhat&lt;/a&gt;. I forked the repository, made a
local clone and looked at how the test suite is run. Peeking at the GitHub
Actions I could see the test suite was triggered with &lt;code&gt;nox&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m nox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the &lt;code&gt;noxfile.py&lt;/code&gt; we can find the &lt;code&gt;tests&lt;/code&gt; session, which is the one we are
interested in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@nox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run the test suite.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;poetry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;install&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--no-dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;install_with_constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-cov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-isort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-flake8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-mypy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;types-requests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;types-orjson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pytest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-vv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--cov=./&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--cov-report=xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let's create a &lt;code&gt;profile&lt;/code&gt; session where we run the test suite through Austin.
All we have to do is add &lt;code&gt;austin&lt;/code&gt; at the right place in the arguments to
&lt;code&gt;session.run&lt;/code&gt;, plus some additional options, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@nox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Profile the test suite.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;poetry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;install&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--no-dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;profile_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AUSTIN_FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tests.austin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;install_with_constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-cov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-isort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-flake8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pytest-mypy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;types-requests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;types-orjson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;austin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;profile_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1ms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pytest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I've actually removed options to &lt;code&gt;pytest&lt;/code&gt; which I don't care about, like
code coverage, as it's not what I want to profile this time. The &lt;code&gt;-s&lt;/code&gt; option
tells Austin to give us non-idle samples only, effectively giving us a profile
of CPU time. I'm also allowing the Austin output file to be specified from the
environment via the &lt;code&gt;AUSTIN_FILE&lt;/code&gt; variable. This means that, if I want to
profile the tests and save the results to &lt;code&gt;tests.austin&lt;/code&gt;, all I have to do is
invoke&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipx install nox  &lt;span class="c1"&gt;# if not installed already&lt;/span&gt;
&lt;span class="nv"&gt;AUSTIN_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tests.austin nox -rs profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once this completes, the profiling data will be sitting in &lt;code&gt;tests.austin&lt;/code&gt;, ready
to be analysed. With VS Code open on my local copy of &lt;code&gt;pyWhat&lt;/code&gt;, I've used the
&lt;a href="https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode"&gt;Austin VS Code&lt;/a&gt; extension to visualise the data in the form of a flame
graph and, by poking around, this is what caught my eye&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://user-images.githubusercontent.com/20231758/138076258-67c0e621-9055-477f-97f8-5754147267aa.png" target="_blank"&gt;
    &lt;img
      src="https://user-images.githubusercontent.com/20231758/138076258-67c0e621-9055-477f-97f8-5754147267aa.png"
      alt="pyWhat tests before the fix"
    /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The suspect here is the chunky &lt;code&gt;deepcopy&lt;/code&gt; frame stack which is quite noticeable.
The question, of course, is whether the deepcopy is really needed. Clicking on
the &lt;code&gt;check&lt;/code&gt; frame takes us straight into the part of the code where the
&lt;code&gt;deepcopy&lt;/code&gt; is triggered. By inspecting the lines around I couldn't really see
the need of making &lt;code&gt;deepcopy&lt;/code&gt; of objects. So I turned that back (it was
originally a shallow copy, that was later turned into a deep copy) into a
shallow copy with &lt;a href="https://github.com/bee-san/pyWhat/pull/218/files"&gt;this PR&lt;/a&gt;,
ran the test and checked for the expected output. All was looking find. In fact,
things now looked much, much better! Rerunning the profile session with the
change produced the following picture:&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://user-images.githubusercontent.com/20231758/138076271-6241b43b-d1f3-439d-9afc-3022ce2e231b.png" target="_blank"&gt;
    &lt;img
      src="https://user-images.githubusercontent.com/20231758/138076271-6241b43b-d1f3-439d-9afc-3022ce2e231b.png"
      alt="pyWhat tests after the fix"
    /&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deepcopy&lt;/code&gt; stacks have disappeared and the &lt;code&gt;check&lt;/code&gt; frame is overall much
slimmer! And so, just like that, a performance regression has been found and
fixed in just a few minutes :).&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="profiling"></category></entry><entry><title>Spy on Python down to the Linux kernel level</title><link href="https://p403n1x87.github.io/spy-on-python-down-to-the-linux-kernel-level.html" rel="alternate"></link><published>2021-09-27T11:56:00+01:00</published><updated>2021-09-27T11:56:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2021-09-27:/spy-on-python-down-to-the-linux-kernel-level.html</id><summary type="html">&lt;p&gt;Observability into native call stacks requires some compromise. In this post I explain what this actually means for a Python tool like Austin.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I conceived the design of &lt;a href="https://github.com/p403n1x87/austin"&gt;Austin&lt;/a&gt; for the first time, I've sworn
to always adhere to two guiding principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no dependencies other than the standard C library (and whatever system calls
  the OS provides);&lt;/li&gt;
&lt;li&gt;minimal impact on the tracee, even under high sampling frequency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me elaborate on why I decided to stick to these two &lt;em&gt;rules&lt;/em&gt;. The first one
is more of a choice of simplicity. The power horse of Austin is the capability
of reading the private memory of any process, be it a child process or not. Many
platforms provide the API or system calls to do that, some with more security
gotchas than others. Once Austin has access to that information, the rest is
plain C code that makes sense of that data and provides a meaningful
representation to the user by merely calling &lt;code&gt;libc&lt;/code&gt;'s &lt;code&gt;fprintf&lt;/code&gt; on a loop.&lt;/p&gt;
&lt;p&gt;The second guiding principle is what everybody desires from observability tools.
We want to be able to extract as much information as possible from a running
program, perturbing it as little as possible as to avoid skewed data. Austin can
make this guarantee because reading VM memory does not require the tracee to be
halted. Furthermore, the fact that Python has a &lt;a href="https://realpython.com/python-gil/"&gt;GIL&lt;/a&gt; implies that a simple
Python application will run on at most one physical core. To be more precise, a
normal, pure-Python application would not spend more CPU time than wall-clock
time. Therefore, on machines with multiple cores, even if Austin ends up acting
like a busy loop at high sampling frequencies and hogging a physical core, there
would still be plenty of other cores to run the Python application unperturbed
and unaware that is being spied on. Even for &lt;a href="https://docs.python.org/3/library/multiprocessing.html"&gt;multiprocess&lt;/a&gt; applications,
the expected impact is minimal, for if you are running, say, a uWSGI server on a
64-core machine, you wouldn't lose much if Austin hogs one of them. Besides, you
probably don't need to sample at very high frequences (like once every 50
microseconds), but you could be happy with, e.g. 1000 Hz, which is still pretty
high, but would not cause Austin to require an entire core for itself.&lt;/p&gt;
&lt;p&gt;When you put these two principles together you get a tool that compiles down to
a single tiny binary and that has minimal impact on the tracee at runtime. The
added bonus is that it doesn't even require any instrumentation! These are
surely ideal features for an observability tool that make Austin very well
suited for running in a production environment.&lt;/p&gt;
&lt;p&gt;But Austin strengths are also its limitations unfortunately. What if our
application has parts written as Python extensions, e.g. native &lt;a href="https://docs.python.org/3/extending/extending.html"&gt;C/C++
extensions&lt;/a&gt;, &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt;, &lt;a href="https://github.com/PyO3/pyo3"&gt;Rust&lt;/a&gt;, or even &lt;a href="{filename}2018-03-24-asn-python.md"&gt;assembly&lt;/a&gt;? By
reading a process private VM, Austin can only reconstruct the pure-Python call
stacks. To unwind the native call stacks, Austin would need to use some heavier
machinery. Forget about using a third-party library for doing that, which would
violate the first principle, the more serious issue here is that there are
currently no ways of avoiding the use of system calls like &lt;a href="https://man7.org/linux/man-pages/man2/ptrace.2.html"&gt;&lt;code&gt;ptrace(2)&lt;/code&gt;&lt;/a&gt;
from user-space. This would be a serious violation of the second principle. Why?
Because stack unwinding using &lt;code&gt;ptrace&lt;/code&gt; requires threads to be halted, thus
causing a non-negligible impact on the tracee. Besides, stack unwinding is not
exactly straight-forward on every platform to implement.&lt;/p&gt;
&lt;p&gt;The compromise is &lt;a href="https://github.com/P403n1x87/austin/tree/devel#native-frame-stack"&gt;austinp&lt;/a&gt;, a &lt;em&gt;variant&lt;/em&gt; of Austin that can do native
stack unwinding, &lt;em&gt;just&lt;/em&gt; on Linux, using &lt;a href="https://www.nongnu.org/libunwind/"&gt;&lt;code&gt;libunwind&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;ptrace&lt;/code&gt;.
This tool is to be used when you really need to have observability into native
call stacks, as the use of &lt;code&gt;ptrace&lt;/code&gt; implies that the tracee will be impacted to
some extent. This is why, be default, &lt;code&gt;austinp&lt;/code&gt; samples at a much lower rate.
This doesn't mean that you cannot use this tool in a production environment, but
that you should be aware of the potential penalties that come with it. Many
observability tools from the past relied on &lt;code&gt;ptrace&lt;/code&gt; or similar to achieve their
goal, and &lt;code&gt;austinp&lt;/code&gt; is just a (relatively) new entry into that list. More modern
solutions rely on technologies like &lt;a href="https://ebpf.io/"&gt;eBPF&lt;/a&gt; to provide efficient
observability into the Linux kernel, as well as into user-space.&lt;/p&gt;
&lt;p&gt;Speaking of the Linux kernel, eBPF is not the only way to retrieve kernel
stacks. In the future we might have a variant of Austin that relies on eBPF for
some heavy lifting, but for now &lt;code&gt;austinp&lt;/code&gt; leverages the information exposed by
&lt;a href="https://man7.org/linux/man-pages/man5/proc.5.html"&gt;&lt;code&gt;procfs&lt;/code&gt;&lt;/a&gt; to push stack unwinding down to the Linux kernel level. The
&lt;code&gt;austinp&lt;/code&gt; variant has the same CLI of Austin, but with the extra option &lt;code&gt;-k&lt;/code&gt;,
which can be used to sample kernel stacks alongside native ones. I am still to
find a valid use-case for wanting to obtain kernel observability from a Python
program, but I think this could be an interesting way to see how the interpreter
interacts with the kernel; and perhaps someone might find ways of inspecting the
Linux kernel performance by coding a simple Python script rather than a more
verbose C equivalent.&lt;/p&gt;
&lt;p&gt;You can find some examples of &lt;code&gt;austinp&lt;/code&gt; in action on my &lt;a href="https://twitter.com/p403n1x87"&gt;Twitter
account&lt;/a&gt;. This, for example, is what you'd get for a simple
&lt;a href="https://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; classification model, when you open the collected
samples via the &lt;a href="[https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode]"&gt;Austin VS Code&lt;/a&gt; extension:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-theme="dark"&gt;&lt;p lang="en" dir="ltr"&gt;The latest development builds of &lt;a href="https://twitter.com/AustinSampler?ref_src=twsrc%5Etfw"&gt;@AustinSampler&lt;/a&gt;, including the austinp variant for native stack sampling on Linux are now available from &lt;a href="https://twitter.com/github?ref_src=twsrc%5Etfw"&gt;@github&lt;/a&gt; releases &lt;a href="https://t.co/nBfzm3mDng"&gt;https://t.co/nBfzm3mDng&lt;/a&gt;. &lt;a href="https://t.co/IjVfAm1hRk"&gt;pic.twitter.com/IjVfAm1hRk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gabriele Tornetta 🇪🇺 🇮🇹 🇬🇧 (@p403n1x87) &lt;a href="https://twitter.com/p403n1x87/status/1435569784620470283?ref_src=twsrc%5Etfw"&gt;September 8, 2021&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;If you want to give &lt;code&gt;austinp&lt;/code&gt; a try you can follow the instructions on the
&lt;a href="https://github.com/P403n1x87/austin/tree/devel#native-frame-stack"&gt;README&lt;/a&gt; for compiling from sources, or download the pre-built binary
from the the &lt;a href="https://github.com/P403n1x87/austin/releases/tag/dev"&gt;Development build&lt;/a&gt;. In the future, &lt;code&gt;austinp&lt;/code&gt; will be
available from ordinary releases too!&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="profiling"></category></entry><entry><title>How to bust Python performance issues</title><link href="https://p403n1x87.github.io/how-to-bust-python-performance-issues.html" rel="alternate"></link><published>2021-07-02T17:43:00+01:00</published><updated>2021-07-02T17:43:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2021-07-02:/how-to-bust-python-performance-issues.html</id><summary type="html">&lt;p&gt;In this short post I will try to convince you of how easy it is to find performance issues in your Python code and how you should develop the habit of profiling your code before you ship it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my experience as a software engineer, I think it's still way to common to see
production-ready code being shipped without having been profiled at least once.
With the current computing power and the ever increasing number of available
cores per machine, it feels like a lot of preference is generally given to
readable and maintainable code at the cost of those extra microseconds. Whilst
this might make sense for extremely complex code-bases in low-level languages,
this is perhaps more of an issue with technologies like Python, where in general
you can still make some substantial optimisations while still retaining
readability and maintainability.&lt;/p&gt;
&lt;p&gt;To further prove to myself that profiling is still an important step in the
development process that gets overlooked, I did the following experiment. I
grabbed a Python project at random, the first one that popped up on my GitHub
feed, looked at its test suite and profiled the test runs. The day I did this,
&lt;a href="https://github.com/willmcgugan/rich"&gt;Rich&lt;/a&gt; was sitting at the top of my GitHub
feed, so what follows is a trace-back of the steps that led me to contribute
&lt;a href="https://github.com/willmcgugan/rich/pull/1253"&gt;this performance PR&lt;/a&gt; to the
project. Besides Python, the other tools that I have used are &lt;a href="https://github.com/p403n1x87/austin"&gt;Austin
3&lt;/a&gt; and VS Code with the &lt;a href="https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode"&gt;Austin
extension&lt;/a&gt;
installed.&lt;/p&gt;
&lt;p&gt;So first of all, let's make sure that our test environment is fully set up. If
you want to follow along, make sure that you have Austin and VS Code installed.
I was using Windows the day I made this experiment, so I had Austin installed
with &lt;a href="https://community.chocolatey.org/packages/austin/"&gt;choco&lt;/a&gt;, and the VS Code
extension installed from the Visual Studio Marketplace. Let's get our hands on
some code now by cloning Rich and checking out that commit that was master for
me at that time. Open up a terminal and type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/willmcgugan/rich.git
git checkout ce4f18c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The project uses &lt;a href="https://github.com/python-poetry/poetry"&gt;poetry&lt;/a&gt; so running
the test suite is as easy as invoking&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry install
poetry run python -m pytest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we are sure that all the tests pass we are ready to start getting some
profiling data to see what's actually running. Version 3 of Austin comes with a
reworked &lt;code&gt;sleepless&lt;/code&gt; mode that can be used to get an estimate of CPU time
instead of wall time. One big advantage of using a tool like Austin is that we
do not have to make any changes to the code in order to get profiling data out
of it. Besides, Austin runs out-of-process, which means that it won't have any
effects on the code. Getting profiling data is as easy as invoking Austin just
before the test run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry run austin -so profile_master.austin python -m pytest -vv tests
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; Here we can let Austin sample the whole &lt;code&gt;pytest&lt;/code&gt; run because we
have checked beforehand that it only takes a few seconds to complete. &lt;strong&gt;DO
NOT&lt;/strong&gt; try the same exact thing with long-running test suites or you would end
up with a massive sample file that would be hard to process. In such cases you
can either select a few tests, or run Austin with the &lt;code&gt;-x,--exposure&lt;/code&gt; option
to limit sampling to just a few seconds, and adjust the sampling interval with
the &lt;code&gt;-i\--interval&lt;/code&gt; option as best suited.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;-s&lt;/code&gt; option turns the &lt;code&gt;sleepless&lt;/code&gt; mode on, which gives us only the on-CPU
samples, whereas the &lt;code&gt;-o&lt;/code&gt; option specifies the output file. Once the test run
terminates, our profiling data will be in &lt;code&gt;profile_master.austin&lt;/code&gt;, ready to be
analysed with the Austin VS Code extension. We get the best experience if we
start VS Code from within the project's root directory as this allows us to
browse the code while we look at the flame graph. So fire up VS Code from the
terminal with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;code .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and activate the Austin extension by clicking on the &lt;code&gt;FLAME GRAPH&lt;/code&gt; tab in the
bottom panel. Sometimes you would have to right click inside the panel and click
the menu entry to fully activate the extension.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/bust-perf-issues/austin-panel.png"
    alt="The Austin Flame Graph panel within VS Code"
  /&gt;
&lt;/p&gt;

&lt;p&gt;At this point we are ready to load the profiling data that we have collected.
Click on the &lt;code&gt;OPEN&lt;/code&gt; button or press &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;SHIFT&lt;/kbd&gt; +
&lt;kbd&gt;A&lt;/kbd&gt; to bring up the open dialog and select &lt;code&gt;profile_master.austin&lt;/code&gt;. The
Austin VS Code extension will analyse all the collected sample and generate the
flame graph.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/bust-perf-issues/open-profile.gif"
    alt="Open a profile file"
  /&gt;
&lt;/p&gt;

&lt;p&gt;The picture we get is certainly overwhelming at first, especially for those that
are not familiar with how &lt;code&gt;pytest&lt;/code&gt; works internally. This is perhaps a nice way
to actually find out how &lt;code&gt;pytest&lt;/code&gt; collects and run tests. By poking around we
discover that some of the test runs are under the &lt;code&gt;pytest_pyfunc_call&lt;/code&gt; frame. If
you are struggling to find it, press &lt;kbd&gt;F&lt;/kbd&gt; inside the flame graph to
reveal the search input box, type &lt;code&gt;pytest_pyfunc_call&lt;/code&gt; and hit &lt;kbd&gt;ENTER&lt;/kbd&gt;.
The frames that match the search string will be highlighted in purple. Let's
scroll until we find the largest one. When we click on it, it will expand to the
full width of the panel to give us a better idea of what lies underneath it, and
the corresponding portion of the source code will also appear in VS Code!&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/bust-perf-issues/pytest_pyfunc_call.gif"
    alt="pytest_pyfunc_call"
  /&gt;
&lt;/p&gt;

&lt;p&gt;We now have a better view of the tests that are being executed under this path.
At this point we can start looking for the largest leaf frames and see if we can
make any sense of them. When I first looked at this graph, one thing that
quickly caught my eye was this particular stack.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/bust-perf-issues/test_log.png"
    alt="test_log"
  /&gt;
&lt;/p&gt;

&lt;p&gt;Clicking on the &lt;code&gt;test_log&lt;/code&gt; frame reveals the test code in VS Code. Surprisingly,
the test has just a single call to &lt;code&gt;Console.log&lt;/code&gt;, and the percent timing
annotation generated by the Austin extension tell us that, of the whole on-CPU
time for the test suite, about 4.9% is spent on that single call!&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/bust-perf-issues/test_log_code.png"
    alt="The code for the test_log test case"
  /&gt;
&lt;/p&gt;

&lt;p&gt;Looking back at the flame graph, we realise that all the time in the &lt;code&gt;log&lt;/code&gt; frame
is spent calling &lt;code&gt;stack&lt;/code&gt;. Clicking on the &lt;code&gt;log&lt;/code&gt; frame reveals the source code
for the &lt;code&gt;Console.log&lt;/code&gt; method and we can inspect how the information from the
stack is used to generate the log entry. The line we are interested in is 1685,
where we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;caller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;_stack_offset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So &lt;code&gt;inspect.stack()&lt;/code&gt; is called, which according to the flame graph does a lot of
resolutions for each frame (see those calls to &lt;code&gt;findsource&lt;/code&gt;, &lt;code&gt;getmodule&lt;/code&gt;
etc...), none of which seems to be used in &lt;code&gt;Console.log&lt;/code&gt;, and besides we just
pick one of the frames close to the top of the stack and chuck the rest away.
That's pretty expensive for a simple log call. Since I had some familiarity with
the &lt;a href="https://docs.python.org/3/library/inspect.html"&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; module with my
work on Austin and other stuff, I knew there is (at least for CPython) the lower
level method
&lt;a href="https://docs.python.org/3/library/inspect.html#inspect.currentframe"&gt;&lt;code&gt;currentframe&lt;/code&gt;&lt;/a&gt;
that would give you essential information about the currently executing frame.
From there you can navigate down the stack and stop at the frame of interest. In
this case we just need to take the parent frame of the current one, and we
already find all the information needed by the &lt;code&gt;Console.log&lt;/code&gt; method. I made the
changes as part of the already mentioned PR
&lt;a href="https://github.com/willmcgugan/rich/pull/1253"&gt;#1253&lt;/a&gt;, so if you check that
code out and re-run the tests with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry run austin -so profile_pr.austin python -m pytest -vv tests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and open the new profiling data in &lt;code&gt;profile_pr.austin&lt;/code&gt; you will see that the
test case &lt;code&gt;test_log&lt;/code&gt; has pretty much disappeared as it basically takes almost
zero CPU time now.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/bust-perf-issues/test_log_pr.png"
    alt="test_log with the performance change"
  /&gt;
&lt;/p&gt;

&lt;p&gt;Instead we see &lt;code&gt;test_log_caller_frame_info&lt;/code&gt;, which is the test case for the
compatibility utility for those Python implementations that do not implement
&lt;code&gt;currentframe&lt;/code&gt;. But with CPython, calling &lt;code&gt;Console.log&lt;/code&gt; is now inexpensive
compared to the original implementation.&lt;/p&gt;
&lt;p&gt;See how easy it's been to find a performance issue. With the right tool we
didn't have to add any instrumentation to the code, especially in one we
probably had no familiarity with. In many cases you only understand your code
truly if you see it in action. So no more excuses for not profiling your code
before you ship it! ;P&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="profiling"></category><category term="optimisation"></category></entry><entry><title>Looking Back at My Time at Avaloq</title><link href="https://p403n1x87.github.io/looking-back-at-my-time-at-avaloq.html" rel="alternate"></link><published>2021-02-04T16:37:00+00:00</published><updated>2021-02-04T16:37:00+00:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2021-02-04:/looking-back-at-my-time-at-avaloq.html</id><summary type="html">&lt;p&gt;My adventure with Avaloq started in August 2016 and ended in January 2021. It's time to look back at what has happened during these years.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#departing-from-academia"&gt;Departing from Academia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-move"&gt;The Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#settling-in"&gt;Settling In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-first-project"&gt;My First Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wind-of-change"&gt;Wind of Change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shipping-containers"&gt;Shipping Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-right-direction"&gt;The Right Direction?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#social-life"&gt;Social Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gabrexit"&gt;Gabrexit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="departing-from-academia"&gt;Departing from Academia&lt;/h1&gt;
&lt;p&gt;When I started my job as a Software Engineer at Avaloq in 2016, I had just
decided to leave academia for good and move to what many would call a "proper"
job. It's not that I wasn't caressing the idea of pursuing a career in academia,
but while I was applying to those few positions available that were compatible
with my PhD in &lt;a href="http://theses.gla.ac.uk/7203/1/2016tornettaphd.pdf"&gt;Classification of
C*-algebras&lt;/a&gt;, only to
receive rejections back, the actual truth was revealed to me: I didn't really
fancy going down that path. And there was, I found out, a multitude of reasons
why I then decided to veer towards a completely different direction. The first
signal was that, rather than being upset, in many cases I was actually happy to
be rejected because, in the end, I didn't quite like either the kind of research
I was signing up for, or the place I would have had to move to. Not only this,
but being a researcher in that field meant years and years of relocating from
place to place until, if you got that bit of luck to assist you, you got a
permanent position somewhere. This is something I have witnessed through some of
the people that I have met during my PhD. This, I also realised, wasn't what I
was longing to go through, so yet another reason to move to a different career
path that could allow me to settle somewhere and rely on a stable income. In the
end, you can still do science in your own spare time and actually focus on what
you really like to do, rather than what the grant is for. Of course, this is not
quite like doing research in its proper environment. In fact, it's quite far
from it, since the time availability is limited because of your daily job, you
don't have direct access to the experts, either in person or through journal
subscriptions etc..., but it's certainly not impossible to do and, in fact, I
have been able to do it, as I shall tell you later on.&lt;/p&gt;
&lt;h1 id="the-move"&gt;The Move&lt;/h1&gt;
&lt;p&gt;I have always considered software development a hobby, something that I had
started doing as a kid, out of curiosity and driven by my innate desire to know
how things work, and never really considered a potential career path. However,
when my interests in academia started to subside, it was something that surely
deserved to be reconsidered. I've always been enthusiastic about Science, and
Technology in general in particular, and a role in a tech company would have
certainly given me the chance to be in contact with the latest developments.
Within a week of job-hunting, I landed my first role as Software Engineer at
Avaloq, back in 2016. This is where I started to adjust to a brand new world.&lt;/p&gt;
&lt;p&gt;The first thing I had to come to terms with was the stark difference between the
rigour that I have got accustomed to during my PhD in Pure Mathematics, to the
somewhat looser attitude on the workplace. There wasn't much attention on the
technical words used in meetings, which made many things look very confusing at
first, as the same concepts were referred to by different names. But after the
initial "shock", things moved quite smoothly and I started enjoying what I was
doing. I could make use of my honed problem solving skills and prove myself a
good asset for my new team. In exchange of the excitement coming from the new
challenges, I got to hone my software design and engineering skills, which have
been growing &lt;em&gt;in the wild&lt;/em&gt; with my personal experiments up to that point.&lt;/p&gt;
&lt;h1 id="settling-in"&gt;Settling In&lt;/h1&gt;
&lt;p&gt;A few weeks into my new job I came to know that somebody was organising an
internal hackathon to work on some internal tooling ideas. I thought it was a
good idea to join in, not only to show commitment and score points, but also
because I genuinely thought it was a good chance to get to work with people from
different teams learn a good deal about other aspects of the company, the
product, the workflows and the tools and technologies, that I wouldn't have
known otherwise. The project I decided to work on was a tool inspired by git
blame for the sources hosted on the in-house source version control solution.
The hackathon took place a couple of weeks later and the team I joined to work
on said tool ended up winning. Not bad of a start! But the real win for me was
actually achieving the goal I was hoping to achieve from the very beginning,
that is, learning a good deal about the job quickly. What came out of this
competition was far more than just winning a fancy nerdy t-shirt&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/avaloq/hacky_tools_prize.jpg"
    alt="Hacky Tools Prize"
  /&gt;
&lt;/p&gt;

&lt;p&gt;With time, the Python glue code that I contributed for the hackathon evolved
into an entire Python tooling framework that allowed me to write tools in no
time to help me with my daily tasks. But perhaps more importantly, some of those
tools turned out to be useful to my colleagues as well. Branching sources across
different releases now took seconds rather than hours of manual, tedious and
error-prone work.&lt;/p&gt;
&lt;p&gt;The other thing that came out of this experience was that I got actively
involved in promoting and organising more of these events for the office. But I
will get back to this later on.&lt;/p&gt;
&lt;h1 id="my-first-project"&gt;My First Project&lt;/h1&gt;
&lt;p&gt;When Doug, my only local teammate, realised that I was picking things up rather
quickly, he challenged me with my very first issue only a few days into the job.
By the end of the first week I had fixed my first issue. As a new joiner, I was
expected to spend the first three months on "Education" and to learn about the
product, the tools etc..., and certainly nobody was expecting me to be
productive during that time. There is mandatory training that most of the new
joiners need to go through, at the end of which there's an exam that is
fundamental for passing probation. That marks the point when you're supposed to
actually become useful to your teammates.&lt;/p&gt;
&lt;p&gt;Perhaps showing all that eagerness to learn didn't play too well in my favour,
because the next challenge I received was the involvement in a rather big
project a few months into the role. Just kidding :). This is when I got to fly
to Zurich to visit the Avaloq HQ and have planning sessions with the other
teammate and the solution architect that were both based there. The task was
rather ambitious: rethink the customisation API to allow the customer to write
less code when supporting multiple versions or variants of certain message
types, in a way that is backward-compatible with the existing implementation.
The first hurdle for me was to try and make sense of all those requirements
while I was still familiarising with the code-base and the tiny corner of the
product I was supposed to look after. But this was a test I was not willing to
fail, so I jumped right into the task and played my part for the team to deliver
the final solution to the customers. A few weeks before the end of the planned
working days we rolled out the enhanced API to our business teams who helped
catch and fix a few minor bugs before they could get to our customers. Happy
times 🎉.&lt;/p&gt;
&lt;h1 id="wind-of-change"&gt;Wind of Change&lt;/h1&gt;
&lt;p&gt;After about two years since I joined Avaloq, many things started to change. A
new Managing Director was hired to replace the previous one who decided to move to Zurich, and brought some new ideas and a rather strong wind of
change. Many things were shaken and turned upside-down, albeit some of the changes were not always well appreciated by the office. Long story short, he got fired a
year or so later for not being totally in line with the people above him, and
presumably also because some of that change he brought with didn't quite
resonate with everybody in the office.&lt;/p&gt;
&lt;p&gt;Personally, I think we should give the MD some credits for some of the things he
campaigned for. One thing that I appreciated was the idea of introducing
&lt;em&gt;clans&lt;/em&gt;. Pick a topic, gather some people that are passionate about it and turn
that passion into action to make things better for you and the people around
you. This is how I got involved with the &lt;em&gt;Technology and Innovation clan&lt;/em&gt;, to
which I contributed the idea of regular internal hackathon as a way to make
people from different teams have more chances to interact, break from their
daily routine, learn a new skill and, more importantly, have some fun together!
Other members suggested introducing a &lt;em&gt;10% time initiative&lt;/em&gt;, similar to what
other companies do, with the aim of improving attractiveness and retention.
These indeed have been the times when the office population has been the
stabler; a sign that, perhaps, the clan had achieved its main goal. We've been
able to run three more internal hackathons afterwards, before being forced to
stop due to the pandemic. Overall, the initiative has been very successful, so
much that Zurich &lt;em&gt;stole&lt;/em&gt; the idea and organised a similar event for the whole
EMEA area, before opening to external hackathons. Not being able to travel
everybody to the HQ, every site has been asked to contribute a &lt;em&gt;dream-team&lt;/em&gt;, and
I was happy to be picked as one of the representatives for the Edinburgh office.
That was the time when my functional manager, which was based in Zurich, took me
to &lt;a href="https://en.wikipedia.org/wiki/Fronalpstock_(Schwyz)"&gt;Fronalpstock&lt;/a&gt; over the
weekend to give me a taste of the Swiss Alps.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/avaloq/gab_on_fronalpstock.jpg"
    alt="Visiting Fronalpstock"
  /&gt;
&lt;/p&gt;

&lt;p&gt;From a personal perspective, the 10% initiative gave me the chance to work on
the Python tooling framework that I have already mentioned earlier on, to which
I also contributed many hours of my personal time. Ultimately, this turned into
&lt;a href="https://github.com/P403n1x87/sibilla"&gt;Sibilla&lt;/a&gt;, a sort of Python DAO/ORM for
the Oracle databases that allows you to write queries in a Pythonic way. My
Avaloq-specific tooling framework was built on top of this general abstraction
layer and provided the basis for the many tools that I have built over the years
to make my life easier at work. My Machine Learning tool for the classification
of incoming issues was also based on this framework, but more on this other
topic later.&lt;/p&gt;
&lt;h1 id="shipping-containers"&gt;Shipping Containers&lt;/h1&gt;
&lt;p&gt;The MD wasn't the only major change that we were experiencing around 2018. That
was also the year when the Board of Architects decided that it was about time to
start &lt;a href="https://www.avaloq.com/en/-/avaloq-upgrades-open-software-architecture-designed-to-make-banks-more-agile"&gt;moving towards the world of
micro-services&lt;/a&gt;
and put bits of the product into their own containers and pods. This is one of
the times when I have had some disagreement with the way we have been asked to
roll out the changes for the parts that I was responsible for. Needless to say
that what I'm about to tell reflects my very own opinion, to which we are all
entitled :).&lt;/p&gt;
&lt;p&gt;These days, everybody who is maintaining a
&lt;a href="https://m.signalvnoise.com/the-majestic-monolith/"&gt;monolith&lt;/a&gt; is made to feel
ashamed of it. You either have a zoo of micro-services, or your architects
should all be shown the door for manifest incompetency. This new attitude seems
to have generated a rush in many tech companies to split their products in bits
and put them into containers, sometimes not even knowing why or how exactly. The
part I was not in line with was the decision to turn the so-called &lt;em&gt;adapters&lt;/em&gt;
(sic.), the tools that we provided to the customer to allow them to connect our
product to third-party systems, into micro-services. In a sense, these tools
were already containerised; being Java applications, they had their own
dependencies which were shipped in their own packages. Other big sub-products
looked like better candidates for "demolition" and containerisation, but after
some considerations they were left out of the discussion. Because of this
decision, integrating new code is still a bit of a struggle at times, since one
of the many parts can still block integration testing for everybody else.&lt;/p&gt;
&lt;p&gt;Of all the projects I have been involved with during my time at Avaloq, the
containerisation initiative is perhaps the one I am the least satisfied with.
Perhaps it's just a matter of taste, but the result we've got in the end didn't
quite appeal to me. This does not mean that we delivered something broken to the
customer. On the contrary, the adapters have never worked better, thanks also to
my personal efforts to include automation testing within the scope of the
project. But something with the new state of the code-base didn't quite resonate
with me. Have I had the freedom to choose for a different architecture, I would
have probably gone a different route. But that's that.&lt;/p&gt;
&lt;h1 id="the-right-direction"&gt;The Right Direction?&lt;/h1&gt;
&lt;p&gt;Something that surprised me from the very beginning was the lack of a Data
Science team within the company. In 2016, Machine Learning was already quite
ubiquitous, with some of the biggest achievement both in software and hardware
giving very satisfactory results in many fields. As someone coming from a
completely different world, I knew absolutely nothing about FinTechs, but in my
head they were the prime candidate for adopting ML technologies. So while the
main focus was declaring war at the monoliths, I tried starting the Data Science
fire, hoping that somebody would respond to that. What I did was to use the
Reading Circles to introduce myself and my colleagues (in particular those who,
like me, came from a different background a didn't know much about the field) to
the subject of Machine Learning and Data Science. The ultimate goal was to
attract enough people to form a small group and put something together that
could get somebody on a more managerial level to blow on that flame. I thought I
should have led by example and so, after going through &lt;a href="https://www.manning.com/books/deep-learning-with-python-second-edition"&gt;Deep Learning with
Python&lt;/a&gt;
during a full session of one of the reading circles, I had an idea: why not use
all the data about customer issues to assist in opening new ones against the
right team?&lt;/p&gt;
&lt;p&gt;One problem that the Support team complained about from time to time was that
some issues would be opened against the wrong team, and therefore the laid
around for too long before the right people could look at them. If only they had
a smart tool to help them re-assign these issues to the right team. With my
newly acquired knowledge about text classification, I thought that perhaps,
hidden in all the issues that have been fixed in the past, and that have then
been assigned to the right team, there was a statistical signal strong enough to
make a classification model work with a decent accuracy. My first experiments
were based on a bi-directional LSTM models that I had to train on my work laptop
as I had no access to better hardware. As a consequence, I had to pick just a
small chunk of the data so that I could actually see the result of training
after a reasonable amount of time. Once it became clear that there was a signal,
I decided to go for a Naive Bayes approach on the full data, which was the only
thing I could train with the resources at my disposal. I have enjoyed working on
this project very much and for various reasons. The first is the fact that the
model I was able to train turned out to produce useful classifications, and the
prototype application that I ended up building on top of it proved very handy to
support. Besides their emails with which they thanked me for making such a tool,
I was also proud of being awarded an &lt;em&gt;Extraordinary Achievement Reward&lt;/em&gt;, a
reward that Avaloq gives to those who distinguished themselves within the
company for achieving something out of the ordinary, as part of their bonus
scheme. Another reason why I enjoyed this project is because it gave me the
chance to investigate some ML topics more in-depth, close to research level,
which takes us to the point I was making at the beginning that, even though I
have left academia, I can still do research, and at my very own terms. I started
investigating how the hierarchical structure of the teams within the company
could have been used to increase the classification accuracy of my models, and
that's how I came to know of &lt;a href="https://www.svkir.com/publications.html"&gt;Kiritchenko's
work&lt;/a&gt; on the topic. The result of this
investigation led me to implement a &lt;a href="https://github.com/P403n1x87/marvin/wiki/Hierarchical-Classification"&gt;&lt;em&gt;local classifier per level&lt;/em&gt; hierarchical
classification
model&lt;/a&gt;,
but also to an interesting explanation of a phenomenon of uncertainty increase
in the complement approach to Naive Bayes [1].&lt;/p&gt;
&lt;p&gt;Secretly, I was hoping that the sort of visibility that I had gained with this
project could have acted as a catalyst for establishing a proper ML team here in
Edinburgh, the place that has contributed a lot to AI and still does. I created
a &lt;a href="https://en.wikipedia.org/wiki/Kaizen"&gt;Kaizen&lt;/a&gt; initiative (that's the name
that was chosen for a Jira board that acts as a sort of incubator for ideas)
back in March 2020, with the aim of creating a small team to focus on smart
internal tooling, a way to unlock the potential of all the data actually owned
by Avaloq. We had the kick-off meeting a couple of months before my departure
and I do really hope that things can take off. I would regard that as some sort
of legacy of my time spent there. The conditions, however, didn't quite seem to
be there, and this is also one of the reasons that, in the end, led me to take
the decision to move on with my life.&lt;/p&gt;
&lt;h1 id="social-life"&gt;Social Life&lt;/h1&gt;
&lt;p&gt;One great thing that I am surely going to miss of Avaloq is the absolutely
fantastic atmosphere of the social events. The office in general, on a normal
day, has that really good vibe that I think it's rare to find. I have had the
chance to work with really nice people from the moment I stepped in until the
very last day. The local team I was part of has been like a family to me. I like
cue sports and the fact that we had a pool table in the office allowed me to
combine my passion with social activities to promote a nice and relaxed
atmosphere. I will surely miss those few games of pool after lunch with some of
my former colleagues.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/v5omd2llgNc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I have organised pool events of all sorts to bring people from different teams
together, have a laugh at the table and enjoy a wee break from work. We have had
fairly regular social seasonal and team events throughout the years, each one
with a theme, Xmas events etc.... This is what happened at the Halloween event
that I have helped co-organise together with the rest of my local team&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/avaloq/erica_orville.jpg"
    alt="CPython data structures"
  /&gt;
&lt;/p&gt;

&lt;p&gt;No doubt I am going to miss all of this, especially now that my next role is
remote. Surely I can find a co-working space where I can re-create some sort of
office experience, but it won't be like being in the office with the rest of the
team. However, on the plus side, I discovered that working from home has its
pros too. Even though Avaloq offers great flexibility in terms of remote
working, I have always preferred going to the office for that atmosphere that I
just mentioned, and I thought I could never work remotely. Of course the
pandemic forced all of us inside, so that I was coerced into experiencing
working from home on the long term. I guess, like many other things in life, you
can get used to it, and indeed so I did. So never say never in life. Perhaps in
the future I'll be able to sneak in to a board games night at the old office :).&lt;/p&gt;
&lt;h1 id="gabrexit"&gt;Gabrexit&lt;/h1&gt;
&lt;p&gt;It's only when I was getting towards the end of my notice period that I have started
realising the extent of my contributions at Avaloq. I am generally a modest
person and I don't like to brag about my achievements, but I think it's
important that I try to look back at all the work that I have done and give
myself a pat on my shoulder for each good thing that I have done. I have already
mentioned the Python tooling framework. My manager asked me to find a new
caretaker of those projects before I left. A colleague of mine helped me migrate
the original code-base from Python 2 to Python 3 and so he was the perfect
candidate to take over. This is another thing that never flew as high as I'd
hoped, mostly because Python is not one of the "official" technologies adopted at
Avaloq. However, many people started relying on some of the tools that I wrote,
so it only makes sense to ensure that somebody can keep looking after them once
I'm gone.&lt;/p&gt;
&lt;p&gt;The other hand-over meeting that I was asked to attend was about the ML project
for the classification of issues. As I said, some people liked the idea, and the
prototype, very much, especially those that were in charge of designing the new
customer support portal. They asked me to go briefly over the general
architecture so that they can continue working on it and take the project into
production, so that the customers also can start benefiting from recommended
teams to assign the issue to as they type the problem description in the portal.&lt;/p&gt;
&lt;p&gt;Lastly, I have had a chat with the head of the technical writers. I had
mentioned to the previous head that I had a prototype for a post-processing tool
that could have simplified they way they keep the documentation in sync with
some of the latest development on the main product. So I have also had a meeting
to hand that prototype over to the tech writers team.&lt;/p&gt;
&lt;p&gt;Thus, as I was getting closer to my last day at Avaloq, I started realising that
my contributions, in the end, went beyond the confines of my team, but spanned
areas that were quite orthogonal to my duties of Software Engineer for the
messaging part of the product, going from customer support to documentation. And
if the Kaizen initiative does take off, that would be yet another seed that I
would have planted and that would hopefully bear my name for me to be remembered
as somebody who didn't just play pool all the time, but that also did at least a
few good things for the company.&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;p&gt;[1] Gabriele N. Tornetta, &lt;em&gt;Entropy methods for the confidence assessment of probabilistic classification models&lt;/em&gt;, submitted to Statistica, 2020.&lt;/p&gt;</content><category term="Work"></category><category term="work"></category></entry><entry><title>The Austin TUI Way to Resourceful Text-based User Interfaces</title><link href="https://p403n1x87.github.io/the-austin-tui-way-to-resourceful-text-based-user-interfaces.html" rel="alternate"></link><published>2020-10-26T10:08:00+00:00</published><updated>2020-10-26T10:08:00+00:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2020-10-26:/the-austin-tui-way-to-resourceful-text-based-user-interfaces.html</id><summary type="html">&lt;p&gt;The latest version of the Austin TUI project makes use of a custom XML resource file to describe and build the actual text-based UI, using &lt;code&gt;curses&lt;/code&gt; as back-end. In this post we shall see how one can use the same technology to quickly build reactive TUIs using Python.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-view-object"&gt;The View Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-widgets"&gt;The Widgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updating-the-ui"&gt;Updating the UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spicing-things-up-with-colours"&gt;Spicing Things up with Colours&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Due to the increasing popularity of the sample tools that were included with
earlier versions of &lt;a href="https://github.com/p403n1x87/austin"&gt;Austin&lt;/a&gt;, I have
decided to move them into their own dedicated repositories. The TUI, for
example, can now be found at &lt;a href="https://github.com/p403n1x87/austin-tui"&gt;Austin
TUI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being, as I said, sample tools, the original coding wasn't very pleasant as the
main focus was on how to embed Austin into your application, rather than the
application itself. So the first step was to come up with a good design so that
the code would be tidy and easy to maintain. Austin TUI has also been my very
first attempt at a serious TUI application. The standard approach in Python is
with the &lt;a href="https://docs.python.org/3/howto/curses.html"&gt;&lt;code&gt;curses&lt;/code&gt;&lt;/a&gt; module, but one
thing that you learn quite quickly is that such a low-level API tends to make
for untidy-looking code pretty easily if you're not careful. There are some way
out of this, in the form of higher level frameworks which offer you many cool
features and abstractions like &lt;em&gt;widgets&lt;/em&gt;. None of them, as nice as they are,
were to my taste though.&lt;/p&gt;
&lt;p&gt;My previous experiences with UI have almost always revolved around the notion of
&lt;em&gt;resource files&lt;/em&gt;. That is, the various bits of the user interface, like the main
window, configuration and about dialogs, were all described by some DSL living
in the project folder as resource files. You can take
&lt;a href="https://glade.gnome.org/"&gt;Glade&lt;/a&gt; as an example, which is also the tool that
inspired the solution that I ended up developing and adopting for Austin TUI.
With Glade, a GTK UI is described by an XML document, which is then parsed at
runtime to produce the actual UI. What I wanted for Austin TUI was something
similar so that I could de-clutter the Python code from all the UI definition
logic, and focus only on the other aspects of a UI project, like event handling.
I also wanted something that played nicely with the
&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt;
design pattern and, as we shall see briefly, the main concept behind Austin TUI
is indeed that of a &lt;em&gt;view&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="the-view-object"&gt;The View Object&lt;/h1&gt;
&lt;p&gt;The central object of the Austin TUI is the &lt;code&gt;View&lt;/code&gt; object. This is responsible
for refreshing the interface as well as exposing the event handlers for events
like key presses. The view itself is not the UI though, but it contains a
reference to it via the &lt;code&gt;root_widget&lt;/code&gt;. The novelty in Austin TUI is that we want
to partially build a view, or at least the UI part, using a resource file.&lt;/p&gt;
&lt;p&gt;So take a look at the following minimalist example.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;aui:MinimalView&lt;/span&gt; &lt;span class="na"&gt;xmlns:aui=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://austin.p403n1x87.com/ui&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;minimal_view&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aui:Window&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/aui:Window&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Signal mappings --&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;aui:signal&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_quit&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/aui:MinimalView&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;minimal-view.xml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above XML document describes a view with two main components: a &lt;code&gt;Window&lt;/code&gt;
element, which provides the root node for the UI, and a &lt;code&gt;signal&lt;/code&gt; to bind the
method &lt;code&gt;on_quit&lt;/code&gt; to the key &lt;code&gt;q&lt;/code&gt;. The UI itself contains a single label that will
display the text &lt;code&gt;Hello World&lt;/code&gt;. When we run an application that uses this UI, we
expect to see the text &lt;code&gt;Hello World&lt;/code&gt; centred on the screen and we also expect to
exit as soon as we press &lt;code&gt;Q&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what do we need to make the above UI work? With the framework included in
Austin TUI, all that we need to do is declare a subclass of &lt;code&gt;View&lt;/code&gt; with the same
name as the root node of the XML document, that is &lt;code&gt;MinimalView&lt;/code&gt; in this case,
and then build the actual view object using the &lt;code&gt;ViewBuilder&lt;/code&gt; class, like so&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;austin_tui.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewBuilder&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinimalView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;quit signal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;minimal-view.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;view_stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bye!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is all the Python code required to build a minimalist TUI that displays a
label on the screen and that quits whenever the user presses &lt;code&gt;Q&lt;/code&gt;. Things we
notice from this example are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we are using &lt;code&gt;asyncio&lt;/code&gt; to handle user events on the UI; this means that we
   can schedule our own asynchronous task without making the UI unresponsive;&lt;/li&gt;
&lt;li&gt;we use the static method &lt;code&gt;from_stream&lt;/code&gt; of the &lt;code&gt;ViewBuilder&lt;/code&gt; class to build a
   UI from file; if the file resided inside a Python module we could have used
   the &lt;code&gt;from_resource&lt;/code&gt; static method instead for convenience;&lt;/li&gt;
&lt;li&gt;we call the &lt;code&gt;open&lt;/code&gt; method on the view object to display the UI;&lt;/li&gt;
&lt;li&gt;we call the &lt;code&gt;close&lt;/code&gt; method on the view object to close the UI and restore the
   terminal to its original status.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this particular example, we make the &lt;code&gt;on_quit&lt;/code&gt; event handler simulate a
keyboard interrupt and we handle &lt;code&gt;KeyboardInterrupt&lt;/code&gt; to quit nicely.&lt;/p&gt;
&lt;h1 id="the-widgets"&gt;The Widgets&lt;/h1&gt;
&lt;p&gt;Austin TUI uses the widget abstraction too. Elements like &lt;code&gt;Window&lt;/code&gt; and &lt;code&gt;Label&lt;/code&gt;
that we have seen above are all exposed by the Austin TUI library via the
&lt;code&gt;austin_tui.widgets.catalog&lt;/code&gt; sub-module. A window is a simple logical container
that can hold a single child, spanning the full content of the window. In the
example above, the only child of the window is the &lt;code&gt;Label&lt;/code&gt; widget identified by
the name &lt;code&gt;label&lt;/code&gt;. If you want to add multiple children to the window, you would
want to include an intermediate &lt;code&gt;Box&lt;/code&gt; container widget which acts as an HTML5
flex container. Let's see how we can build a simple UI for a minimalist &lt;code&gt;top&lt;/code&gt;
utility.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;
&lt;span class="normal"&gt;66&lt;/span&gt;
&lt;span class="normal"&gt;67&lt;/span&gt;
&lt;span class="normal"&gt;68&lt;/span&gt;
&lt;span class="normal"&gt;69&lt;/span&gt;
&lt;span class="normal"&gt;70&lt;/span&gt;
&lt;span class="normal"&gt;71&lt;/span&gt;
&lt;span class="normal"&gt;72&lt;/span&gt;
&lt;span class="normal"&gt;73&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;aui:MiniTop&lt;/span&gt; &lt;span class="na"&gt;xmlns:aui=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://austin.p403n1x87.com/ui&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tui&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aui:Window&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aui:Box&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main_box&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;flow=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;aui:Box&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;overview_box&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;flow=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nprocs_label&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No. of procs.&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;16&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nprocs&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;bold=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cpu_label&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Total %CPU&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;16&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cpu&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;bold=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/aui:Box&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;aui:Box&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;table_header&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;flow=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;own&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PID&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;bold=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;reverse=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;proc_cpu&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%CPU&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;bold=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;reverse=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cmdline&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;COMMAND LINE&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;bold=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
          &lt;span class="na"&gt;reverse=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/aui:Box&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;aui:ScrollView&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;proc_view&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aui:Table&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;columns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/aui:ScrollView&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Press Q to exit.&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;bold=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aui:Box&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/aui:Window&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Signal mappings --&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;aui:signal&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;         &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_quit&amp;quot;&lt;/span&gt;   &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aui:signal&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;KEY_UP&amp;quot;&lt;/span&gt;    &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_up&amp;quot;&lt;/span&gt;     &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aui:signal&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;KEY_DOWN&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_down&amp;quot;&lt;/span&gt;   &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aui:signal&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;KEY_PPAGE&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_pgup&amp;quot;&lt;/span&gt;   &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aui:signal&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;KEY_NPAGE&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;on_pgdown&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Palette --&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;aui:palette&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aui:color&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;fg=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;   &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aui:color&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;opt&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;fg=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;   &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aui:color&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;fg=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aui:color&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;args&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fg=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;246&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/aui:palette&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/aui:MiniTop&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;mini-top.xml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a slightly bigger XML document where we have a few more nested widgets,
as well as a new feature: the &lt;code&gt;palette&lt;/code&gt; element. Let's start by looking at the
UI part. We see that the child of the &lt;code&gt;Window&lt;/code&gt; element is now a &lt;code&gt;Box&lt;/code&gt; with
vertical flow. This means that all the children that we add to this box will
span the whole width and pile up vertically. We use this element to divide the
window into three parts: the top one will hold some summary stats; the middle
will hold the process table; the bottom part is just a label telling us how to
quit the application.&lt;/p&gt;
&lt;p&gt;We see that the top part is just another &lt;code&gt;Box&lt;/code&gt;, this time with horizontal flow.
Inside we have four labels, two of which have fixed content and act as actual
labels, describing the values that we will update. In this case we will keep
track of the number of active process and the total CPU load.&lt;/p&gt;
&lt;p&gt;The middle section of the UI is a &lt;code&gt;ScrollView&lt;/code&gt;, which allows us create widgets
within it that overflow the actual terminal size. This is an abstraction that
makes for easy scrolling of overflowing content. In this example, inside the
&lt;code&gt;ScrollView&lt;/code&gt; we have a &lt;code&gt;Table&lt;/code&gt; object with three columns; these will be the
process ID, the CPU load for the process and its command line.&lt;/p&gt;
&lt;p&gt;To make the UI appealing to the eye, we shall make use of colours, and this is
where the new &lt;code&gt;palette&lt;/code&gt; element in the XML document steps in. This is used to
give a name to &lt;code&gt;curses&lt;/code&gt; colour pairs. In this particular example we are changing
the foreground colour only, but in principle we could change the background as
well by setting the &lt;code&gt;bg&lt;/code&gt; attribute. We'll see with the Python code below how to
easily reference the colours in the palette.&lt;/p&gt;
&lt;p&gt;Before moving on though, I appreciate that there isn't much of an official
documentation of the UI framework used by the Austin TUI project, and this post
is a way to make up for that as much as possible for now. Looking at all the
sample XML above you might be wondering where all those attributes come from.
For example, when we look at a &lt;code&gt;Label&lt;/code&gt; element, we see&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;aui:Label&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The attributes &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;align&lt;/code&gt; are precisely the arguments of the
&lt;code&gt;__init__&lt;/code&gt; method of the &lt;code&gt;Label&lt;/code&gt; class. Hence, if you want to find out which
attributes are available for a certain widget you will have to find it in the
widget collection and look at its constructor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every widget has at least the &lt;code&gt;name&lt;/code&gt; attribute. Every other widget requires
its own set of attributes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Widgets are discovered by the view builder in a dynamic way, which means that
you could sub-class &lt;code&gt;Widget&lt;/code&gt; and make your own widgets. If you do so and want
to reference your custom widget in the XML document, all you have to do is use
the class name as element name. For example, if you have something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;austin_tui.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Widget&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_attribute&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then in the XML document you would have something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;aui:MyWidget&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mywidget_instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;some-attribute=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;42&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- any potential children here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aui:MyWidget&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="updating-the-ui"&gt;Updating the UI&lt;/h1&gt;
&lt;p&gt;For the model part of the MVC pattern we don't have much to say here as that
will depend upon your application. In this post I will show you how to make a
minimalist top application, so we can have a look what the model code could look
like in this case a move over to the more interesting bit, which is the &lt;code&gt;C&lt;/code&gt; in
MVC.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;


&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cpu_percent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmdline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu_percent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cmdline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are familiar with the &lt;code&gt;psutil&lt;/code&gt; module, you will see that we are iterating
over all active processes to extract some information from them. In this case we
are interested in the PIDs, the CPU usage and the command line. These three
values will be used to fill in the three columns of the &lt;code&gt;Table&lt;/code&gt; widgets that we
introduced in &lt;code&gt;mini-top.xml&lt;/code&gt;. As we will see, there is some more code that we
could put into the model part of our design, but for simplicity we will embed
that into the controller. The  code below shows you how to update the UI every 2
seconds with fresh system data.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;
&lt;span class="normal"&gt;66&lt;/span&gt;
&lt;span class="normal"&gt;67&lt;/span&gt;
&lt;span class="normal"&gt;68&lt;/span&gt;
&lt;span class="normal"&gt;69&lt;/span&gt;
&lt;span class="normal"&gt;70&lt;/span&gt;
&lt;span class="normal"&gt;71&lt;/span&gt;
&lt;span class="normal"&gt;72&lt;/span&gt;
&lt;span class="normal"&gt;73&lt;/span&gt;
&lt;span class="normal"&gt;74&lt;/span&gt;
&lt;span class="normal"&gt;75&lt;/span&gt;
&lt;span class="normal"&gt;76&lt;/span&gt;
&lt;span class="normal"&gt;77&lt;/span&gt;
&lt;span class="normal"&gt;78&lt;/span&gt;
&lt;span class="normal"&gt;79&lt;/span&gt;
&lt;span class="normal"&gt;80&lt;/span&gt;
&lt;span class="normal"&gt;81&lt;/span&gt;
&lt;span class="normal"&gt;82&lt;/span&gt;
&lt;span class="normal"&gt;83&lt;/span&gt;
&lt;span class="normal"&gt;84&lt;/span&gt;
&lt;span class="normal"&gt;85&lt;/span&gt;
&lt;span class="normal"&gt;86&lt;/span&gt;
&lt;span class="normal"&gt;87&lt;/span&gt;
&lt;span class="normal"&gt;88&lt;/span&gt;
&lt;span class="normal"&gt;89&lt;/span&gt;
&lt;span class="normal"&gt;90&lt;/span&gt;
&lt;span class="normal"&gt;91&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;austin_tui.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewBuilder&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_cmdline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmdline&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;b&amp;gt;&amp;lt;opt&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/opt&amp;gt;&amp;lt;/b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;cmd&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/cmd&amp;gt; &amp;lt;args&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/args&amp;gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MiniTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_quit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;quit signal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_pgdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_pgup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scroll_down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cpu_percent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;format_cmdline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cmdline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cpu_percent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cmdline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;pid&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;8d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/pid&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;^10.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/b&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_cmdline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmdline&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nprocs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_percent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;3.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mini-top.austinui&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;austinui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;austinui&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bye!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;There are quite a few new things that we need to explan here. First of all we
see that we implement &lt;code&gt;MiniTop&lt;/code&gt; as a sub-class of &lt;code&gt;View&lt;/code&gt; and we declare all the
required event handlers. We now have an &lt;code&gt;update&lt;/code&gt; asynchronous method which we
use to update the UI every 2 seconds. For this to work, we need to create a task
using this method before starting the &lt;code&gt;asyncio&lt;/code&gt; event loop (line 83). On line 43
we have the model logic that we just saw above and the interesting part starts
after that. On line 55 we set the collected tabular data to the &lt;code&gt;table&lt;/code&gt; widget.
You would have guessed at this point that the way to reference a widget declared
by the XML document is via attribute access on the view object. In this case,
the &lt;code&gt;Table&lt;/code&gt; element has the &lt;code&gt;name&lt;/code&gt; attribute set to &lt;code&gt;table&lt;/code&gt;. Therefore we can
reference it inside the &lt;code&gt;MiniTop&lt;/code&gt; instance via &lt;code&gt;self&lt;/code&gt;, i.e. &lt;code&gt;self.table&lt;/code&gt;. On
lines 66-67 we do a similar thing, i.e. we update the value of the &lt;code&gt;nprocs&lt;/code&gt; and
&lt;code&gt;cpu&lt;/code&gt; labels with the number of process and the total CPU usage respectively. At
this point, no update is displayed on screen and this is for efficiency reasons.
Once we have modified all the widgets that needed to be updated we can force a
redraw by calling the &lt;code&gt;draw&lt;/code&gt; method. This merely updates some buffers in memory,
so in order to flush the changes to screen we have to make a call to the
&lt;code&gt;refresh&lt;/code&gt; method on a window-like object. In this case the simplest thing is to
just refresh the whole root widget (line 70).&lt;/p&gt;
&lt;p&gt;You might have also noticed that most of the event handlers are explicitly
returning &lt;code&gt;False&lt;/code&gt;. That's because we are manually forcing a refresh of the
&lt;code&gt;ScrollView&lt;/code&gt; widget (lines 23, 28, 33, 38) and therefore we return &lt;code&gt;False&lt;/code&gt; to
avoid propagating the refresh request further up the widget hierarchy for
performance. Here we only needed refreshing the &lt;code&gt;ScrollView&lt;/code&gt;; we could have
omitted the manual refresh and returned &lt;code&gt;True&lt;/code&gt; with the same result, but the
window that would get refreshed would be the root one.&lt;/p&gt;
&lt;h1 id="spicing-things-up-with-colours"&gt;Spicing Things up with Colours&lt;/h1&gt;
&lt;p&gt;The last thing we need to have a look at are those mysterious calls to the
&lt;code&gt;markup&lt;/code&gt; method and the &lt;code&gt;format_cmdline&lt;/code&gt; helper function. This is we we find
references to the &lt;code&gt;palette&lt;/code&gt; element in the XML document. Let's have a closer
look at line 58 for example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;pid&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;8d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/pid&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;markup&lt;/code&gt; method of a &lt;code&gt;View&lt;/code&gt; object is a convenience method for creating
strings with multiple attributes, like foreground/background colour, boldface,
reversed, using an XML-like markup syntax. In this particular case, we want to
write the PID on screen using the color pair with name &lt;code&gt;pid&lt;/code&gt; declared inside the
&lt;code&gt;palette&lt;/code&gt; element of the XML document. On line 59 we use the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag to make
the CPU usage bold. For the command line we do something more complex with the
&lt;code&gt;format_cmdline&lt;/code&gt; function. If the command line is non-empty, we use the &lt;code&gt;cmd&lt;/code&gt;
colour for the actual command, and the colour &lt;code&gt;args&lt;/code&gt; for the rest of the
arguments, with the exception of option values, which are highlighted with the
colour &lt;code&gt;opt&lt;/code&gt; and with boldface. This spares us from having to manually split a
string into chunks with different formatting.&lt;/p&gt;
&lt;p&gt;When you run the code above you should see something similar to the screenshot
below appearing in your terminal.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/mini_top.png"
    alt="CPython data structures"
  /&gt;
&lt;/p&gt;

&lt;p&gt;To quit the application, simply press &lt;code&gt;Q&lt;/code&gt; as suggested at the bottom.&lt;/p&gt;
&lt;p&gt;You can find a working example of this minimalistic top utility on
&lt;a href="https://github.com/p403n1x87/mini-top"&gt;GitHub&lt;/a&gt; if you want to play around with
it and familiarise a bit more with the Austin TUI way to resourceful text-based
user interfaces.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="tui"></category></entry><entry><title>An Overview of Monads in Haskell</title><link href="https://p403n1x87.github.io/an-overview-of-monads-in-haskell.html" rel="alternate"></link><published>2020-09-17T16:18:00+01:00</published><updated>2020-09-17T16:18:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2020-09-17:/an-overview-of-monads-in-haskell.html</id><summary type="html">&lt;p&gt;Monads are arguably one of the most important concepts in functional programming. In this post we pave the street to understanding how this purely category theoretical object finds its place in a language like Haskell.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functors"&gt;Functors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#applicative-functors"&gt;Applicative Functors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#monads"&gt;Monads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;If you are learning a functional programming language like Haskell, sooner or
later you will find yourself dealing with the concept of &lt;strong&gt;monad&lt;/strong&gt;. You probably
knew already that there is a fair bit of category theory embedded in the
language, and this comes as no surprise at all. Indeed, functional programming
languages were developed with the goal of making lambda calculus practical and,
as it turns out, type theory has many relations to category theory.&lt;/p&gt;
&lt;p&gt;In this post we make our way to the concept of monads in Haskell starting from
the notion of functor. The ultimate goal is to motivate the use of the term
monad by showing that we indeed have a monadic structure, but also give a
somewhat rigurous justification of the fact that "all told, monads are just
monoids in the category of endofunctors".&lt;/p&gt;
&lt;h1 id="functors"&gt;Functors&lt;/h1&gt;
&lt;p&gt;A typical pattern of functional programming is that of applying a function to a
list element-wise. There are many ways of doing this, but the most general one
is that of using the &lt;code&gt;map&lt;/code&gt; function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is, &lt;code&gt;map&lt;/code&gt; takes a function &lt;code&gt;a -&amp;gt; b&lt;/code&gt; and a list of type &lt;code&gt;[a]&lt;/code&gt; to produce a
list of type &lt;code&gt;[b]&lt;/code&gt; by simply applying the function to each entry of the first
list. Two important properties of the function &lt;code&gt;map&lt;/code&gt; follow from this
definition. The first involves its interaction with the identity function &lt;code&gt;id ::
a -&amp;gt; a&lt;/code&gt; which simply evaluates to its sole argument. Indeed,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the sense that both sides represent the same function. Now, if we have two
functions, &lt;code&gt;f :: a -&amp;gt; b&lt;/code&gt; and &lt;code&gt;g :: b -&amp;gt; c&lt;/code&gt;, it doesn't matter whether we first
compute the composition &lt;code&gt;g . f&lt;/code&gt; and apply it to &lt;code&gt;map&lt;/code&gt;, or compose &lt;code&gt;map g&lt;/code&gt; with
&lt;code&gt;map f&lt;/code&gt;. The net result is that we obtain a function that takes a list of type
&lt;code&gt;[a]&lt;/code&gt; that is sent to a list of type &lt;code&gt;[c]&lt;/code&gt; whose elements are precisely given by
the image of each element of the initial list through the composition &lt;code&gt;g . f&lt;/code&gt;.
We can express this fact with the identity&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's look back at what we have here. In more abstract terms, we can think of
the operation of putting square brackets around a type as some sort of map on
the set of Haskell types into itself, namely &lt;span class="math"&gt;\([\ \cdot\ ] : a \mapsto [a]\)&lt;/span&gt;, for
any Haskell type &lt;span class="math"&gt;\(a\)&lt;/span&gt;. Observe further that the type of the function &lt;code&gt;map&lt;/code&gt; is
indeed &lt;code&gt;map :: (a -&amp;gt; b) -&amp;gt; ([a] -&amp;gt; [b])&lt;/code&gt;. That is to say that &lt;code&gt;map&lt;/code&gt; sends a
function &lt;code&gt;a -&amp;gt; b&lt;/code&gt; to a function &lt;code&gt;[a] -&amp;gt; [b]&lt;/code&gt;, together with the two properties
above.&lt;/p&gt;
&lt;p&gt;We may be tempted, at this point, to introduce the Haskell category
&lt;span class="math"&gt;\(\mathsf{Hask}\)&lt;/span&gt;, whose objects are the Haskell types, and whose arrows are the
Haskell functions, i.e. those types that can be put into the form &lt;code&gt;a -&amp;gt; b&lt;/code&gt; for
some Haskell types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. If we do so, we then recognise that the pair
(&lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;) defines a functor from &lt;span class="math"&gt;\(\mathsf{Hask}\)&lt;/span&gt; into itself. That's because
&lt;code&gt;[]&lt;/code&gt; maps objects to objects (lists) and &lt;code&gt;map&lt;/code&gt; maps functions to functions
(between lists). That these mappings are functorial follows immediately from the
two properties that we have observed earlier.&lt;/p&gt;
&lt;p&gt;The next abstraction step is in realising that there is nothing special in the
(&lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;) pair. For if all we want are endofunctors on &lt;span class="math"&gt;\(\mathsf{Hask}\)&lt;/span&gt;, all
we really need is a &lt;em&gt;parametrised&lt;/em&gt; type &lt;code&gt;T&lt;/code&gt; and a map &lt;code&gt;fmap :: (a -&amp;gt; b) -&amp;gt; T a
-&amp;gt; T b&lt;/code&gt; that &lt;em&gt;plays nicely&lt;/em&gt; with &lt;code&gt;T&lt;/code&gt;, in the sense that it satisfies the
functoriality properties&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for any functions &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;. We then see that the list example we have
analyised above is just the special case where &lt;code&gt;T a = [a]&lt;/code&gt; and &lt;code&gt;fmap = map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get a feel of what functors mean in Haskell (or more generally in functional
programming), we should regard the parametrised type &lt;code&gt;T&lt;/code&gt; as a sort of
&lt;em&gt;container&lt;/em&gt; type. A list, of course, is an example of a container, as it
contains multiple instances of a certan type in an ordered fashon. But &lt;code&gt;T&lt;/code&gt; can
also be, e.g., a rooted tree with values of type &lt;code&gt;a&lt;/code&gt; on each of its nodes. So,
generally, &lt;code&gt;T&lt;/code&gt; is some sort of container structure that accomodates for multiple
values of the parameter type &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice now how the definition of &lt;code&gt;fmap&lt;/code&gt; depends on the parametrised type &lt;code&gt;T&lt;/code&gt;.
This means that the first step in defining an endofunctor over &lt;span class="math"&gt;\(\mathsf{Hask}\)&lt;/span&gt;
is to produce one such parametrised type &lt;code&gt;T&lt;/code&gt;. But once we have one, can we find
an &lt;code&gt;fmap&lt;/code&gt; such that (&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt;) is a functor? The answer to this question very
much depends on the nature of &lt;code&gt;T&lt;/code&gt;, but what we can be certain of is that once we
have found one such &lt;code&gt;fmap&lt;/code&gt;, then it is &lt;strong&gt;unique&lt;/strong&gt;. Why? This is a consequence of
the so-called &lt;code&gt;parametricity&lt;/code&gt; result, which derives from parametric
polymorphism. The function &lt;code&gt;fmap :: (a -&amp;gt; b) -&amp;gt; T a -&amp;gt; T b&lt;/code&gt; implies universal
quantifiers for the types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. That is to say, for any types &lt;code&gt;a&lt;/code&gt; and
&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; sends a function &lt;code&gt;a -&amp;gt; b&lt;/code&gt; to a function &lt;code&gt;T a -&amp;gt; T b&lt;/code&gt;. The key
observation is that, because of this parametric dependency on the types &lt;code&gt;a&lt;/code&gt; and
&lt;code&gt;b&lt;/code&gt;, the function &lt;code&gt;fmap&lt;/code&gt; cannot act in a way that depends on a particular choice
of the types, but can depend at most on the container structure described by the
parametrised type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to understand this concept, let's take a step back and consider again
the special case of lists. Suppose that we have another candidate &lt;code&gt;fmap'&lt;/code&gt; for an
&lt;code&gt;fmap&lt;/code&gt; other than &lt;code&gt;map&lt;/code&gt;. Since the types are arbitrary, such new candidate can
only interact with the list structure, i.e. apply the first argument, that is,
the function &lt;code&gt;f :: a -&amp;gt; b&lt;/code&gt; to each element of the list of type &lt;code&gt;[a]&lt;/code&gt; to produce
&lt;code&gt;[b]&lt;/code&gt;, and perhaps do a reshuffling. Now, if we apply this new candidate to the
identity &lt;code&gt;id :: a -&amp;gt; a&lt;/code&gt;, we get precisely the reshuffling bit &lt;code&gt;s = fmap' id&lt;/code&gt;. On
the other hand, &lt;code&gt;fmap'&lt;/code&gt; must satisfy the functor properties, and in particular
&lt;code&gt;fmap' id = id&lt;/code&gt;, whence &lt;code&gt;s = id&lt;/code&gt;. That is to say that &lt;code&gt;fmap'&lt;/code&gt; cannot actually do
any reshuffling, so it must coincide with &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The general argument works in the same way, we only need to replace the list
structure with a general one &lt;code&gt;T&lt;/code&gt; and argue that by the functor properties &lt;code&gt;fmap&lt;/code&gt;
can only map a function to each element of type &lt;code&gt;a&lt;/code&gt; inside &lt;code&gt;T a&lt;/code&gt; while
preserving the container structure described by &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;More elegantly, this result could have been obtained using the &lt;em&gt;free theorem&lt;/em&gt;
associated to the type &lt;code&gt;(a -&amp;gt; b) -&amp;gt; (T a -&amp;gt; T b)&lt;/code&gt;; see &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.38.9875&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;(Wadler,
1989)&lt;/a&gt;
for the details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="applicative-functors"&gt;Applicative Functors&lt;/h1&gt;
&lt;p&gt;We have seen that functors are a generalisation of the common pattern of mapping
a function over the elements of a list. Can we generalise to mapping of
functions with more than one argument? That is to say, given that (&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt;)
describes a functor, can we find, e.g., &lt;code&gt;fmap2 :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; (T a -&amp;gt; T b
-&amp;gt; T c)&lt;/code&gt;, that satisfies some reasonable coherence properties? A first
observation is that the type &lt;code&gt;a -&amp;gt; b -&amp;gt; c&lt;/code&gt; is identical to &lt;code&gt;a -&amp;gt; (b -&amp;gt; c)&lt;/code&gt;, just
by definition. If we apply &lt;code&gt;fmap&lt;/code&gt; to any instances of this type we would get
something of type &lt;code&gt;T a -&amp;gt; T (b -&amp;gt; c)&lt;/code&gt;, which isn't quite what we want. &lt;em&gt;But&lt;/em&gt;, if
we had a function &lt;code&gt;&amp;lt;*&amp;gt; :: T (a -&amp;gt; b) -&amp;gt; (T a -&amp;gt; T b)&lt;/code&gt; we would get closer, but
not quite there yet. Indeed, we could now define &lt;code&gt;fmap2&lt;/code&gt; like so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fmap2&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;fmap2&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that is, we curry the result of &lt;code&gt;fmap f&lt;/code&gt; with the first argument &lt;code&gt;x&lt;/code&gt; and then
apply &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; to the result to obtain a function that we can compute on &lt;code&gt;y&lt;/code&gt; to get
a result of type &lt;code&gt;T c&lt;/code&gt;. Of course, we can now repeat these steps to define
&lt;code&gt;fmap3 :: (a -&amp;gt; b -&amp;gt; c -&amp;gt; d) -&amp;gt; (T a -&amp;gt; T b -&amp;gt; T c -&amp;gt; Td)&lt;/code&gt; by using &lt;code&gt;fmap2&lt;/code&gt; as a
starting point, that is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fmap3&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmap2&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and carry on, to get a whole family of maps &lt;code&gt;fmapn&lt;/code&gt;. Using infix notation for
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; and assuming associativity to the left, we could then write the general
case as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fmapn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;fmapn&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;xn&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is now starting to look just like function application, except that we are
not making that very explicit with the first argument &lt;code&gt;x1&lt;/code&gt; of type &lt;code&gt;T a1&lt;/code&gt;. If we
wanted to fix that, we would have to find, e.g., a function &lt;code&gt;p&lt;/code&gt; such that &lt;code&gt;fmap
f x1 = (p f) &amp;lt;*&amp;gt; x&lt;/code&gt;. What's the type of &lt;code&gt;p&lt;/code&gt;? We see that &lt;code&gt;p :: a -&amp;gt; T a&lt;/code&gt; would
work well here, so if we could find such a function we could push the base of
the recursion back and define &lt;code&gt;fmap&lt;/code&gt; itself in terms of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;. Then we
could easily generalise functors to functions of an arbitrary number of
arguments by simply mapping it through &lt;code&gt;p&lt;/code&gt; and applying arguments with &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Haskell, it is customary to call the function &lt;code&gt;p&lt;/code&gt; with the name &lt;code&gt;pure&lt;/code&gt;; any
functor for which one can define both &lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; is then called an
&lt;em&gt;applicative&lt;/em&gt; functor. The importance of these special objects does not come
solely from the fact that they generalise the notion of mapping to functions of
more than one argument. Indeed, they represent an important step toward
&lt;em&gt;effectful&lt;/em&gt; programming inside a purely functional programming language. Perhaps
we can appreciate this better with a concrete example based on the functor
&lt;code&gt;Maybe&lt;/code&gt;. Its values can be used to represent the success or failure of an
operation. For exmaple, when an operation failed, we can simply return
&lt;code&gt;Nothing&lt;/code&gt;, else we return &lt;code&gt;Just x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the valid result of the
operation. Haskell makes &lt;code&gt;Maybe&lt;/code&gt; into an applicative functor by default by
defining&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;pure&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt;

&lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We see from the above definitions and the recursive nature of applicative
functors that the propagation of the occurrence of an invalid value like
&lt;code&gt;Nothing&lt;/code&gt; during the computation is automatically propagated to the end result,
with no need to put checks in place for each argument of the function &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before moving on, we should spend some more time looking back at the identity
&lt;code&gt;(pure f) &amp;lt;*&amp;gt; x = fmap f x&lt;/code&gt; and recalling that &lt;code&gt;fmap&lt;/code&gt; must satisfy some
coherence properties that make it part of the description of a functor. As we
have said earlier, we expect &lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; to satisfy some coherence
properties themselves if they are to work as they are supposed to, and we see
why that is. One of such properties comes for free, viz.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since &lt;code&gt;fmap id x = x&lt;/code&gt;. The other properties that are required of &lt;code&gt;pure&lt;/code&gt; and
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="nf"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and all ensure that &lt;code&gt;pure&lt;/code&gt; pretty much delivers what it promises. For example,
the first of the above three properties is just a way of ensuring that &lt;code&gt;pure&lt;/code&gt;
embeds ordinary function application into the effectful programming realm in an
unsurprising way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deeper ties with Category Theory are presented in details in the original
paper &lt;a href="http://www.staff.city.ac.uk/~ross/papers/Applicative.html"&gt;(McBride &amp;amp; Paterson,
2008)&lt;/a&gt;. There it is
shown how one can give a symmetric definition of &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; and show that an
applicative functor is just a &lt;em&gt;lax monoidal functor&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="monads"&gt;Monads&lt;/h1&gt;
&lt;p&gt;Monads have been introduced to crystallise yet another common pattern in
effectful programming that is not quite captured by both the Functor and the
Applicative "patterns".&lt;/p&gt;
&lt;p&gt;Consider the case of a program that consists of a series of steps that need to
be executed in order, and such that the output of one is used as input for the
next one. A classical example is a function &lt;code&gt;f&lt;/code&gt; that requires the result of a
division &lt;code&gt;g x y = x / y&lt;/code&gt;. It is clear that if &lt;code&gt;g&lt;/code&gt; receives a &lt;code&gt;0&lt;/code&gt; as second
argument during the execution of the program, we are in an exceptional situation
that somehow we need to handle. But we can hardly do so if &lt;code&gt;g&lt;/code&gt; is of type, say,
&lt;code&gt;g :: Int -&amp;gt; Int -&amp;gt; Int&lt;/code&gt;. Lacking support for catching and reacting to
exceptions, we need a way to &lt;em&gt;signal&lt;/em&gt; that something went wrong and propagate
that to the end.&lt;/p&gt;
&lt;p&gt;The first obvious thing to do is to rewrite &lt;code&gt;g&lt;/code&gt; in such a way that its type is
&lt;code&gt;g :: Int -&amp;gt; Int -&amp;gt; Maybe Int&lt;/code&gt;, so that &lt;code&gt;g _ 0 = Nothing&lt;/code&gt; and &lt;code&gt;g x y = Just (x /
y)&lt;/code&gt;. Then, for every function &lt;code&gt;f&lt;/code&gt; that receives the output of &lt;code&gt;g&lt;/code&gt; as input, we
would have to go through the tedious process of checking whether the value it
received is valid or not. If those functions have been coded already, then we
have a problem that is not much fun to solve.&lt;/p&gt;
&lt;p&gt;How about we check the arguments we are passing to a function that is coming
from another function, detecting any failures to propagate, else continue with
the normal execution? With this approach, all we need is a &lt;em&gt;binding&lt;/em&gt; function
&lt;code&gt;&amp;gt;&amp;gt;= :: Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b&lt;/code&gt; that checks the first argument,
and only apply it to the second argument if it makes sense to do so, propagating
any "bad" value otherwise. It is clear, just by looking at the involved types,
that applicative functors are of no much use in this case, since a function like
&lt;code&gt;g&lt;/code&gt; is not &lt;em&gt;pure&lt;/em&gt;, given that it can produce a side effect like &lt;code&gt;Nothing&lt;/code&gt;.
Hence, what we have here is a different pattern: the &lt;strong&gt;monad&lt;/strong&gt; pattern.&lt;/p&gt;
&lt;p&gt;The notion of &lt;em&gt;monad&lt;/em&gt; comes from category theory and arises from adjunction. But
before we can make contact with the Haskell notion of monads that was given
above we need to replace the bind operator &lt;code&gt;&amp;gt;&amp;gt;= :: M a -&amp;gt; (a -&amp;gt; M b) -&amp;gt; M b&lt;/code&gt;
(here &lt;code&gt;M&lt;/code&gt; is a parametrised type that we want to turn into a monad; hence &lt;code&gt;M&lt;/code&gt; is
a functor) with the function &lt;code&gt;join :: M (Μ a) -&amp;gt; M a&lt;/code&gt;. Together with &lt;code&gt;pure&lt;/code&gt; (or
&lt;code&gt;return&lt;/code&gt; we should say), it provides the structure that makes the endofunctor
&lt;code&gt;M&lt;/code&gt; a monad. In a nutshell, what we want to do is prove that &lt;code&gt;(M, pure, join)&lt;/code&gt;
has the monad structure. And we shall also see in what sense a monad can be
defined as a "monoid in the category of endofunctors", as Mac Lane put it.&lt;/p&gt;
&lt;p&gt;First things first, let's see how the &lt;code&gt;join&lt;/code&gt; function relates to the bind
operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;. You can convince yourself that the definition&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;has the correct type. As to what this is good for from a practical point of
view, recall the example of the function &lt;code&gt;g :: Int -&amp;gt; Int -&amp;gt; Maybe Int&lt;/code&gt; that we
saw before. We argued that we couldn't apply the applicative pattern because &lt;code&gt;g&lt;/code&gt;
is not a pure function and that the issue boiled down to &lt;code&gt;g&lt;/code&gt; having the "wrong"
type. For if we used &lt;code&gt;fmap2 :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; (Maybe a -&amp;gt; Maybe b -&amp;gt; Maybe
c)&lt;/code&gt;, we would end up with &lt;code&gt;fmap2 g :: Maybe Int -&amp;gt; Maybe Int -&amp;gt; Maybe (Maybe
Int)&lt;/code&gt;. But now, if we curry and apply &lt;code&gt;join&lt;/code&gt; we can &lt;em&gt;cure&lt;/em&gt; that double boxing
&lt;code&gt;Maybe (Maybe Int)&lt;/code&gt; to get back a &lt;code&gt;Maybe Int&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;Let's now look at the coherence properties that must be satisfied by &lt;code&gt;join&lt;/code&gt;. The
first one we note is its interaction with itself&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is quite easily understood if we look at the case of lists. Here the
&lt;code&gt;join&lt;/code&gt; function does what we would expect, considering its name: it flattens the
list of lists &lt;code&gt;[[a]]&lt;/code&gt; into a single list &lt;code&gt;[a]&lt;/code&gt; obtained by concatenation. The
second coherence property that we look at involves the interaction between
&lt;code&gt;join&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; (or &lt;code&gt;return&lt;/code&gt;), viz.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which can be understood as saying that when we embed a value of type &lt;code&gt;M a&lt;/code&gt; into
the "pure" part of &lt;code&gt;M (M a)&lt;/code&gt;, then &lt;code&gt;join&lt;/code&gt; "unboxes" the structure and gives us
the initial value back.&lt;/p&gt;
&lt;p&gt;Now, thanks to the two above properties, we can easily recognise a monad
structure for the triplet &lt;code&gt;(M, pure, join)&lt;/code&gt;, with &lt;code&gt;T&lt;/code&gt; the endofunctor and &lt;code&gt;pure&lt;/code&gt;
and &lt;code&gt;join&lt;/code&gt; representing the required natural transformations.&lt;/p&gt;
&lt;p&gt;In what sense can we regard a monad as a monoid? The general qualitative answer
is that the map &lt;code&gt;pure&lt;/code&gt; is akin to a unit and &lt;code&gt;join&lt;/code&gt; is akin to the binary
operation on a monoid. But if we look at the type of &lt;code&gt;join&lt;/code&gt;, which is &lt;code&gt;M (M a)
-&amp;gt; M a&lt;/code&gt;, we don't see any sign of a Cartesian product. Instead, we have some
sort of composition of functors, whence the second part of the qualitative
answer, i.e. that the Cartesian product should be replaced with "composition".
But what kind of composition? Let's clarify these points a bit.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Let'sabandon Haskell functors for now, since it is pretty clear that the last&lt;/dt&gt;
&lt;dt&gt;"pattern" that we have described has all the rights to be called a &lt;em&gt;monad&lt;/em&gt;, and&lt;/dt&gt;
&lt;dt&gt;look at the matter from the perspective of category theory. Given functors $F, G&lt;/dt&gt;
&lt;dd&gt;C \to D&lt;span class="math"&gt;\(, $J, K : D \to E\)&lt;/span&gt; and natural transformations &lt;span class="math"&gt;\(\alpha : F \Rightarrow
G\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta : J \Rightarrow K\)&lt;/span&gt;, we can construct a new natural transformation
&lt;span class="math"&gt;\(\beta \circ \alpha\)&lt;/span&gt; between the functors &lt;span class="math"&gt;\(J \circ F\)&lt;/span&gt; and &lt;span class="math"&gt;\(K \circ G\)&lt;/span&gt; according
to the following commutative diagram&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="math"&gt;$$\require{AMScd}
\begin{CD}
  F(X) @&amp;gt;\alpha_X&amp;gt;&amp;gt; G(X)\\
  @VJVV @VJVV\\ (J\circ F)(X) @&amp;gt;J(\alpha_X)&amp;gt;&amp;gt;
(J\circ G)(X) @&amp;gt;\beta_{G(X)}&amp;gt;&amp;gt; (K\circ G)(X)
\end{CD}$$&lt;/div&gt;
&lt;p&gt;That is, we define the natural transformation &lt;span class="math"&gt;\(\beta\circ\alpha : J \circ F
\Rightarrow K \circ G\)&lt;/span&gt; as having components&lt;/p&gt;
&lt;div class="math"&gt;$$(\beta \circ \alpha)_X = \beta_{G(X)} \circ J(\alpha_X)$$&lt;/div&gt;
&lt;p&gt;Using &lt;span class="math"&gt;\(\eta\)&lt;/span&gt; and &lt;span class="math"&gt;\(\mu\)&lt;/span&gt; as short-hand notation for the natural transformations
&lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;, we see that the two coherence properties above can be stated
in the form of commutative diagram&lt;/p&gt;
&lt;div class="math"&gt;$$\require{AMScd}
\begin{CD}
  M \circ M \circ M @&amp;gt;\iota_M\circ \mu&amp;gt;&amp;gt; M \circ M\\
  @V\mu \circ \iota_MVV @V\mu VV\\
  M \circ M @&amp;gt;\mu&amp;gt;&amp;gt; M
\end{CD}$$&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="math"&gt;$$\require{AMScd}
\begin{CD}
  M \circ I @&amp;gt; \iota_M \circ \eta &amp;gt;&amp;gt; M \circ M @&amp;lt; \eta\circ\iota_M &amp;lt;&amp;lt; I \circ
    M\\
  @| @V \mu VV @|\\
  M @= M @= M
\end{CD}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\iota_M\)&lt;/span&gt; denotes of course the identity natural transformation. Note
that, in terms of components, the two diagrams are equivalent to the relations&lt;/p&gt;
&lt;div class="math"&gt;$$\forall X,\ \mu_X(M(\mu_X)) = \mu_X(\mu_{M(X)})$$&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="math"&gt;$$\forall X,\ \mu(M(\eta_X)) = \mu(\eta_{M(X)}),$$&lt;/div&gt;
&lt;p&gt;which we can easily translate back into the original properties for the Haskell
&lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The above diagrams should now make more precise the meaning of Mac Lane's sentence&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All told, a monad in &lt;span class="math"&gt;\(X\)&lt;/span&gt; is just a monoid in the category of endofunctors of
&lt;span class="math"&gt;\(X\)&lt;/span&gt;, with product &lt;span class="math"&gt;\(\times\)&lt;/span&gt; replaced by composition of endofunctors and unit
set by the identity endofunctor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed we see that &lt;span class="math"&gt;\(\mu\)&lt;/span&gt; and &lt;span class="math"&gt;\(\eta\)&lt;/span&gt; have diagrams similar to the analogous
concepts in monoids, with the difference that functor composition &lt;span class="math"&gt;\(\circ\)&lt;/span&gt; is now
everywhere we would expect a Cartesian product &lt;span class="math"&gt;\(\times\)&lt;/span&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Programming"></category><category term="haskell"></category><category term="category theory"></category><category term="functional programming"></category></entry><entry><title>Deterministic and Statistical Python Profiling</title><link href="https://p403n1x87.github.io/deterministic-and-statistical-python-profiling.html" rel="alternate"></link><published>2019-05-05T17:35:00+01:00</published><updated>2019-05-05T17:35:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2019-05-05:/deterministic-and-statistical-python-profiling.html</id><summary type="html">&lt;p&gt;If you want to be sure that your applications are working optimally, then sooner or later you will end up turning to profiling techniques to identify and correct potential issues with your code. In this post, I discuss some of the current profiling tools and techniques for Python. The official documentation has a &lt;a href="https://docs.python.org/3/library/profile.html"&gt;whole section&lt;/a&gt; on the subject, but we shall go beyond that and have a look at some alternative solutions, especially in the area of sampling profilers.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#brief-introduction-to-profiling"&gt;Brief Introduction to Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-profiling"&gt;Python Profiling&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#standard-python-profiling"&gt;Standard Python Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-look-under-the-bonnet"&gt;A Look Under the Bonnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#statistical-profiling"&gt;Statistical Profiling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#enter-austin"&gt;Enter Austin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#on-your-marks"&gt;On Your Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flame-graphs-with-austin"&gt;Flame Graphs with Austin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tui"&gt;The TUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-austin"&gt;Web Austin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#write-your-own"&gt;Write Your Own&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="brief-introduction-to-profiling"&gt;Brief Introduction to Profiling&lt;/h1&gt;
&lt;p&gt;Let's start with a quick introduction to what &lt;em&gt;profiling&lt;/em&gt; is. &lt;em&gt;Profiling&lt;/em&gt; is a
run-time program analysis technique. Generally, a certain level of
&lt;em&gt;instrumentation&lt;/em&gt; is required to retrieve some kind of &lt;em&gt;tracing&lt;/em&gt; information
while the program is running. This is usually in the form of tracing
instructions interleaved with the line of your source code, like debug
statements, for instance, usually enriched with timestamp information or other
relevant details, like memory usage, etc... .&lt;/p&gt;
&lt;p&gt;One normally distinguishes between two main categories of profilers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;event-based&lt;/em&gt; (or &lt;em&gt;deterministic&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;statistical&lt;/em&gt; (or &lt;em&gt;sampling&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Profilers in the first category make use of &lt;em&gt;hooks&lt;/em&gt; that allow registering event
callbacks. At the lowest level, these hooks are provided directly by the
operating system and allow you to trace events like function calls and returns.
Virtual machines and interpreters, like JVM and CPython, provide &lt;em&gt;software&lt;/em&gt;
hooks instead, for generally the same events, but also for language-specific
features, like class loading for instance. The reason why profilers in this
category are called &lt;em&gt;deterministic&lt;/em&gt; is that, by listening to the various events,
you can get a deterministic view of what is happening inside your application.&lt;/p&gt;
&lt;p&gt;In contrast, &lt;em&gt;statistical&lt;/em&gt; profilers tend to provide approximate figures only,
obtained by, e.g., sampling the call stack at regular interval of times. These
samples can then be analysed statistically to provide meaningful metrics for the
profiled target.&lt;/p&gt;
&lt;p&gt;One might get the impression that deterministic profilers are a better choice
than statistical profilers. However, both categories come with pros and cons.
For example, statistical profilers usually require less instrumentation, if none
at all, and introduce less overhead in the profiled target program. Therefore,
if a statistical profiler can guarantee a certain accuracy on the metrics that
can be derived from them, then it is usually a better choice over a more
accurate deterministic profiler that can introduce higher overhead.&lt;/p&gt;
&lt;h1 id="python-profiling"&gt;Python Profiling&lt;/h1&gt;
&lt;p&gt;There are quite a plethora of profiling tools available for Python, either
deterministic or statistical. The official documentation describes the use of
the Python profiling interface through two different implementations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/profile.html#module-profile"&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/profile.html#module-cProfile"&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The former is a pure Python module and, as such, introduces more overhead than
the latter, which is a C extension that implements the same interface as
&lt;code&gt;profile&lt;/code&gt;. They both fit into the category of &lt;em&gt;deterministic&lt;/em&gt; profilers and make
use of the Python C API
&lt;a href="https://docs.python.org/3/c-api/init.html#profiling-and-tracing"&gt;&lt;code&gt;PyEval_SetProfile&lt;/code&gt;&lt;/a&gt;
to register event hooks.&lt;/p&gt;
&lt;h2 id="standard-python-profiling"&gt;Standard Python Profiling&lt;/h2&gt;
&lt;p&gt;Let's have a look at how to use &lt;code&gt;cProfile&lt;/code&gt;, as this will be the standard choice
for a deterministic profiler. Here is an example that will profile the
call-stack of &lt;code&gt;psutil.process_iter&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# File: process_iter.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;

&lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;[list(psutil.process_iter()) for i in range(1_000)]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;process_iter&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code runs &lt;code&gt;psutil.process_iter&lt;/code&gt; for 1000 times through cProfile and
sends the output to the &lt;code&gt;process_iter&lt;/code&gt; file in the current working directory. A
good reason to save the result to a file is that one can then use a tool like
&lt;a href="https://github.com/jrfonseca/gprof2dot"&gt;gprof2dot&lt;/a&gt; to provide a graphical
representation of the collected data. This tool turns the output of cProfile
into a dot graph which can then be visualised to make better sense of it. E.g.,
these are the commands required to collect the data and visualise it in the form
of a DOT graph inside a PDF document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 process_iter.py
gprof2dot -f pstats process_iter &lt;span class="p"&gt;|&lt;/span&gt; dot -Tpdf -o process_iter.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is what the result will look like. The colours help us identify the
branches of execution where most of the time is spent.&lt;/p&gt;
&lt;p&gt;&lt;img alt="process_iter" src="https://p403n1x87.github.io/images/python-profiling/process_iter.svg"&gt;&lt;/p&gt;
&lt;h2 id="a-look-under-the-bonnet"&gt;A Look Under the Bonnet&lt;/h2&gt;
&lt;p&gt;The output of a tool like gprof2dot can be quite intuitive to understand,
especially if you have had some prior experience with profilers. However, in
order to better appreciate what is still to come it is best if we have a quick
look at some of the basics of the Python execution model.&lt;/p&gt;
&lt;p&gt;Python is an interpreted language and the reference implementation of its
interpreter is &lt;a href="https://en.wikipedia.org/wiki/CPython"&gt;CPython&lt;/a&gt;. As the name
suggests, it is written in C, and it offers a C API that can be used to write C
extensions.&lt;/p&gt;
&lt;p&gt;One of the fundamental objects of CPython is the interpreter itself, which has a
data structure associated with it, namely &lt;code&gt;PyInterpreterState&lt;/code&gt;. In principle,
there can be many instances of &lt;code&gt;PyInterpreterState&lt;/code&gt; within the same process, but
for the sake of simplicity, we shall ignore this possibility here. One of the
fields of this C data structure is &lt;code&gt;tstate_head&lt;/code&gt;, which points to the first
element of a doubly-linked list of instances of the &lt;code&gt;PyThreadState&lt;/code&gt; structure.
As you can imagine, this other data structure represents the state of a thread
of execution associated with the referring interpreter instance. We can navigate
this list by following the references of its field &lt;code&gt;next&lt;/code&gt; (and navigate back
with &lt;code&gt;prev&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Each instance of &lt;code&gt;PyThreadState&lt;/code&gt; points to the current execution frame, which is
the object that bears the information about the execution of a code block via
the field &lt;code&gt;frame&lt;/code&gt;. This is described by the &lt;code&gt;PyFrameObject&lt;/code&gt; structure, which is
also a list. In fact, this is the stack that we are after. Each frame will have,
in general, a parent frame that can be retrieved by means of the &lt;code&gt;f_back&lt;/code&gt;
pointer on the &lt;code&gt;PyFrameObject&lt;/code&gt; structure. The picture produced by gprof2dot of
the previous section is the graphical representation of this stack of frames.
The information contained in the first row of each box comes from the
&lt;code&gt;PyCodeObject&lt;/code&gt; structure, which can be obtained from every instance of
&lt;code&gt;PyFrameObject&lt;/code&gt; via the &lt;code&gt;f_code&lt;/code&gt; field. In particular, &lt;code&gt;PyCodeObject&lt;/code&gt; allows you
to retrieve the name of the file that contains the Python code being executed in
that frame as well as its line number and the name of the context (e.g. the
current function).&lt;/p&gt;
&lt;p&gt;Sometimes the C API changes between releases, but the following image is a
fairly stable representation of the relations between the above-mentioned
structures that are common among many of the major CPython releases.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/python-profiling/python_structs.svg"
    alt="CPython data structures"
  /&gt;
&lt;/p&gt;

&lt;p&gt;The loop around &lt;code&gt;PyFrameObject&lt;/code&gt;, which represents its field &lt;code&gt;f_back&lt;/code&gt;, creates
the structure of a singly-linked list of frame objects. This is precisely the
frame stack.&lt;/p&gt;
&lt;p&gt;The Python profiling API can be demonstrated with some simple Python code. The
following example declares a decorator, &lt;code&gt;@profile&lt;/code&gt;, that can be used to extract
the frame stack generated by the execution of a function. In this case, we
define the factorial function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c_&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_code&lt;/span&gt;
            &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_lineno&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_back&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{:12}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;old_profiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getprofile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setprofile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setprofile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_profiler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;


&lt;span class="nd"&gt;@profile&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the coding of the &lt;code&gt;profiler&lt;/code&gt; function can be simplified considerably
by using the &lt;code&gt;inspect&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c_&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;

      &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]]&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{:8}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="statistical-profiling"&gt;Statistical Profiling&lt;/h2&gt;
&lt;p&gt;For a profiler from the statistical category, we have to look for external
tools. In this case, The "standard" approach is to make use of a system call
like &lt;code&gt;setitimer&lt;/code&gt;, which is used to register a signal handler that gets called at
regular intervals of time. The general idea is to register a callback that gets
a snapshot of the current frame stack when triggered. An example of a profiler
that works like this is &lt;a href="https://github.com/vmprof/vmprof-python"&gt;vmprof&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some drawbacks of this approach are: 1. the signal handler runs in the same
process as the Python interpreter, and generally the main thread; 2. signals can
interrupt system calls, which can cause stalls in the running program.&lt;/p&gt;
&lt;p&gt;There are other approaches that can be taken in order to implement a statistical
profiler, though. An example is &lt;a href="https://github.com/uber/pyflame"&gt;pyflame&lt;/a&gt;,
which is more in the spirit of a debugging tool and uses &lt;code&gt;ptrace&lt;/code&gt;-like system
calls. The situation is a bit more involved here since the profiler is now an
external process. The general idea is to use &lt;code&gt;ptrace&lt;/code&gt; to pause the running
Python program, read its virtual memory and reconstruct the frame stack from it.
Here, the main challenges are 1. to find the location of the relevant CPython
data structures in memory and 2. parse them to extract the frame stack
information. The differences between Python 2 and Python 3 and the occasional
changes of the CPython ABI within the same minor release add up to the
complexity of the task.&lt;/p&gt;
&lt;p&gt;Once all has been taken care of, though, a statistical profiler of this kind has
the potential of lowering the overhead caused by source instrumentation even
further so that the payoff is generally worth the effort.&lt;/p&gt;
&lt;h1 id="enter-austin"&gt;Enter Austin&lt;/h1&gt;
&lt;p&gt;We just saw that with a tool like pyflame we can get away with no
instrumentation. An objection that can be raised against it, though, is that it
still halts the profiled program in order to read the interpreter state. System
calls like &lt;code&gt;ptrace&lt;/code&gt; were designed for debugging tools, for which it is desirable
to stop the execution at some point, inspect memory, step over one instruction
or a whole line of source code at a time etc.... Ideally, we would like our
profiler to interfere as little as possible with the profiled program.&lt;/p&gt;
&lt;p&gt;This is where a tool like &lt;a href="https://github.com/P403n1x87/austin"&gt;Austin&lt;/a&gt; comes
into play. Austin is, strictly speaking, not a full-fledged profiler on its own.
In fact, Austin is merely a frame stack sampler for CPython. Concretely, this
means that all Austin does is to sample the frame stack of a running Python
program at (almost) regular intervals of time.&lt;/p&gt;
&lt;p&gt;A similar approach is followed by &lt;a href="https://github.com/benfred/py-spy"&gt;py-spy&lt;/a&gt;,
another Python profiler written in Rust and inspired by
&lt;a href="https://github.com/rbspy/rbspy"&gt;rbspy&lt;/a&gt;. However, Austin tends to provide higher
performance in general for two main reasons. One is that it is written in pure
C, with no external dependencies other than the standard C library. The other is
that Austin is just a frame stack sampler. It focuses on dumping the relevant
parts of the Python interpreter state as quickly as possible and delegates any
data aggregations and analysis to external tools. In theory, Austin offers you
higher sampling rates at virtually no cost at the expenses of the profiled
process. This makes Austin the ideal choice for profiling production code at
run-time, with not even a single line of instrumentation required!&lt;/p&gt;
&lt;p&gt;So, how does Austin read the virtual memory of another process without halting
it? Many platforms offer system calls to do just that. On Linux, for example,
the system call is
&lt;a href="http://man7.org/linux/man-pages/man2/process_vm_readv.2.html"&gt;&lt;code&gt;process_vm_readv&lt;/code&gt;&lt;/a&gt;.
Once one has located the instance of &lt;code&gt;PyInterpreterState&lt;/code&gt;, everything else
follows automatically, as we saw with the discussion on some of the details of
the CPython execution model.&lt;/p&gt;
&lt;h2 id="on-your-marks"&gt;On Your Marks&lt;/h2&gt;
&lt;p&gt;At this point you might have started, quite understandably, to be a bit
concerned with concurrency issues. What can we actually make of a memory dump
from a running process we have no control over? What guarantees do we have that
the moment we decide to peek at the Python interpreter state, we find all the
relevant data structures in a consistent state? The answer to this question lies
in the difference in execution speed between C and Python code, the latter
being, on average, order of 10 times faster than the former. So what we have
here is a race between Austin (which is written in C) and the Python target.
When Austin samples the Python interpreter memory, it does so quite quickly
compared to the scale of execution of a Python code block. On the other hand,
CPython is also written in C, can refresh its state pretty quickly too. As a
cinematic analogy, think that we are trying to create an animation by taking
snapshots of a moving subject in quick succession. If the motion we are trying
to capture is not too abrupt (compared to the time it takes to take a snapshot,
that is), then we won't spot any motion blur and our images will be perfectly
clear. This video of the Cassini flyby over Jupiter, Europa and Io, for
instance, been made from still images, visualises this idea clearly.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;iframe
      class="center-image"
    width="100%"
    height="315"
    src="https://www.youtube.com/embed/-0JxkZjwpRg"
    frameborder="0"
    allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;
  &lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With Austin, each frame stack sample is the analogue of a snapshot and the
moving subject is the Python code being executed by the interpreter. Of course,
Austin could be unlucky and decide to sample precisely during the moment CPython
is in the middle of updating the frame stack. However, based on our previous
considerations, we can expect this to be a rather rare event. Sometimes a
picture is worth a thousand words, so here is an idealistic "CPython vs Austin"
execution timeline comparison.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/python-profiling/timeline.svg"
    alt="CPython and Austin timeline comparison"
  /&gt;
&lt;/p&gt;

&lt;p&gt;Now one could argue that, in order to decrease the error rate, an approach
similar to pyflame, where we halt the execution before taking a snapshot, would
be a better solution. In fact, it makes practically no difference. Indeed it
could happen that the profiler decides to call &lt;code&gt;ptrace&lt;/code&gt; while CPython is in the
middle of refreshing the frame stack. In this case, it doesn't really matter
whether CPython has been halted or not, the frame stack will be in an
inconsistent state anyway.&lt;/p&gt;
&lt;p&gt;As a final wrap-up comment to this digression, statistical profilers for Python
like Austin can produce reliable output, as the error rate tends to be very low.
This is possible because Austin is written in pure C and therefore offers
optimal sampling performance.&lt;/p&gt;
&lt;h2 id="flame-graphs-with-austin"&gt;Flame Graphs with Austin&lt;/h2&gt;
&lt;p&gt;The simplest way to turn Austin into a basic profiler is to pipe it to a tool
like Brendan Gregg's &lt;a href="https://github.com/brendangregg/FlameGraph"&gt;FlameGraph&lt;/a&gt;.
For example, assuming that &lt;code&gt;austin&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt; variable (e.g. because you
have installed it from the Snap Store with &lt;code&gt;sudo snap install austin --beta
--classic&lt;/code&gt;) and that &lt;code&gt;flamegraph.pl&lt;/code&gt; is installed in &lt;code&gt;/opt/flamegraph&lt;/code&gt;, we can
do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;austin python3 process_iter.py &lt;span class="p"&gt;|&lt;/span&gt; /opt/flamegraph/flamegraph.pl --countname&lt;span class="o"&gt;=&lt;/span&gt;usec &amp;gt; process_iter.svg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are using &lt;code&gt;--countname=usec&lt;/code&gt; because Austin samples frame stacks in
microseconds and this information will then be part of the output of the flame
graph tool. The following image is the result that I have got from running the
above command.&lt;/p&gt;
&lt;p&gt;&lt;object data="https://p403n1x87.github.io/images/python-profiling/process_iter_fg.svg"
          type="image/svg+xml"
                width="100%"
                class="center-image" &gt;
  &lt;img src="https://p403n1x87.github.io/images/python-profiling/process_iter_fg.svg" style="width:100%;"/&gt;
&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;Austin is now included in the official Debian repositories. This means that you
can install it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install austin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;on Linux distributions that are derived from Debian. On Windows, Austin can be
installed from &lt;a href="https://chocolatey.org/packages/austin"&gt;Chocolatey&lt;/a&gt; with the
command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;choco install austin --pre
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, you can just head to the
&lt;a href="https://github.com/P403n1x87/austin/releases"&gt;release&lt;/a&gt; page on GitHub and
download the appropriate binary release for your platform.&lt;/p&gt;
&lt;h2 id="the-tui"&gt;The TUI&lt;/h2&gt;
&lt;p&gt;The GitHub repository of Austin comes with a TUI application written in Python
and based on &lt;code&gt;curses&lt;/code&gt;. It provides an example of an application that uses the
output from Austin to display &lt;em&gt;live&lt;/em&gt; top-like profiling statistics of a running
Python program.&lt;/p&gt;
&lt;p&gt;If you want to try it, you can install it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install git+https://github.com/P403n1x87/austin.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;austin-tui python3 /path/to/process_iter.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, the TUI shows only the current frame being executed in the selected
thread. You can navigate through the different threads with &lt;kbd&gt;⇞ Page Up&lt;/kbd&gt;
and &lt;kbd&gt;⇟ Page Down&lt;/kbd&gt;. You can also view all the collected samples with the
Full Mode, which can be toggled with &lt;kbd&gt;F&lt;/kbd&gt;. The currently executing frame
will be highlighted and a tree representation of the current frame stack will be
available on the right-hand side of the terminal.&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/python-profiling/austin-tui_threads_nav.gif"
    alt="Austin TUI"
  /&gt;
&lt;/p&gt;

&lt;p&gt;If you are a statistician or a data scientist working with Python, you can use
the TUI to peek at your model while it is training to see what is going on and
to identify areas of your code that could potentially be optimised to run
faster. For example, let's assume that you are training a model on Linux in a
single process using the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 my_model.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can attach the TUI to your model with the command (as superuser)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;austin-tui -p &lt;span class="sb"&gt;`&lt;/span&gt;pgrep -f my_model.py &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; -i &lt;span class="m"&gt;10000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;pgrep&lt;/code&gt; part is there to select the PID of the Python process that is
running your model, while &lt;code&gt;-i 10000&lt;/code&gt; sets the sampling interval to 10 ms.&lt;/p&gt;
&lt;h2 id="web-austin"&gt;Web Austin&lt;/h2&gt;
&lt;p&gt;Web Austin is another example of how to use Austin to build a profiling tool. In
this case, we make use of the
&lt;a href="https://github.com/spiermar/d3-flame-graph"&gt;d3-flame-graph&lt;/a&gt; plugin for
&lt;a href="https://d3js.org/"&gt;D3&lt;/a&gt; to produce a &lt;strong&gt;live&lt;/strong&gt; flame graph visualisation of the
collected samples inside a web browser. This opens up to &lt;em&gt;remote profiling&lt;/em&gt;, as
the web application can be served on an arbitrary IPv4 address.&lt;/p&gt;
&lt;p&gt;Like the TUI, Web Austin can be installed from GitHub with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install git+https://github.com/P403n1x87/austin.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming you are still interested to see what is happening inside your
statistical model while it is training, you can use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;austin-web -p &lt;span class="sb"&gt;`&lt;/span&gt;pgrep -f my-model.py &lt;span class="p"&gt;|&lt;/span&gt; head -n &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; -i &lt;span class="m"&gt;10000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As for the TUI, the command line arguments are the same as Austin's. When Web
Austin starts up, it creates a simple HTTP server that serves on &lt;code&gt;localhost&lt;/code&gt; at
an ephemeral port.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# austin-web -p `pgrep -f my-model.py | head -n 1` -i 10000
_____      ___       __    ______       _______              __________             _____
____/|_    __ |     / /_______  /_      ___    |___  __________  /___(_)______      ____/|_
_|    /    __ | /| / /_  _ \_  __ \     __  /| |  / / /_  ___/  __/_  /__  __ \     _|    /
/_ __|     __ |/ |/ / /  __/  /_/ /     _  ___ / /_/ /_(__  )/ /_ _  / _  / / /     /_ __|
 |/        ____/|__/  \___//_.___/      /_/  |_\__,_/ /____/ \__/ /_/  /_/ /_/       |/


* Sampling process with PID 3711 (python3 my_model.py)
* Web Austin is running on http://localhost:34257. Press Ctrl+C to stop.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you then open &lt;code&gt;http://localhost:34257&lt;/code&gt; in your browser you will then see a
web application that looks like the following&lt;/p&gt;
&lt;p align="center"&gt;
  &lt;img
    src="https://p403n1x87.github.io/images/python-profiling/web-austin.gif"
    alt="Web Austin"
  /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that an active internet connection is required for the application to
work, as the d3-flame-graph plugin, as well as some fonts, are retrieved from
remote sources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to change the host and the port of the HTTP server created by Web
Austin you can set the environment variables &lt;code&gt;WEBAUSTIN_HOST&lt;/code&gt; and
&lt;code&gt;WEBAUSTIN_PORT&lt;/code&gt;. If you want to run the Web Austin web application on, e.g.,
&lt;code&gt;0.0.0.0:8080&lt;/code&gt;, so that it can be accessed from everywhere, use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# WEBAUSTIN_HOST=&amp;quot;0.0.0.0&amp;quot; WEBAUSTIN_PORT=8080 austin-web -p `pgrep -f my-model.py | head -n 1` -i 10000
_____      ___       __    ______       _______              __________             _____
____/|_    __ |     / /_______  /_      ___    |___  __________  /___(_)______      ____/|_
_|    /    __ | /| / /_  _ \_  __ \     __  /| |  / / /_  ___/  __/_  /__  __ \     _|    /
/_ __|     __ |/ |/ / /  __/  /_/ /     _  ___ / /_/ /_(__  )/ /_ _  / _  / / /     /_ __|
 |/        ____/|__/  \___//_.___/      /_/  |_\__,_/ /____/ \__/ /_/  /_/ /_/       |/


* Sampling process with PID 3711 (python3 my_model.py)
* Web Austin is running on http://0.0.0.0:8080. Press Ctrl+C to stop.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="write-your-own"&gt;Write Your Own&lt;/h2&gt;
&lt;p&gt;Austin's Powers (!) reside in its very simplicity. The "hard" problem of
sampling the Python frame stack has been solved for you so that you can focus on
processing the samples to produce the required metrics.&lt;/p&gt;
&lt;p&gt;If you decide to write a tool in Python, the Austin project on GitHub comes with
a Python wrapper. Depending on your preferences, you can choose between a
thread-based approach or an &lt;code&gt;asyncio&lt;/code&gt; one. Just as an example, let's see how to
use the &lt;code&gt;AsyncAustin&lt;/code&gt; class to make a custom profiler based on the samples
collected by Austin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;austin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AsyncAustin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;austin.stats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_line&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyAustin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncAustin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Subclass AsyncAustin and implement this callback. This will be called&lt;/span&gt;
    &lt;span class="c1"&gt;# every time Austin generates a sample. The convenience method parse_line&lt;/span&gt;
    &lt;span class="c1"&gt;# will parse the sample and produce the thread name, the stack of contexts&lt;/span&gt;
    &lt;span class="c1"&gt;# with the corresponding line numbers and the measured duration for the&lt;/span&gt;
    &lt;span class="c1"&gt;# sample.&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_sample_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;my_austin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyAustin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;my_austin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;my_austin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Austin failed to start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MyAustin is starting...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;my_austin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The profiled target has terminated.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MyAustin has been terminated from keyboard.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the example above shows, it is enough to inherit from &lt;code&gt;AsyncAustin&lt;/code&gt; and
define the &lt;code&gt;on_sample_received&lt;/code&gt; callback. This will get called every time Austin
produces a sample. You can then do whatever you like with it. Here we simply
pass the &lt;code&gt;sample&lt;/code&gt;, which is just a binary string in the format &lt;code&gt;Thread
[tid];[func] ([mod]);#[line no];[func] ...;L[line no] [usec]&lt;/code&gt; to the
&lt;code&gt;parse_line&lt;/code&gt; function, which conveniently split the string into its main
components, i.e. the thread identifier, the stack of frames and the sample
duration. We then print the resulting triple to screen.&lt;/p&gt;
&lt;p&gt;The rest of the code is there to create an instance of this custom Austin
application. We call &lt;code&gt;wait&lt;/code&gt; to ensure that Austin has been started successfully.
The optional argument is a timeout, which defaults to 1. If Austin is not
started within 1 second, &lt;code&gt;wait&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt;. If we do not wish to do
anything else with the event loop, we can then simply call the &lt;code&gt;join&lt;/code&gt; methods
which schedules the main read loop that calls the &lt;code&gt;on_sample_received&lt;/code&gt; callback
whenever a sample is read from Austin's &lt;code&gt;stdout&lt;/code&gt; file descriptor.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;In this post, we have seen a few profiling options for Python. We have argued
that some statistical profilers, like Austin, can prove valuable tools. Whilst
providing approximate figures, the accuracy is in general quite high and the
error rate very low. Furthermore, no instrumentation is required and the
overhead introduced is very minimal, all aspects that make a tool like Austin a
perfect choice for many Python profiling needs.&lt;/p&gt;
&lt;p&gt;A feature that distinguishes Austin from the rest is its extreme simplicity
which implies great flexibility. By just sampling the frame stack of the Python
interpreter, the user is left with the option of using the collected samples to
derive the metrics that best suit the problem at hand.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="profiling"></category><category term="optimisation"></category></entry><entry><title>What Actually Are Containers?</title><link href="https://p403n1x87.github.io/what-actually-are-containers.html" rel="alternate"></link><published>2018-08-04T18:42:00+01:00</published><updated>2018-08-04T18:42:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2018-08-04:/what-actually-are-containers.html</id><summary type="html">&lt;p&gt;Containers are the big thing of the moment. It is quite common to find blog posts and articles that explain what containers are &lt;em&gt;not&lt;/em&gt;:  "containers are not virtual machines". Just what &lt;em&gt;are&lt;/em&gt; they then? In this post we embark on a journey across some of the features of the Linux kernel to unveil the mystery.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#containers-defined"&gt;Containers Defined&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-note-on-operating-systems"&gt;A Note on Operating Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-jails-with-chroot"&gt;Creating Jails With chroot&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-minimal-chroot-jail"&gt;A Minimal chroot Jail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-more-interesting-example"&gt;A More Interesting Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#leaky-containers"&gt;Leaky Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#control-groups"&gt;Control Groups&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-hierarchy-of-cgroups"&gt;A Hierarchy of cgroups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-work-with-control-groups"&gt;How to Work with Control Groups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#linux-namespaces"&gt;Linux Namespaces&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#some-implementation-details"&gt;Some Implementation Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-work-with-namespaces"&gt;How to Work with Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#putting-it-all-together"&gt;Putting It All Together&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#process-containment-for-chroot-jails"&gt;Process Containment for chroot Jails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wall-fortification"&gt;Wall Fortification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When I first heard about containers, I turned to my favourite search engine to
find out more about them and what they are. Most of the resources I have read
through, though, seemed to put a great emphasis on what containers are &lt;strong&gt;not&lt;/strong&gt;.
Containers are like virtual machines, but are &lt;strong&gt;not&lt;/strong&gt; virtual machines.&lt;/p&gt;
&lt;p&gt;So, what actually &lt;strong&gt;are&lt;/strong&gt; they? After many unhelpful reads, the first good blog
post that I've come across and that explains what containers indeed are is &lt;a href="https://jvns.ca/blog/2016/10/10/what-even-is-a-container/"&gt;What
even is a container&lt;/a&gt;
by Julia Evans. If you go and read through that post (and I do recommended that
you do!), you will immediately learn that a container is like a cauldron where
you mix in the essential ingredients for a magic potion. Only in this case, the
ingredients are Linux kernel features.&lt;/p&gt;
&lt;p&gt;If many posts on containers make it sounds like they are some sort of black
magic (how can you have a &lt;em&gt;lightweight&lt;/em&gt; virtual machine?!), the aim of this post
is to show that the idea behind them is quite simple and made possible by a few
Linux kernel features, like &lt;strong&gt;control groups&lt;/strong&gt;, &lt;strong&gt;chroot&lt;/strong&gt; and &lt;strong&gt;namespaces&lt;/strong&gt;. I
will discuss each of them in turn in this post, but you should also be aware
that there are other kernel features involved in containers to make them robust
and secure. These other aspects, however, will be part of a separate post. Here
we shall just focus on the essential ingredients that can allow you to literally
handcraft and run something that you may call a container, in the sense that is
commonly used these days.&lt;/p&gt;
&lt;h2 id="containers-defined"&gt;Containers Defined&lt;/h2&gt;
&lt;p&gt;Before we progress any further, I believe that we should take a moment to agree
on the meaning that we should attach to the word &lt;em&gt;container&lt;/em&gt;. Much of the
confusion, in my opinion, arises from the many different definitions that are
out there. According to
&lt;a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization"&gt;Wikipedia&lt;/a&gt;,
&lt;em&gt;containers&lt;/em&gt; ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... may look like real computers from the point of view of programs running in
them. A computer program running on an ordinary operating system can see all
resources ... of that computer. However, programs running inside a container
can only see the container's contents and devices assigned to the container.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My way of paraphrasing this definition is the following: a container is a main
process that runs in user-space that gives you the impression that you are
running an operating system with its own view of the file system, processes,
etc... on top of the operating system that is installed on the machine. In this
sense, a container &lt;em&gt;contains&lt;/em&gt; part of the host resources and hosts its own
system and user applications.&lt;/p&gt;
&lt;h2 id="a-note-on-operating-systems"&gt;A Note on Operating Systems&lt;/h2&gt;
&lt;p&gt;Another cause of confusion, sometimes, is the definition of &lt;em&gt;operating system&lt;/em&gt;
itself, so before moving on, I want to make sure we agree on this too. An
operating system can be thought as a &lt;em&gt;nut&lt;/em&gt;. At its core we have, well, the
kernel, which is in direct control of the hardware. On its own, the kernel is a
&lt;em&gt;passive&lt;/em&gt; component of an operating system. When an operating system is booted,
the kernel is the first part that gets loaded into memory and it quietly sits
there. Its purpose is to provide many "buttons and levers" (the &lt;em&gt;ABI&lt;/em&gt;) that just
wait to be pushed and pulled to operate the hardware and provide services to
system and user applications. Around the kernel one usually finds, surprise
surprise, a shell. You might be familiar with Bash, Ksh, Zsh, etc... which allow
you to manipulate the file system (create, copy, move, delete files from disk),
launch applications etc ... . Some of these applications are included with the
operating system and build on top of the kernel services to provide basic
functionalities (e.g. most if not all the standard Unix tools). Such
applications are known as &lt;em&gt;system application&lt;/em&gt;. Other software, like text
editors, games, web browsers and alike are &lt;em&gt;user applications&lt;/em&gt;. In some cases,
it is hard to decide between system and user applications, as the line between
them is not very clear and open to debate. However, once you decide on what
works for you in terms of &lt;em&gt;system applications&lt;/em&gt;, an operating system becomes the
combination of them and the kernel. Thus, Linux is just a &lt;em&gt;kernel&lt;/em&gt; and not an
operating system. On the other hand, Ubuntu &lt;em&gt;is&lt;/em&gt; an example of a (Linux-based)
operating system, since a typical Ubuntu installation includes the compiled code
of the Linux kernel together with system applications.&lt;/p&gt;
&lt;p&gt;How do we tell which operating system we are currently running? Most Linux-based
operating system have some files in the '/etc' folder that contains information
about the distribution name and the installed version. For example, on
Debian-based distributions, this file is typically named &lt;code&gt;os-release&lt;/code&gt;. In my
case, this is what I get if I peek at its content with &lt;code&gt;cat&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat /etc/os-release
NAME=&amp;quot;Ubuntu&amp;quot;
VERSION=&amp;quot;18.04 LTS (Bionic Beaver)&amp;quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&amp;quot;Ubuntu 18.04 LTS&amp;quot;
VERSION_ID=&amp;quot;18.04&amp;quot;
HOME_URL=&amp;quot;https://www.ubuntu.com/&amp;quot;
SUPPORT_URL=&amp;quot;https://help.ubuntu.com/&amp;quot;
BUG_REPORT_URL=&amp;quot;https://bugs.launchpad.net/ubuntu/&amp;quot;
PRIVACY_POLICY_URL=&amp;quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;quot;
VERSION_CODENAME=bionic
UBUNTU_CODENAME=bionic
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="creating-jails-with-chroot"&gt;Creating Jails With &lt;code&gt;chroot&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;One of the earliest examples of "containers" was provided by the use of
&lt;code&gt;chroot&lt;/code&gt;. This is a system call that was introduced in the BSD in 1982 and all
it does is to change the apparent root directory for the process it is called
from, and all its descendant processes.&lt;/p&gt;
&lt;p&gt;How can we use such a feature to create a container? Suppose that you have the
root file system of a Linux-based operating system in a sub-folder in your file
system. For example, the new version of your favourite distribution came out and
you want to try the applications it comes with. You can use the &lt;code&gt;chroot&lt;/code&gt; wrapper
application that ships with most if not all Unix-based operating systems these
days to launch the default shell with the apparent root set to
&lt;code&gt;~/myfavedistro-latest&lt;/code&gt;. Assuming that your favourite distribution comes with
most of the standard Unix tools, you will now be able to launch applications
from its latest version, using the services provided by the Linux kernel of the
host machine. Effectively, you are now running an instance of a different
operating system that is using the kernel loaded at boot time from the host
operating system (some sort of Frankenstein OS if you want).&lt;/p&gt;
&lt;p&gt;Does what we have just described fit into the above definition of &lt;em&gt;container&lt;/em&gt;?
Surely the default shell has its own view of the file system, which is a proper
restriction of the full file system of the host system. As for other resources,
like peripherals etc..., they happen to coincide with the host system, but at
least something is different. If we now look at the content of the &lt;code&gt;os-release&lt;/code&gt;
file in the &lt;code&gt;/etc&lt;/code&gt; folder (or the equivalent for the distribution of your
choice), you will quite likely see something different from before, so indeed we
have a running instance of a different operating system.&lt;/p&gt;
&lt;p&gt;The term that is usually associated to &lt;code&gt;chroot&lt;/code&gt; is &lt;em&gt;jail&lt;/em&gt; rather than
&lt;em&gt;container&lt;/em&gt; though. Indeed, a process that is running within a new apparent root
file system cannot see the content of the parent folders and therefore it is
confined in a corner of the full, actual file system on the physical host. The
modified environment that we see from a shell started with chroot is sometimes
referred to as a &lt;em&gt;chroot jail&lt;/em&gt;. But perhaps another reason why the term &lt;em&gt;jail&lt;/em&gt;
is being used is that, without the due precautions, it is relatively easy to
break out of one (well, OK, maybe that's not an official reason).&lt;/p&gt;
&lt;p&gt;If the above discussion sounds a bit too abstract to you then don't worry
because we are about to get hour hands dirty with &lt;code&gt;chroot&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="a-minimal-chroot-jail"&gt;A Minimal &lt;code&gt;chroot&lt;/code&gt; Jail&lt;/h2&gt;
&lt;p&gt;Since a &lt;code&gt;chroot&lt;/code&gt; jail is pretty much like a &lt;em&gt;Bring Your Own System Application&lt;/em&gt;
party, with the kernel kindly offered by the host, a minimal &lt;code&gt;chroot&lt;/code&gt; jail can
be obtained with just the binary of a shell, and just a few other binary files.
Let's try and create one with just &lt;code&gt;bash&lt;/code&gt; in it then. Under the assumption
that you have it installed on your Linux system, we can determine all the
shared object the &lt;code&gt;bash&lt;/code&gt; shell depends on with &lt;code&gt;ldd&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ldd `which bash`
        linux-vdso.so.1 =&amp;gt;  (0x00007ffca3bca000)
        libtinfo.so.5 =&amp;gt; /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f9605411000)
        libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f960520d000)
        libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9604e2d000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f960563a000)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let's create a folder that will serve as the new root file system, e.g.
&lt;code&gt;~/minimal&lt;/code&gt;, and copy the bash executable in it, together with all its
dependencies. Copy the &lt;code&gt;bash&lt;/code&gt; executable inside &lt;code&gt;~/minimal/bin&lt;/code&gt;, the libraries
from &lt;code&gt;/lib&lt;/code&gt; into &lt;code&gt;~/minimal/lib&lt;/code&gt; and those from &lt;code&gt;/lib64&lt;/code&gt;into &lt;code&gt;~/minimal/lib64&lt;/code&gt;.
Then start the &lt;code&gt;chroot&lt;/code&gt; jail with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chroot ~/minimal
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now have a running bash session with a vanilla prompt format that
looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash-4.4#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;chroot&lt;/code&gt; is being executed as the &lt;code&gt;root&lt;/code&gt; user. This is because, under normal
circumstances, only &lt;code&gt;root&lt;/code&gt; has the POSIX &lt;em&gt;capability&lt;/em&gt; of calling the
&lt;code&gt;SYS_CHROOT&lt;/code&gt; system call.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To see the current capabilities of a user one can use the &lt;code&gt;capsh --print&lt;/code&gt;
  command. The &lt;code&gt;Bounding set&lt;/code&gt; line shows the capabilities that have been
  inherited and that can be granted to a process from the current user.
  Capabilities represent another feature that is relevant for containers. They
  will be discussed in a separate post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you now play around a bit with this bash session, you will realise pretty
quickly that there isn't much that you can do. Most of the standard Unix tools
are not available, not even &lt;code&gt;ls&lt;/code&gt;. This container that we created as a &lt;code&gt;chroot&lt;/code&gt;
jail is indeed minimal.&lt;/p&gt;
&lt;h2 id="a-more-interesting-example"&gt;A More Interesting Example&lt;/h2&gt;
&lt;p&gt;Ubuntu has released base images of the operating system since version 12.04.
These are just root file system images in the format of a compressed tarball.
Suppose that a new stable version has come out and you want to give it a try
before you upgrade your system. One thing you can do is to go to the &lt;a href="http://cdimage.ubuntu.com/ubuntu-latest/releases/"&gt;Ubuntu
Base releases&lt;/a&gt; page and
download the image that you want to test. Extract the content of the tarball
somewhere, e.g. &lt;code&gt;~/ubuntu-latest&lt;/code&gt; and "run" it with &lt;code&gt;chroot&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chroot ~/ubuntu-latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are now running an instance of a new version of Ubuntu. To check that this is
indeed the case, look at the output of &lt;code&gt;cat /etc/os-release&lt;/code&gt;. Furthermore, we
now have access to all the basic tools that make up the Ubuntu operating system.
For instance you could use aptitude to download and install new packages, which
could be useful to test the latest version of an application.&lt;/p&gt;
&lt;p&gt;If you intend to do some serious work with these kinds of &lt;code&gt;chroot&lt;/code&gt; jails, keep
in mind that some of the pseudo-file systems won't be available from within the
jail. That's why you would have to mount them manually with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t proc proc proc/
mount -t sysfs sys sys/
mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev dev/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way you will be able to use, e.g., &lt;code&gt;ps&lt;/code&gt; to look at the currently running
processes.&lt;/p&gt;
&lt;h2 id="leaky-containers"&gt;Leaky Containers&lt;/h2&gt;
&lt;p&gt;With the simplicity of &lt;code&gt;chroot&lt;/code&gt; jails comes many issues that make these kind of
"containers" &lt;em&gt;leaky&lt;/em&gt;. What do I mean by this? Suppose that you want to
&lt;em&gt;containerise&lt;/em&gt; two resource-intensive applications into two different &lt;code&gt;chroot&lt;/code&gt;
jails (for example, the two applications, for some reasons, require different
Linux-based operating systems). A typical example these days is that of
microservices that we would like to run on the same host machine. When the first
microservice fires up, it starts taking all the system resources (like CPU time
for instance), leaving no resources for the second microservice. The same can
happen for network bandwidth utilisation or disk I/O rates.&lt;/p&gt;
&lt;p&gt;Unfortunately, this issue cannot be addressed within &lt;code&gt;chroot&lt;/code&gt; jails, and their
usefulness is somewhat restricted. Whilst we can use it to create some sort of
"ancestral" containers, this is not the solution we would turn to in the long
run.&lt;/p&gt;
&lt;p&gt;Another serious issue with a poorly implemented &lt;code&gt;chroot&lt;/code&gt; jail is the dreaded
S-word: &lt;em&gt;security&lt;/em&gt;. If nothing is done to prevent the user of the jail from
calling certain system calls (e.g. &lt;code&gt;chroot&lt;/code&gt; itself), it is relatively
straightforward to &lt;em&gt;break out&lt;/em&gt; of it. Recall how the &lt;code&gt;chroot&lt;/code&gt; wrapper utility
requires &lt;code&gt;root&lt;/code&gt; privileges to be executed. When we launched a bash session
within the Ubuntu Base root file system, we were logged in as the root user.
Without any further configuration, nothing will prevent us from coding a simple
application that performs the following steps from within the jail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a folder with the &lt;code&gt;mkdir&lt;/code&gt; system call or Unix wrapper tool.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;chroot&lt;/code&gt; system call to change the apparent root to the newly
created folder.&lt;/li&gt;
&lt;li&gt;Attempt to navigate sufficiently many levels up to hit the actual file system
root.&lt;/li&gt;
&lt;li&gt;Launch a shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why does this work? A simple call to the &lt;code&gt;chroot&lt;/code&gt; system call only changes the
apparent root file system, but doesn't actually change the current working
directory. The Unix &lt;code&gt;chroot&lt;/code&gt; wrapper tool performs a combination of &lt;code&gt;chdir&lt;/code&gt;
&lt;em&gt;followed&lt;/em&gt; by &lt;code&gt;chroot&lt;/code&gt; to actually put the calling process inside the jail.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A minimal version of the &lt;code&gt;chroot(2)&lt;/code&gt; utility written in x86-64 assembly code
  can be found in the
  &lt;a href="https://github.com/P403n1x87/asm/blob/master/chroot/minichroot.asm"&gt;&lt;code&gt;minichroot.asm&lt;/code&gt;&lt;/a&gt;
  source file within the GitHub repository linked to this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A call to &lt;code&gt;chroot&lt;/code&gt; which is not preceded by a call to &lt;code&gt;chdir&lt;/code&gt; moves the jail
boundary &lt;em&gt;over&lt;/em&gt; the current location down another level, so that we are
effectively out of the jail. This means that we can &lt;code&gt;chdir&lt;/code&gt; up many times now to
try and hit the actual root of the host file system. Now run a shell session and
bang! We have full control of the host file system under the root user! Scary,
isn't it?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to give this method a try, have a look at the
  &lt;a href="https://github.com/P403n1x87/asm/blob/master/chroot/jailbreak.asm"&gt;&lt;code&gt;jailbreak.asm&lt;/code&gt;&lt;/a&gt;
  source file within the GitHub repository linked to this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A less serious matter, but still something that you might want to address, is
that, after we have mounted the &lt;code&gt;proc&lt;/code&gt; file system within the jail, the view of
the running processes from within the jail is the same as the one from the host
system. Again, if we do nothing to strip down capabilities from the &lt;code&gt;chroot&lt;/code&gt;
jail user, any process on the host machine can easily be killed (in the best
hypothesis) by the jail user. Indeed, &lt;code&gt;chroot&lt;/code&gt; containers really require a lot
of care to prevent unwanted information from leaking. That is why present days
containers make use of a different approach to guarantee "airtight" walls, as we
shall soon see.&lt;/p&gt;
&lt;h1 id="control-groups"&gt;Control Groups&lt;/h1&gt;
&lt;p&gt;As we have argued above, when we make use of containers we might want to run
multiple instances of them on the same machine. The problem that we face is
physical resource sharing among the containers. How can we make sure that a
running instance of a containerised process doesn't eat up all the available
resources from the host machine?&lt;/p&gt;
&lt;p&gt;The answer is provided by a feature of the Linux kernel known as &lt;strong&gt;control
groups&lt;/strong&gt;. Usually abbreviated as &lt;code&gt;cgroups&lt;/code&gt;, control groups  were initially
released in 2007, based on earlier work of Google engineers, and originally
named &lt;em&gt;process containers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Roughly speaking, &lt;em&gt;cgroups&lt;/em&gt; allow you to limit, account for and isolate system
resources usage among running processes. As a simple example, consider the
scenario where one of your applications has a bug and starts leaking memory in
an infinite loop. Slowly but inevitably, your process ends up using all the
physical memory available on the machine it is running on, causing some of the
other processes to be killed at random by the OOM (Out of Memory) killer or, in
the worst case, crashing the entire system. If only you could assign a slice of
memory to the process that you want to test, then OOM killer would get rid of
only your faulty process, thus preventing your entire system from collapsing and
allowing the other applications to run smoothly without consequences. Well, this
is exactly one of the problems that &lt;em&gt;cgroups&lt;/em&gt; allow you to solve.&lt;/p&gt;
&lt;p&gt;But physical memory is only one of the aspects (or &lt;em&gt;subsystem&lt;/em&gt;, in the language
of &lt;em&gt;cgroups&lt;/em&gt;; another term that is used interchangeably is &lt;em&gt;controller&lt;/em&gt;) that
can be limited with the use of control groups. CPU cycles, network bandwidth,
disk I/O rate are other examples of resources that can be accounted for with
control groups. This way you can have two or more CPU-bound applications running
happily on the same machine, just by splitting the physical computing power
among them.&lt;/p&gt;
&lt;h2 id="a-hierarchy-of-cgroups"&gt;A Hierarchy of cgroups&lt;/h2&gt;
&lt;p&gt;Linux processes are organised in a hierarchical structure. At boot, the &lt;code&gt;init&lt;/code&gt;
process, with PID 1, is spawned, and every other process originates from it as a
child process. This hierarchical structure is visible from the virtual file
system mounted at &lt;code&gt;/proc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cgroups have a similar hierarchical structure but, contrary to processes (also
known as &lt;em&gt;tasks&lt;/em&gt; in &lt;em&gt;cgroup&lt;/em&gt;-speak), there may be &lt;em&gt;many&lt;/em&gt; of such hierarchies of
cgroups. This is the case for cgroups v1, but starting with version 2,
introduced in 2015, cgroups follow a unified hierarchic structure. It is
possible to use the two at the same time, thus having a hybrid cgroups resource
management, even though this is discouraged.&lt;/p&gt;
&lt;p&gt;Every cgroups inherits features from the parent cgroups and in general they can
get more restrictive the further you move down the hierarchy, without the
possibility of having overrides. Processes are then spawned or moved/assigned to
cgroups so that each process is in exactly one cgroup at any given time.&lt;/p&gt;
&lt;p&gt;This is, in a nutshell, what cgroups and cgroups2 are. A full treatment of
cgroups would require a post on its own and it would take us off-topic. If you
are curious to find out more about their history and their technical details,
you can have a look at the official documentation
&lt;a href="https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt"&gt;here&lt;/a&gt; and
&lt;a href="https://www.kernel.org/doc/Documentation/cgroup-v2.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-work-with-control-groups"&gt;How to Work with Control Groups&lt;/h2&gt;
&lt;p&gt;Let's have a look at how to use cgroups to limit the total amount of physical
(or resident) memory that a process is allowed to use. The example is based on
cgroups v1 since they are still in use today even though cgroups v2 are
replacing them and there currently is an on-going effort of migrating from v1 to
v2.&lt;/p&gt;
&lt;p&gt;Since the introduction of cgroups in the Linux kernel, &lt;em&gt;every&lt;/em&gt; process belongs
to one and only one cgroup at any given time. By default, there is only one
cgroup, the &lt;em&gt;root&lt;/em&gt; cgroup, and every other process, together with its children,
is in it.&lt;/p&gt;
&lt;p&gt;Control groups are manipulated with the use of file system operations on the
cgroup mount-point (usually &lt;code&gt;/sys/fs/cgroup&lt;/code&gt;). For example, a new cgroup can be
created with the &lt;code&gt;mkdir&lt;/code&gt; command. Values can be set by writing on the files that
the kernel will create in the subfolder, and the simplest way is to just use
&lt;code&gt;echo&lt;/code&gt;. When a cgroup is no longer needed, it can be removed with &lt;code&gt;rmdir&lt;/code&gt; (&lt;code&gt;rm
-r&lt;/code&gt; should not be used as an alternative!). This will effectively deactive the
cgroup only when the last process in it has terminated, or if it only contains
zombie processes.&lt;/p&gt;
&lt;p&gt;As an example, let's see how to create a cgroup that restricts the amount of
total physical memory processes can use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /sys/fs/cgroup/memory/mem_cg
&lt;span class="nb"&gt;echo&lt;/span&gt; 100m &amp;gt; /sys/fs/cgroup/memory/mem_cg/memory.limit_in_bytes
&lt;span class="nb"&gt;echo&lt;/span&gt; 100m &amp;gt; /sys/fs/cgroup/memory/mem_cg/memory.memsw.limit_in_bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;memory.memsw.*&lt;/code&gt; is not present in &lt;code&gt;/sys/fs/cgroup/memory&lt;/code&gt;, you might need
  to enable it on the kernel by adding the parameters &lt;code&gt;cgroup_enable=memory
  swapaccount=1&lt;/code&gt; to, e.g., GRUB's &lt;em&gt;kernel line&lt;/em&gt;. To do so, open
  &lt;code&gt;/etc/default/grub&lt;/code&gt; and append these parameters to
  &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any process running in the &lt;code&gt;mem_cg&lt;/code&gt; cgroup will be constrained to a total amount
(that is, physical plus swap) of memory equal to 100 MB. When a process gets
above the limit, the OOM killer will get rid of it. To add a process to the
&lt;code&gt;mem_cg&lt;/code&gt; cgroup we have to write its PID to the &lt;code&gt;tasks&lt;/code&gt; file, e.g. with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt; &amp;gt; /sys/fs/cgroup/memory/mem_cg/tasks
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will put the currently running shell into the &lt;code&gt;mem_cg&lt;/code&gt; cgroup. When we want
to remove the cgroup, we can just delete its folder with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rmdir /sys/fs/cgroup/memory/mem_cg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that, even if fully removed from the virtual file system, any removed
cgroups remain active until all the associated processes have terminated or have
become zombies.&lt;/p&gt;
&lt;p&gt;Alternatively, one can work with cgroups by using the tools provided by
&lt;code&gt;libcgroup&lt;/code&gt; (Red Hat), or &lt;code&gt;cgroup-tools&lt;/code&gt; (Debian). Once installed with the
corresponding package managers, the above commands can be replaced with the
following, perhaps more intuitive ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cgcreate -g memory:mem_cg
cgset -r memory.limit_in_bytes&lt;span class="o"&gt;=&lt;/span&gt;100m
cgset -r memory.memsw.limit_in_bytes&lt;span class="o"&gt;=&lt;/span&gt;100m
cgclassify -g memory:mem_cg &lt;span class="nv"&gt;$$&lt;/span&gt;
cgdelete memory:mem_cg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One can use &lt;code&gt;cgexec&lt;/code&gt; as an alternative to start a new process directly within a
cgroup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cgroup -g memory:mem_cg /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test that the memory cgroup we have created works with the following
simple C program&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;stdlib.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;stdio.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;string.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Allocation #%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have created an infinite loop in which we allocate chunks of 1 MB of memory
at each iteration. The call to &lt;code&gt;memset&lt;/code&gt; is a trick to force the Linux kernel to
actually allocate the requested memory under the copy-on-write strategy.&lt;/p&gt;
&lt;p&gt;Once compiled, we can run it into the &lt;code&gt;mem_cg&lt;/code&gt; cgroup with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cgexec -g mem_cg ./a.out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We expect to see about 100 successful allocations and after that the OOM killer
intervenes to stop our processes, since it would have reached the allocated
memory quota by then.&lt;/p&gt;
&lt;p&gt;Imagine now launching a &lt;code&gt;chroot&lt;/code&gt; jail inside a memory cgroup like the one we
created above. Every application that we launch from within it is automatically
created inside the same cgroup. This way we can run, e.g., a microservice and we
can be assured that it won't eat up all the available memory from the host
machine. With a similar approach, we could also make sure that it won't reserve
all the CPU and its cores to itself, thus allowing other processes (perhaps in
different jails/containers) to run simultaneously and smoothly on the same
physical machine.&lt;/p&gt;
&lt;h1 id="linux-namespaces"&gt;Linux Namespaces&lt;/h1&gt;
&lt;p&gt;The description of Linux namespaces given by the dedicated manpage sums up the
concept pretty well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A namespace wraps a global system resource in an abstraction that
  makes it appear to the processes within the namespace that they have
  their own isolated instance of the global resource.  Changes to the
  global resource are visible to other processes that are members of
  the namespace, but are invisible to other processes.  One use of
  namespaces is to implement containers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So no questions asked about why Linux namespaces were introduced in the first
place. As the description says, they are used to allow processes to have their
own copy of a certain physical resource. For example, the most recent versions
of the Linux kernel allow us to define a namespace of the &lt;strong&gt;network&lt;/strong&gt; kind, and
every application that we run under it will have its own copy of the full
network stack. We have pretty much a rather lightweight way of virtualising an
entire network!&lt;/p&gt;
&lt;p&gt;Linux namespaces represent a relatively new feature that made its first
appearance in 2002 with the &lt;strong&gt;mount&lt;/strong&gt; kind. Since there were no plans to have
different kinds of namespaces, at that time the term &lt;em&gt;namespace&lt;/em&gt; was synonym of
&lt;em&gt;mount&lt;/em&gt; namespace. Beginning in 2006, more kinds were added and, presently,
there are plans for new kinds to be developed and included in future releases of
the Linux kernel.&lt;/p&gt;
&lt;p&gt;If you really want to identify a single feature that makes modern Linux
container possible, namespaces is arguably the candidate. Let's try to see why.&lt;/p&gt;
&lt;h2 id="some-implementation-details"&gt;Some Implementation Details&lt;/h2&gt;
&lt;p&gt;In order to introduce namespaces in Linux, a new system call, &lt;code&gt;unshare&lt;/code&gt;, has
been added to the kernel. Its use is "to allow a process to control its shared
execution context without creating a new process." (quoted verbatim from the
manpage of &lt;code&gt;unshare(2)&lt;/code&gt;). What does this mean? Suppose that, at a certain point,
you want the current process to be moved to a new network namespace so that it
has its own "private" network stack. All you have to do is make a call to the
&lt;code&gt;unshare&lt;/code&gt; system call with the appropriate flag set.&lt;/p&gt;
&lt;p&gt;What if we do want to spawn a new process in a new namespace instead? With the
introduction of namespaces, the existing &lt;code&gt;clone&lt;/code&gt; system call has been extended
with new flags. When &lt;code&gt;clone&lt;/code&gt; is called with some of these flags set, new
namespaces of the corresponding kinds are created and the new process is
automatically made a member of them.&lt;/p&gt;
&lt;p&gt;The namespace information of the currently running processes is stored in the
&lt;code&gt;proc&lt;/code&gt; file system, under the new &lt;code&gt;ns&lt;/code&gt; subfolder of every PID folder (i.e.
&lt;code&gt;/proc/[pid]/ns/&lt;/code&gt;). This as well as other details of how namespaces are
implemented can be found in the
&lt;a href="http://man7.org/linux/man-pages/man7/namespaces.7.html"&gt;&lt;code&gt;namespaces(7)&lt;/code&gt;&lt;/a&gt;
manpage.&lt;/p&gt;
&lt;h2 id="how-to-work-with-namespaces"&gt;How to Work with Namespaces&lt;/h2&gt;
&lt;p&gt;As with cgroups, an in-depth description of namespaces would require a post on
its own. So we will have a look at just one simple example. Since networks are
ubiquitous these days, let's try to launch a process that has its own
virtualised network stack and that is capable of communicating with the host
system via a network link.&lt;/p&gt;
&lt;p&gt;This is the plan:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a linked pair of virtual ethernet devices, e.g. &lt;code&gt;veth0&lt;/code&gt; and &lt;code&gt;veth1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Move &lt;code&gt;veth1&lt;/code&gt; to a new network namespace&lt;/li&gt;
&lt;li&gt;Assign IP addresses to the virtual NICs and bring them up.&lt;/li&gt;
&lt;li&gt;Test that the can transfer data between them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a simple bash script that does exactly this. Note that the creation of a
network namespace requires a capability that normal Unix user don't usually
have, so this is why you will need to run them as, e.g., root.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a new network namespace&lt;/span&gt;
ip netns add &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c1"&gt;# Create a pair of virtual ethernet interfaces&lt;/span&gt;
ip link add veth0 &lt;span class="nb"&gt;type&lt;/span&gt; veth peer name veth1

&lt;span class="c1"&gt;# Configure the host virtual interface&lt;/span&gt;
ip addr add &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1/24 dev veth0
ip link &lt;span class="nb"&gt;set&lt;/span&gt; veth0 up

&lt;span class="c1"&gt;# Move the guest virtual interface to the test namespace&lt;/span&gt;
ip link &lt;span class="nb"&gt;set&lt;/span&gt; veth1 netns &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c1"&gt;# Configure the guest virtual interface in the test namespace&lt;/span&gt;
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; bash
ip addr add &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev veth1
ip link &lt;span class="nb"&gt;set&lt;/span&gt; veth1 up

&lt;span class="c1"&gt;# Start listening for TCP packets on port 2000&lt;/span&gt;
nc -l &lt;span class="m"&gt;2000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On line 2 we use the extended, namespace-capable version of &lt;code&gt;ip&lt;/code&gt; to create a new
namespace of the network kind, called &lt;code&gt;test&lt;/code&gt;. We then create the pair of virtual
ethernet devices with the command on line 5. On line 12 we move the &lt;code&gt;veth1&lt;/code&gt;
device to the &lt;code&gt;test&lt;/code&gt; namespace and, in order to configure it, we launch a bash
session inside &lt;code&gt;test&lt;/code&gt; with the command on line 15. Once in the new namespace we
can see the &lt;code&gt;veth1&lt;/code&gt; device again, which has now disappeared from the default
(also known as &lt;em&gt;global&lt;/em&gt;) namespace. You can check that by opening a new terminal
and typing &lt;code&gt;ip link list&lt;/code&gt;. The &lt;code&gt;veth1&lt;/code&gt; device should have disappeared after the
execution of the command on line 12.&lt;/p&gt;
&lt;p&gt;We can then use &lt;code&gt;netcat&lt;/code&gt; to listen to TCP packets being sent on port 2000 from
within the new namespace (line 20). On a new bash session in the default
namespaces, we can start &lt;code&gt;netcat&lt;/code&gt; with&lt;/p&gt;
&lt;p _="%" endterminal&gt;{% terminal $ %}
nc 10.0.0.2 2000&lt;/p&gt;
&lt;p&gt;to start sending packets to the new namespace &lt;code&gt;test&lt;/code&gt; via the link between
&lt;code&gt;veth0&lt;/code&gt; and &lt;code&gt;veth1&lt;/code&gt;. Everything that you type should now be echoed by the bash
session in the &lt;code&gt;test&lt;/code&gt; namespace after you press Enter.&lt;/p&gt;
&lt;h1 id="putting-it-all-together"&gt;Putting It All Together&lt;/h1&gt;
&lt;p&gt;Now let's see how to put all the stuff we have discussed thus far together to
handcraft some more (better) containers.&lt;/p&gt;
&lt;h2 id="process-containment-for-chroot-jails"&gt;Process Containment for &lt;code&gt;chroot&lt;/code&gt; Jails&lt;/h2&gt;
&lt;p&gt;With our first attempt at manually crafting a container with &lt;code&gt;chroot&lt;/code&gt;, we
discovered a few weaknesses of different nature that made the result quite
leaky. Let's try to address some of those issues, for instance the fact that all
the processes running on the host system are visible from within the container.
To this end, we shall make use of the Ubuntu Base image that we used in the
&lt;code&gt;chroot&lt;/code&gt; section. We then combine &lt;code&gt;chroot&lt;/code&gt; with namespaces in the following way.
Assuming that you have created the &lt;code&gt;test&lt;/code&gt; network namespace as described in the
previous section, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unshare --fork -p -u ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; chroot ubuntu-latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;--fork&lt;/code&gt; switch is required by the &lt;code&gt;-p&lt;/code&gt; switch because we want to spawn a
new bash session with PID 1, rather than within the calling process. The &lt;code&gt;-u&lt;/code&gt;
switch will give us a new hostname that we are then free to change without that
affecting the host system. We then use the &lt;code&gt;ip&lt;/code&gt; new capability of creating
namespaces of the network kind to create the Ubuntu Base &lt;code&gt;chroot&lt;/code&gt; jail.&lt;/p&gt;
&lt;p&gt;The first improvement is now evident. From inside the &lt;code&gt;chroot&lt;/code&gt; jail, mount the
&lt;code&gt;proc&lt;/code&gt; file system with, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -t proc proc /proc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then look at the output of &lt;code&gt;ps aux&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 11:54 ?        00:00:00 /bin/bash -i
root         8     1  0 11:56 ?        00:00:00 ps -ef
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The bash session that we started inside the &lt;code&gt;chroot&lt;/code&gt; jail has PID 1 and the &lt;code&gt;ps&lt;/code&gt;
tool from the Ubuntu Base distribution has PID 8 and parent PID 1, i.e. the
&lt;code&gt;chroot&lt;/code&gt; jail. That's all the processes that we can see from here! If we try to
identify this bash shell from the global namespace we find something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps -ef | grep unshare | grep -v grep
root      5829  4957  0 12:54 pts/1    00:00:00 sudo unshare --fork -p -u ip netns exec test chroot ubuntu-latest
root      5830  5829  0 12:54 pts/1    00:00:00 unshare --fork -p -u ip netns exec test chroot ubuntu-latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PIDs in your case will quite likely be different, but the point here is that,
with namespaces, we have broken the assumption that a process has a &lt;em&gt;unique&lt;/em&gt;
process ID.&lt;/p&gt;
&lt;h2 id="wall-fortification"&gt;Wall Fortification&lt;/h2&gt;
&lt;p&gt;Whilst the process view problem has been solved (we can no longer kill the host
processes since we cannot see them), the fact that the &lt;code&gt;chroot&lt;/code&gt; jail runs as
root still leaves us with the &lt;em&gt;jailbreak&lt;/em&gt; issue. To fix this we just use
namespaces again the way they where meant to be used originally. Recall that,
when they were introduced, namespaces were of just one kind: mount. In fact,
back then, namespaces was a synonym of &lt;em&gt;mount&lt;/em&gt; namespace.&lt;/p&gt;
&lt;p&gt;The other ingredient that is needed to actually secure against jail breaking is
the &lt;code&gt;pivot_root&lt;/code&gt; system call. At first sight it might look like &lt;code&gt;chroot&lt;/code&gt;, but it
is quite different. It allows you to put the old root to a new location and use
a new mount point as the new root for the calling process.&lt;/p&gt;
&lt;p&gt;The key here is the combination of &lt;code&gt;pivot_root&lt;/code&gt; and the namespace of the kind
mount that allows us to specify a new root and manipulate the mount points that
are visible inside the container that we want to create, without messing about
with the host mount points. So here is the general idea and the steps required:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start a shell session from a shell executable inside the root file system in
a mount namespace.&lt;/li&gt;
&lt;li&gt;Unmount all the current mount points, including that of type &lt;code&gt;proc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Turn the Ubuntu Base root file system into a (bind) mount point&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pivot_root&lt;/code&gt; and `chroot to swap the new root with the old one&lt;/li&gt;
&lt;li&gt;Unmount the new location of the old root to conceal the full host file
system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above steps can be performed with the following initialisation script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umount -a
umount /proc
mount --bind ubuntu-latest/ ubuntu-latest/
&lt;span class="nb"&gt;cd&lt;/span&gt; ubuntu-latest/
&lt;span class="nb"&gt;test&lt;/span&gt; -d old-root &lt;span class="o"&gt;||&lt;/span&gt; mkdir old-root
pivot_root . old-root/
&lt;span class="nb"&gt;exec&lt;/span&gt; chroot . /bin/bash --init-file &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;mount -t proc proc /proc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; umount -l /old-root&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy and paste these lines in a file, e.g. &lt;code&gt;cnt-init.sh&lt;/code&gt; and then run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo unshare --fork -p -u -m ubuntu-latest/bin/bash --init-file cnt-init.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now check that the &lt;code&gt;/old-root&lt;/code&gt; folder is empty, meaning that we now have
no ways of accessing the full host file system, but only the corner that
corresponds to the content of the new root, i.e. the content of the
&lt;code&gt;ubuntu-latest&lt;/code&gt; folder. Furthermore, you can go on and check that our recipe for
breaking out of a vanilla &lt;code&gt;chroot&lt;/code&gt; jail does not work in this case, because the
jail itself is now an effective, rather than apparent, root!&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;We have come to the end of this journey across the features of the Linux kernel
that make containers possible. I hope this has given you a better understanding
of what many people mean when they say that containers are like virtual
machines, but are &lt;em&gt;not&lt;/em&gt; virtual machine.&lt;/p&gt;
&lt;p&gt;Whilst spinning containers by hand could be fun, and quite likely an interesting
educational experience for many, to actually produce something that is robust
and secure enough requires some effort. Even in our last examples there are many
things that need to be improved, starting from the fact that we would want to
avoid giving control of our containers to users as root. Despite all our effort
to improve containment of resources, an user logged in as root can still do some
nasty things (open lower-numbered ports and all such kind of businesses...). The
point here is that, if you need containers for production environments, you
should turn to well tested and established technologies, like LXC, Docker etc...
.&lt;/p&gt;</content><category term="Technology"></category><category term="containers"></category><category term="linux"></category></entry><entry><title>Extending Python with Assembly</title><link href="https://p403n1x87.github.io/extending-python-with-assembly.html" rel="alternate"></link><published>2018-03-24T00:32:00+01:00</published><updated>2018-03-24T00:32:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2018-03-24:/extending-python-with-assembly.html</id><summary type="html">&lt;p&gt;What's a better way to fill an empty evening if not by reading about how to extend Python with Assembly? I bet you don't even know where to start to answer this question :P. But if you're curious to know how you can use another language to extend Python, and if you happen to like Assembly programming, you might end up actually enjoying this post (I hope!).&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-code"&gt;The Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#shared-object"&gt;Shared Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-cpython-headers"&gt;The CPython Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exporting-global-symbols"&gt;Exporting Global Symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#immutable-strings"&gt;Immutable Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cpython-data-structures"&gt;CPython Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-and-global-functions"&gt;Local and Global Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#assembling-and-linking"&gt;Assembling and Linking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-test-the-module"&gt;How to Test the Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distributing-the-module"&gt;Distributing the Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;If you have landed on this page, you must have had one between two only possible
reactions to the title of this post, either "Hmm, this sounds interesting" or
"Just, why?". The straight answer is, well, "just, because". And perhaps a bit
more articulated answer is: because the people in the first category probably
enjoy this kind of things :).&lt;/p&gt;
&lt;p&gt;Reactions aside, the subject of this post is the coding of an extension for
Python written in pure Assembly for the Intel x86-64 architecture on a
Linux-based operating system. If you are familiar with general assembly but have
never coded for the architecture that we are targeting, it is perhaps worth
reading through my previous post "&lt;a href="https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html"&gt;Getting Started with x86-64 Assembly on
Linux&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;I will also assume that you are somewhat familiar with extending Python with C.
If not, then it probably is a good idea to go through the &lt;a href="https://docs.python.org/3/extending/extending.html"&gt;official
documentation&lt;/a&gt; before
reading on, or some things might not make too much sense. The approach of this
post is by example and builds on knowledge about C to transition to Assembly. My
favourite assembler on Linux is NASM, since it supports the Intel syntax, the
one that I am more comfortable with. Therefore the only dependencies for
following along are the NASM assembler and the GNU linker &lt;code&gt;ld&lt;/code&gt;. Optionally, we
can make use of a &lt;code&gt;Makefile&lt;/code&gt; to assemble and link our code, and perhaps &lt;code&gt;docker&lt;/code&gt;
to test it in a clean environment. You will find all the relevant files in the
linked &lt;a href="https://github.com/P403n1x87/asm/tree/master/python"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now it's time to jump straight into the code.&lt;/p&gt;
&lt;h1 id="the-code"&gt;The Code&lt;/h1&gt;
&lt;p&gt;There isn't much more to say before we can see the code really, so here it is.
This is the content of my &lt;code&gt;asm.asm&lt;/code&gt; source file.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;
&lt;span class="normal"&gt;66&lt;/span&gt;
&lt;span class="normal"&gt;67&lt;/span&gt;
&lt;span class="normal"&gt;68&lt;/span&gt;
&lt;span class="normal"&gt;69&lt;/span&gt;
&lt;span class="normal"&gt;70&lt;/span&gt;
&lt;span class="normal"&gt;71&lt;/span&gt;
&lt;span class="normal"&gt;72&lt;/span&gt;
&lt;span class="normal"&gt;73&lt;/span&gt;
&lt;span class="normal"&gt;74&lt;/span&gt;
&lt;span class="normal"&gt;75&lt;/span&gt;
&lt;span class="normal"&gt;76&lt;/span&gt;
&lt;span class="normal"&gt;77&lt;/span&gt;
&lt;span class="normal"&gt;78&lt;/span&gt;
&lt;span class="normal"&gt;79&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;DEFAULT&lt;/span&gt;                 &lt;span class="nv"&gt;rel&lt;/span&gt;

&lt;span class="cp"&gt;%include                &amp;quot;asm/python.inc&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;GLOBAL                  &lt;/span&gt;&lt;span class="nv"&gt;PyInit_asm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt;


&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;SECTION                 &lt;/span&gt;&lt;span class="nv"&gt;.rodata&lt;/span&gt;
&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nf"&gt;l_sayit_name&lt;/span&gt;            &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sayit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;l_sayit_doc&lt;/span&gt;             &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This method has something important to say.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;l_sayit_msg&lt;/span&gt;             &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Assembly is great fun! :)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="no"&gt;l_sayit_msg_len&lt;/span&gt;&lt;span class="kd"&gt;         equ&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_msg&lt;/span&gt;

&lt;span class="nf"&gt;l_module_name&lt;/span&gt;           &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;SECTION                 &lt;/span&gt;&lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;l_asm_methods:&lt;/span&gt;              &lt;span class="c1"&gt;;; struct PyMethodDef[] *&lt;/span&gt;
&lt;span class="nf"&gt;ISTRUC&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_name&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_name&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_meth&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;asm_sayit&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_flags&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;METH_NOARGS&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_doc&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_doc&lt;/span&gt;
&lt;span class="nf"&gt;IEND&lt;/span&gt;
&lt;span class="nf"&gt;NullMethodDef&lt;/span&gt;

&lt;span class="nl"&gt;l_asm_module:&lt;/span&gt;                &lt;span class="c1"&gt;;; struct PyModuleDef *&lt;/span&gt;
&lt;span class="nf"&gt;ISTRUC&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_base&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef_HEAD_INIT&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_name&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_module_name&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_doc&lt;/span&gt;      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_size&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_methods&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_asm_methods&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_slots&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_traverse&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_clear&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_free&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
&lt;span class="nf"&gt;IEND&lt;/span&gt;


&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;SECTION                 &lt;/span&gt;&lt;span class="nv"&gt;.text&lt;/span&gt;
&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;asm_sayit:&lt;/span&gt; &lt;span class="c1"&gt;;; ----------------------------------------------------------------&lt;/span&gt;
                        &lt;span class="nf"&gt;push&lt;/span&gt;  &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;

                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;; SYS_WRITE&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;; STDOUT&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_msg&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_msg_len&lt;/span&gt;
                        &lt;span class="nf"&gt;syscall&lt;/span&gt;

                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Py_None&lt;/span&gt;
                        &lt;span class="nf"&gt;inc&lt;/span&gt;   &lt;span class="kt"&gt;QWORD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;PyObject.ob_refcnt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

                        &lt;span class="nf"&gt;pop&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="c1"&gt;;; end asm_sayit&lt;/span&gt;


&lt;span class="nl"&gt;PyInit_asm:&lt;/span&gt; &lt;span class="c1"&gt;;; --------------------------------------------------------------&lt;/span&gt;
                        &lt;span class="nf"&gt;push&lt;/span&gt;  &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;

                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;PYTHON_API_VERSION&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;l_asm_module&lt;/span&gt;
                        &lt;span class="nf"&gt;call&lt;/span&gt;  &lt;span class="nv"&gt;PyModule_Create2&lt;/span&gt; &lt;span class="ow"&gt;WRT&lt;/span&gt; &lt;span class="nv"&gt;..plt&lt;/span&gt;

                        &lt;span class="nf"&gt;pop&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="c1"&gt;;; end PyInit_asm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you have never written a C extension for Python before, this might look a bit
mysterious to you, although the general structure, at least, should be quite
clear after you've glimpsed through the official Python documentation on
extending Python with C.&lt;/p&gt;
&lt;p&gt;We shall now analyse every single part of the above code sample in details to
see what each block of code does.&lt;/p&gt;
&lt;h2 id="shared-object"&gt;Shared Object&lt;/h2&gt;
&lt;p&gt;On the very first line of the source we see the line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;DEFAULT&lt;/span&gt;                 &lt;span class="nv"&gt;rel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our goal is to assemble and link our code into an ELF64 &lt;em&gt;shared object&lt;/em&gt; file.
Contrary to ordinary program code, shared object files are dynamically loaded
into random memory addresses. It is therefore important that all our code is
&lt;em&gt;position-independent&lt;/em&gt;. One way of doing this is to make sure that any memory
reference is not absolute, but relative to the value of the &lt;code&gt;RIP&lt;/code&gt; register,
which points to the current instruction being executed. This guarantees that, no
matter where the shared object is loaded into memory, references to local
variables are correct. In 64-bit mode, NASM defaults to absolute addresses,
therefore the above line is necessary to switch to &lt;code&gt;RIP&lt;/code&gt;-relative addresses.&lt;/p&gt;
&lt;h2 id="the-cpython-headers"&gt;The CPython Headers&lt;/h2&gt;
&lt;p&gt;On line 3 we include a file to our main Assembly source. Given the simplicity of
this example, we could have included the content of the &lt;code&gt;python.inc&lt;/code&gt; file within
&lt;code&gt;asm.asm&lt;/code&gt; itself. However, for larger projects it is perhaps good practice to
separate declarations and actual code, like it is usually done in C, with &lt;code&gt;.h&lt;/code&gt;
and &lt;code&gt;.c&lt;/code&gt; files. In fact, the &lt;code&gt;python.inc&lt;/code&gt; file includes the equivalent of
structures and macros as declared in the CPython header files. As far as I'm
aware, there are no assembly-specific include files provided by the maintainers
of CPython, so we have to go through the extra effort of typing them ourselves.
We will get back to the content of this file later on.&lt;/p&gt;
&lt;h2 id="exporting-global-symbols"&gt;Exporting Global Symbols&lt;/h2&gt;
&lt;p&gt;Line 5 is an important one. It exports the symbol &lt;code&gt;PyInit_asm&lt;/code&gt;, of type
&lt;code&gt;function&lt;/code&gt;, and makes it available for external programs. This is the function
that CPython calls the moment we load the &lt;code&gt;asm&lt;/code&gt; module with &lt;code&gt;import asm&lt;/code&gt; from
the Python interpreter. If we do not export this symbol, then CPython won't be
able to find the code necessary to initialise the module. In analogy with C,
this is equivalent to declaring a non-static function.&lt;/p&gt;
&lt;h2 id="immutable-strings"&gt;Immutable Strings&lt;/h2&gt;
&lt;p&gt;Next we have the read-only data section&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;SECTION                 &lt;/span&gt;&lt;span class="nv"&gt;.rodata&lt;/span&gt;
&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nf"&gt;l_sayit_name&lt;/span&gt;            &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sayit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;l_sayit_doc&lt;/span&gt;             &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This method has something important to say.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nf"&gt;l_sayit_msg&lt;/span&gt;             &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Assembly is great fun! :)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="no"&gt;l_sayit_msg_len&lt;/span&gt;&lt;span class="kd"&gt;         equ&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_msg&lt;/span&gt;

&lt;span class="nf"&gt;l_module_name&lt;/span&gt;           &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we initialise the strings that we will need later on. As they won't change
during the course of the code execution, we put them in a read-only section of
the shared object. The GNU C compiler does just the same thing with every
literal string that you use in C code. You will notice references to their
address in the following section, that of (read-write) initialised data.&lt;/p&gt;
&lt;h2 id="cpython-data-structures"&gt;CPython Data Structures&lt;/h2&gt;
&lt;p&gt;Next is the section of initialised data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;SECTION                 &lt;/span&gt;&lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;l_asm_methods:&lt;/span&gt;              &lt;span class="c1"&gt;;; struct PyMethodDef[] *&lt;/span&gt;
&lt;span class="nf"&gt;ISTRUC&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_name&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_name&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_meth&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;asm_sayit&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_flags&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;METH_NOARGS&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyMethodDef.ml_doc&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_doc&lt;/span&gt;
&lt;span class="nf"&gt;IEND&lt;/span&gt;
&lt;span class="nf"&gt;NullMethodDef&lt;/span&gt;

&lt;span class="nl"&gt;l_asm_module:&lt;/span&gt;               &lt;span class="c1"&gt;;; struct PyModuleDef *&lt;/span&gt;
&lt;span class="nf"&gt;ISTRUC&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_base&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef_HEAD_INIT&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_name&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_module_name&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_doc&lt;/span&gt;      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_size&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_methods&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;l_asm_methods&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_slots&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_traverse&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_clear&lt;/span&gt;    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef.m_free&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dq&lt;/span&gt; &lt;span class="nv"&gt;NULL&lt;/span&gt;
&lt;span class="nf"&gt;IEND&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is where things start to get interesting, and the content of the
&lt;code&gt;python.inc&lt;/code&gt; file comes into play. The first two labels point to the beginning
of CPython-specific structures. The first is an array of &lt;code&gt;PyMethodDef&lt;/code&gt;
structures. As the name suggests, each instance of this structure is used to
hold information about a method that should be made available to the Python
interpreter from within our module. To find out in which header file it is
defined, we can use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -nr /usr/include/python3.6 -e &lt;span class="s2"&gt;&amp;quot;struct PyMethodDef&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my case, I get that the structure is defined in
&lt;code&gt;/usr/include/python3.6/methodobject.h&lt;/code&gt;, starting from line 54. Inside the
&lt;code&gt;python.inc&lt;/code&gt; we then have the equivalent structure declaration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;STRUC &lt;/span&gt;&lt;span class="nv"&gt;PyMethodDef&lt;/span&gt;
  &lt;span class="nf"&gt;.ml_name&lt;/span&gt;              &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; const char *&lt;/span&gt;
  &lt;span class="nf"&gt;.ml_meth&lt;/span&gt;              &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; PyCFunction&lt;/span&gt;
  &lt;span class="nf"&gt;.ml_flags&lt;/span&gt;             &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; int&lt;/span&gt;
  &lt;span class="nf"&gt;.ml_doc&lt;/span&gt;               &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; const char *&lt;/span&gt;
&lt;span class="k"&gt;ENDSTRUC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;NullMethodDef&lt;/code&gt; is a NASM macro that conveniently defines the &lt;em&gt;sentinel&lt;/em&gt;
&lt;code&gt;PyMethodDef&lt;/code&gt; structure, which is used to mark the end of the &lt;code&gt;PyMethodDef&lt;/code&gt;
array pointed by &lt;code&gt;l_asm_methods&lt;/code&gt;. Its definition is also in the &lt;code&gt;python.inc&lt;/code&gt;
file and, as you can see, simply initialises a new instance of the structure
with all the fields set to &lt;code&gt;NULL&lt;/code&gt; or 0, depending on their semantics, i.e.
whether they are memory pointers or general integers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;%define NullMethodDef         dq NULL, NULL, 0, NULL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;NULL&lt;/code&gt; is not a native NASM value. To align the coding conventions
with C, I have defined NULL as a constant in &lt;code&gt;python.inc&lt;/code&gt; and assigned the
value of 0 to it. The idea is that, like in C, it makes the intent of the code
clearer, since any occurrence of &lt;code&gt;NULL&lt;/code&gt; indicates a null pointer rather than
just the literal value 0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next label, &lt;code&gt;l_asm_module&lt;/code&gt;, points to an instance of the &lt;code&gt;PyModuleDef&lt;/code&gt;
structure, which is pretty much the core data structure of our Python module. It
contains all the relevant metadata that is then passed to CPython for correct
initialisation and use of the module. Its definition is in the &lt;code&gt;moduleobject.h&lt;/code&gt;
header file and, at first sight, looks a bit complicated, with some references
to other structures and C macros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;PyModuleDef&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;PyModuleDef_Base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_doc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Py_ssize_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;PyMethodDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m_methods&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;PyModuleDef_Slot&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_slots&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;traverseproc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_traverse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;inquiry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_clear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;freefunc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m_free&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyModuleDef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So lets take our time to figure out what its byte content looks like. The first
field is an instance of the &lt;code&gt;PyModuleDef_Base&lt;/code&gt; structure, which is defined in
the same header file, just a few lines above. The non-trivial bit in this new
structure is the first part, &lt;code&gt;PyObject_HEAD&lt;/code&gt;, which looks like a C macro. As the
name suggest, its definition is quite likely to be found in &lt;code&gt;object.h&lt;/code&gt;. Indeed,
there we find&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define PyObject_HEAD                   PyObject ob_base;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so our chase continues. The definition of the &lt;code&gt;PyObject&lt;/code&gt; structure can be found
a few lines below. Again, all the fields are quite simple, i.e. just integers
value or memory pointers, except for the macro &lt;code&gt;_PyObject_HEAD_EXTRA&lt;/code&gt;. We then
have to jump back up a few lines, to find that this macro is conditionally
defined as either nothing or &lt;code&gt;0, 0&lt;/code&gt;. By default, the macro &lt;code&gt;Py_TRACE_REFS&lt;/code&gt; is
not defined, so in our case &lt;code&gt;_PyObject_HEAD_EXTRA&lt;/code&gt; evaluates to nothing.
Backtracking from our macro chase in CPython headers, we see that we can define
the following structures in &lt;code&gt;python.inc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;STRUC &lt;/span&gt;&lt;span class="nv"&gt;PyObject&lt;/span&gt;
  &lt;span class="nf"&gt;.ob_refcnt&lt;/span&gt;            &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; Py_ssize_t&lt;/span&gt;
  &lt;span class="nf"&gt;.ob_type&lt;/span&gt;              &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; struct _typeobject *&lt;/span&gt;
&lt;span class="k"&gt;ENDSTRUC&lt;/span&gt;

&lt;span class="nv"&gt;STRUC&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef_Base&lt;/span&gt;
  &lt;span class="nf"&gt;.ob_base&lt;/span&gt;              &lt;span class="nv"&gt;resb&lt;/span&gt; &lt;span class="nv"&gt;PyObject_size&lt;/span&gt;
  &lt;span class="nf"&gt;.m_init&lt;/span&gt;               &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; PyObject *&lt;/span&gt;
  &lt;span class="nf"&gt;.m_index&lt;/span&gt;              &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; Py_ssize_t&lt;/span&gt;
  &lt;span class="nf"&gt;.m_copy&lt;/span&gt;               &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; PyObject *&lt;/span&gt;
&lt;span class="k"&gt;ENDSTRUC&lt;/span&gt;

&lt;span class="nv"&gt;STRUC&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef&lt;/span&gt;
  &lt;span class="nf"&gt;.m_base&lt;/span&gt;               &lt;span class="nv"&gt;resb&lt;/span&gt; &lt;span class="nv"&gt;PyModuleDef_Base_size&lt;/span&gt;
  &lt;span class="nf"&gt;.m_name&lt;/span&gt;               &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; const char *&lt;/span&gt;
  &lt;span class="nf"&gt;.m_doc&lt;/span&gt;                &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; const char *&lt;/span&gt;
  &lt;span class="nf"&gt;.m_size&lt;/span&gt;               &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; Py_ssize_t&lt;/span&gt;
  &lt;span class="nf"&gt;.m_methods&lt;/span&gt;            &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; PyMethodDef *&lt;/span&gt;
  &lt;span class="nf"&gt;.m_slots&lt;/span&gt;              &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; struct PyModuleDef_Slot *&lt;/span&gt;
  &lt;span class="nf"&gt;.m_traverse&lt;/span&gt;           &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; traverseproc&lt;/span&gt;
  &lt;span class="nf"&gt;.m_clear&lt;/span&gt;              &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; inquiry&lt;/span&gt;
  &lt;span class="nf"&gt;.m_free&lt;/span&gt;               &lt;span class="nv"&gt;resq&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;; freefunc&lt;/span&gt;
&lt;span class="k"&gt;ENDSTRUC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can easily guess, NASM generates the constants &lt;code&gt;PyObject_size&lt;/code&gt; etc...
automatically so that they can be used to reserve enough memory to hold the
entire structure in the definition of other structures. This makes nesting quite
easy to implement in NASM.&lt;/p&gt;
&lt;h2 id="local-and-global-functions"&gt;Local and Global Functions&lt;/h2&gt;
&lt;p&gt;Finally we get to the actual code that will get executed by CPython when our
module is loaded and initialised, and when the methods that it provides are
called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="k"&gt;SECTION                 &lt;/span&gt;&lt;span class="nv"&gt;.text&lt;/span&gt;
&lt;span class="c1"&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="nl"&gt;asm_sayit:&lt;/span&gt; &lt;span class="c1"&gt;;; ----------------------------------------------------------------&lt;/span&gt;
                        &lt;span class="nf"&gt;push&lt;/span&gt;  &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;

                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;; SYS_WRITE&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                  &lt;span class="c1"&gt;; STDOUT&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_msg&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;l_sayit_msg_len&lt;/span&gt;
                        &lt;span class="nf"&gt;syscall&lt;/span&gt;

                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Py_None&lt;/span&gt;
                        &lt;span class="nf"&gt;inc&lt;/span&gt;   &lt;span class="kt"&gt;QWORD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;PyObject.ob_refcnt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

                        &lt;span class="nf"&gt;pop&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="c1"&gt;;; end asm_sayit&lt;/span&gt;


&lt;span class="nl"&gt;PyInit_asm:&lt;/span&gt; &lt;span class="c1"&gt;;; --------------------------------------------------------------&lt;/span&gt;
                        &lt;span class="nf"&gt;push&lt;/span&gt;  &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rsp&lt;/span&gt;

                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;PYTHON_API_VERSION&lt;/span&gt;
                        &lt;span class="nf"&gt;mov&lt;/span&gt;   &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;l_asm_module&lt;/span&gt;
                        &lt;span class="nf"&gt;call&lt;/span&gt;  &lt;span class="nv"&gt;PyModule_Create2&lt;/span&gt; &lt;span class="ow"&gt;WRT&lt;/span&gt; &lt;span class="nv"&gt;..plt&lt;/span&gt;

                        &lt;span class="nf"&gt;pop&lt;/span&gt;   &lt;span class="nb"&gt;rbp&lt;/span&gt;
                        &lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="c1"&gt;;; end PyInit_asm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, we have a total of two functions, one local and one global. The first
one, &lt;code&gt;asm_sayit&lt;/code&gt;, is the only method contained in our module. All it does is to
write a string, &lt;code&gt;l_sayit_msg&lt;/code&gt;, to standard output by invoking the &lt;code&gt;SYS_WRITE&lt;/code&gt;
system call. Perhaps the most interesting bit of this function is the code on
lines 61-62. This is the idiom for any function that wishes to return &lt;code&gt;None&lt;/code&gt; in
Python. Recall that, in Python, &lt;code&gt;None&lt;/code&gt; is an object instantiated by CPython. As
such, our shared library needs to import it as an external symbol. This is why
you will find the macro &lt;code&gt;PyNone&lt;/code&gt; defined as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;%define Py_None               _Py_NoneStruct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;together with the line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;EXTERN    &lt;/span&gt;&lt;span class="nv"&gt;_Py_NoneStruct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the &lt;code&gt;python.inc&lt;/code&gt; file. This is equivalent to the two lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyAPI_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_Py_NoneStruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* Don&amp;#39;t use this directly */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define Py_None (&amp;amp;_Py_NoneStruct)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the &lt;code&gt;object.h&lt;/code&gt; header file, where the &lt;code&gt;None&lt;/code&gt; object is defined. All of this
explains line 61, but what about line 62? This has to do with &lt;a href="https://docs.python.org/3/c-api/refcounting.html"&gt;Reference
Counting&lt;/a&gt;. In a nutshell,
every object created in Python comes with a counter that keeps track of all the
references attached to it. When the counter gets down to 0, the object can be
de-allocated from memory and resources freed for other objects to use. This is
how Python, which heavily relies on &lt;code&gt;malloc&lt;/code&gt;, can keep memory leaks at bait. It
is therefore very important to properly maintain reference counts in Python
extensions. As &lt;code&gt;None&lt;/code&gt; is a Python object like any others, when we return a
reference to it, we have to bump its reference count. In C, this is conveniently
done with the &lt;code&gt;Py_INCREF&lt;/code&gt; macro. Its definition is in the &lt;code&gt;object.h&lt;/code&gt; and, as it
is easy to guess, it just increases the &lt;code&gt;ob_refcnt&lt;/code&gt; field of the &lt;code&gt;PyObject&lt;/code&gt;
structure. This is precisely what we do on line 62.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stack Frames Matter!&lt;/strong&gt; You might be wondering why we are taking care of
creating a stack frame on function entry, and cleaning up after ourself on
leave. The reason is a pretty obvious one: we don't know what code will call
ours, so it is safe to make sure that stack alignment is preserved across
calls by doing what every function is expected to do. When I was lying down
the code for this post, I was getting a SIGSEGV exception, and the debugger
revealed that the instruction &lt;code&gt;movaps&lt;/code&gt; was trying to store the value of the
&lt;code&gt;xmm0&lt;/code&gt; register on a memory location that was not a multiple of 16. The
problem was solved by the extra 8 bytes from &lt;code&gt;push rbp&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second and last function is our global exported symbol &lt;code&gt;PyInit_asm&lt;/code&gt;. It gets
called by CPython as soon as we &lt;code&gt;import&lt;/code&gt; the module with &lt;code&gt;import asm&lt;/code&gt;. In this
simple case, we don't have to do much here. In fact, all we have to do is call a
standard CPython function and pass it the instance of &lt;code&gt;PyModuleDef&lt;/code&gt; allocated at
&lt;code&gt;l_asm_module&lt;/code&gt;. As we have briefly seen, this contains all the information about
our module, from the documentation to the list of methods.&lt;/p&gt;
&lt;p&gt;Now, if you have read through the official documentation on how to extend Python
with C, you might be wondering why we are calling &lt;code&gt;PyModule_Create2&lt;/code&gt; instead of
&lt;code&gt;PyModule_Create&lt;/code&gt; (is there a typo?), and why we are passing it two arguments
instead of one. If you are starting to smell a C macro, then you are correct!
Long story short, &lt;code&gt;PyModule_Create&lt;/code&gt; is a macro defined as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define PyModule_Create(module) PyModule_Create2(module, PYTHON_API_VERSION)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with &lt;code&gt;PYTHON_API_VERSION&lt;/code&gt; defined as the literal 1013. So the actual function to
call is indeed &lt;code&gt;PyModule_Create2&lt;/code&gt;, and it takes two arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Did you notice that weird &lt;code&gt;WRT ..plt&lt;/code&gt;? Remember the discussion about ensuring
position-independent code? Since we have no clue of where the
&lt;code&gt;PyModule_Create2&lt;/code&gt; function resides in memory, we have to rely on some sort of
indirection. This is provided by the so-called &lt;em&gt;Procedure Linkage Table&lt;/em&gt;, or
&lt;em&gt;PLT&lt;/em&gt; for short, which is some code that is part of our shared library. When
we call &lt;code&gt;PyModule_Create2 WRT ..plt&lt;/code&gt;, we are jumping to the PLT section of our
object file in memory, which contains the necessary code to make the actual
jump to the function that we want to call.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;p&gt;Once our assembly code is ready, it needs to be assembled and linked into a
shared object file. We will now see how to perform these steps, and how to test
and install our Python extension.&lt;/p&gt;
&lt;h2 id="assembling-and-linking"&gt;Assembling and Linking&lt;/h2&gt;
&lt;p&gt;Once the code is ready, it needs to be assembled and linked into the final
shared object file. The NASM assembler is invoked with minimal arguments as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nasm -f elf64 -o asm/asm.o asm/asm.asm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates an intermediate object file &lt;code&gt;asm.o&lt;/code&gt;. To create the final shared
object file, we use the GNU linker with the following arguments&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ld -shared -o asm/asm.so asm/asm.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the use of the &lt;code&gt;-shared&lt;/code&gt; switch, which instructs the linker to create a
shared object file.&lt;/p&gt;
&lt;h2 id="how-to-test-the-module"&gt;How to Test the Module&lt;/h2&gt;
&lt;p&gt;The first thing that you might want to do is to manually test that the shared
object file works fine with Python. For CPython to be able to find the module,
we need to ensure that its location is included in the search path. One way is
to add it to the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable. For example, from within the
project folder, we can launch Python with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./asm python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and from the interactive session we should be able to import the module with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asm&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, we can add the search path to &lt;code&gt;sys.path&lt;/code&gt; with these few lines of
Python code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./asm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asm&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we have successfully imported our module in Python, we can test that its
method &lt;code&gt;sayit&lt;/code&gt; works as expected&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sayit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;This method has something important to say.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sayit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;great&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope that you would agree :).&lt;/p&gt;
&lt;h2 id="distributing-the-module"&gt;Distributing the Module&lt;/h2&gt;
&lt;p&gt;The simplicity of our sample module wouldn't justify the use of &lt;code&gt;setuptools&lt;/code&gt; for
distribution. In this case, a simple, old-fashioned Makefile is the simplest
solution to go for. Even for larger projects, you would probably still delegate
the build job of your code to a Makefile anyway, which would then get called
from your &lt;code&gt;setup.py&lt;/code&gt; at some phase, perhaps during &lt;code&gt;build&lt;/code&gt;. However, the
recommended standard is that you build &lt;em&gt;wheels&lt;/em&gt; instead of &lt;em&gt;eggs&lt;/em&gt;, and the
requirement is that you provide pre-built binaries with your package.&lt;/p&gt;
&lt;p&gt;This being said, let's see how to distribute the module. As we have seen in the
previous section, the shared object needs to resides in one of the Python search
paths. The easiest way to find out what these paths are on the platform that you
are targeting is to launch the Python interpreter and print the value of
&lt;code&gt;sys.path&lt;/code&gt;. On my platform, I get the following output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6.3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;7.2.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/lib/python36.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/dist-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/lib/python3/dist-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/lib/python3.6/dist-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Makefile could then contain the following line inside the &lt;code&gt;install&lt;/code&gt; rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install: default
    cp asm/asm.so /usr/lib/python&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PYTHON_TARGET&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/asm.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with the environment variable &lt;code&gt;PYTHON_TARGET&lt;/code&gt; set to &lt;code&gt;3.6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To automate the building and testing process of the module, we could use Docker
to build an image out of the target platform and trigger a build, and perhaps
execute some unit tests too. A simple Dockerfile that does the minimum work to
build and test would look something like the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;  &lt;span class="s"&gt;ubuntu:latest&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt;  root&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;   . asm
&lt;span class="k"&gt;RUN&lt;/span&gt;   apt-get update              &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
      apt-get install -y            &lt;span class="se"&gt;\&lt;/span&gt;
        nasm                        &lt;span class="se"&gt;\&lt;/span&gt;
        python3-pytest              &lt;span class="se"&gt;\&lt;/span&gt;
        build-essential
&lt;span class="k"&gt;ENV&lt;/span&gt;   &lt;span class="nv"&gt;PYTHON_TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.5
&lt;span class="k"&gt;RUN&lt;/span&gt;   &lt;span class="nb"&gt;cd&lt;/span&gt; asm                      &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
      make                        &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
      make install                &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
      python3 -m pytest -s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we are targeting the latest stable version of Ubuntu, which
comes with &lt;code&gt;python3.5&lt;/code&gt;. We make sure we install all the required dependencies,
the assembler and the standard build tools, along with &lt;code&gt;python3-pytest&lt;/code&gt; to
perform unit testing once our module builds successfully.&lt;/p&gt;
&lt;p&gt;The bare minimum that we can test is that the import of the module works fine
and that we can call its method. So a possible &lt;code&gt;test_asm.py&lt;/code&gt; test script would
look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asm&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_asm&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sayit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;Whilst I appreciate that the cases where you'd want to seriously consider
extending Python with Assembly code are rare, it is undoubtedly the case that,
if you enjoy experimenting with code, this could be a fun and instructing
experience. In my case, this has forced me to go look into the CPython header
files, which I probably wouldn't have if I were using C. I now know more about
the internal workings of Python and a clearer idea of how CPython is structured.&lt;/p&gt;
&lt;p&gt;As always, I hope you have enjoyed the read. Happy Assembly coding! :)&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="assembly"></category></entry><entry><title>IoT with WebSockets and Python's AsyncIO</title><link href="https://p403n1x87.github.io/iot-with-websockets-and-pythons-asyncio.html" rel="alternate"></link><published>2018-03-03T22:49:00+01:00</published><updated>2018-03-03T22:49:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2018-03-03:/iot-with-websockets-and-pythons-asyncio.html</id><summary type="html">&lt;p&gt;After &lt;a href="https://p403n1x87.github.io/a-gentle-introduction-to-iot.html"&gt;a gentle introduction to the concept of IoT&lt;/a&gt; and what it entails, we take a dive into WebSockets and Asynchronous I/O in Python to explore other ways of controlling devices over a network. This post uses a simple two LED circuit to introduce WebSockets, and how to use them in Python together with the &lt;code&gt;asyncio&lt;/code&gt; module.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#connecting-devices-over-a-network-websockets"&gt;Connecting Devices over a Network: WebSockets&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#coroutines"&gt;Coroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-asyncio-module"&gt;The asyncio module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-things-up"&gt;Setting Things Up&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-circuitry"&gt;The Circuitry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-server-code"&gt;The Server Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-client-code"&gt;The Client Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this post, we will get back to the topic of IoT to introduce two new
technologies by example: &lt;strong&gt;WebSockets&lt;/strong&gt; and &lt;strong&gt;Asynchronous I/O&lt;/strong&gt; in Python. The
project that will allow us to explore them is a simple system of two LEDs that
we will control with the gravity sensor of an Android device via a Raspberry Pi
over a network.&lt;/p&gt;
&lt;p&gt;The post is divided into two parts. The first one is theoretical in nature and
will cover the essential technical details of the two main subjects, that is
&lt;em&gt;WebSockets&lt;/em&gt; and Python's &lt;em&gt;asyncio&lt;/em&gt;. In the second part we will have a look at
the circuit that we are going to control over the network and discuss the server
and client code.&lt;/p&gt;
&lt;p&gt;But before we dive into the study of the topics of this post, it is perhaps best
to first have a high level view of how all the pieces fit together, thus
motivating the choices of technologies mentioned above. The idea of the project
stems from the following scenario: suppose you want to build a device that can
be controlled over the network, e.g. an hand-held device like a phone. As we
have seen in &lt;a href="https://p403n1x87.github.io/a-gentle-introduction-to-iot.html"&gt;a previous post&lt;/a&gt;, one way of
achieving this is by using a single-board computer like a Raspberry Pi and
control it via a web server.&lt;/p&gt;
&lt;p&gt;Now, what if you wanted more control over the connection method to the device,
and perhaps a bi-directional channel to let data from, e.g. sensors on the
device, to flow upstream to the controlling device? An elegant way of achieving
this goal these days is with &lt;strong&gt;WebSockets&lt;/strong&gt;, which allow (full) duplex
communication between pairs of connected devices. So, for instance, we could
have a WebSocket server running on a Raspberry Pi, and have a native application
on an Android device to run a WebSocket client. Control commands can then flow
from the Android device to the single-board computer, while the server can feed
data from any sensors that the device is equipped with back to the client, with
just a single connection.&lt;/p&gt;
&lt;p&gt;The code samples that we will look at towards the end of the post implement a
Python WebSocket server that will run on, e.g., a Raspberry Pi, and a native
Android application that will act as a WebSocket client to control a pair of
LEDs mounted on a breadboard. The data that we will transfer from the Android
device to our circuit is coming from a gravity sensor, so that when we twist the
hand-held device clockwise or anti-clockwise, a different LED will turn on.
Furthermore, the brightness will depend on how much the device is tilted.&lt;/p&gt;
&lt;p&gt;So, read on to find out more!&lt;/p&gt;
&lt;h1 id="connecting-devices-over-a-network-websockets"&gt;Connecting Devices over a Network: WebSockets&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://p403n1x87.github.io/a-gentle-introduction-to-iot.html"&gt;A Gentle Introduction to IoT&lt;/a&gt;, we saw
how to control a single LED over a network by running a web server hosting the
controlling web application. This was a simple web page that displayed a button
that not only showed the current state of the LED, but allowed to control it by
turning it on or off. All we needed to do was to point a web browser to the web
server running on the Raspberry Pi and play around with the only web page on it.&lt;/p&gt;
&lt;p&gt;There might be situations where we are not happy with a web server, but we
actually want more control over the way devices connect with each other. In a
simple client-server relationship, surely TCP/IP sockets spring to mind, but
what if we want to allow for data to flow in both directions?&lt;/p&gt;
&lt;p&gt;Contrary to ordinary sockets, WebSockets offer a full-duplex communication
channel over a single TCP connection. They are compatible with the HTTP
protocol, but make use of their own protocol (the &lt;em&gt;WebSocket&lt;/em&gt; protocol), which
is switched to by including an HTTP Upgrade header in the HTTP handshake. By
default, they are supposed to operate on the standard HTTP ports (80 for HTTP
and 443 for secured HTTP), but a different one can be used for custom use, as we
will see in our example. The advantage over any other solutions is that
WebSockets have been designed to allow for fast bi-directional communication
between client and server via an TCP connection that is kept open until manually
closed (or dropped for other reasons), but without the overheads of HTTP
headers.&lt;/p&gt;
&lt;p&gt;By design, WebSockets are then the perfect tool for exchanging short &lt;em&gt;messages&lt;/em&gt;
between devices. As to what kind of messages we can send back and forth, we will
see that we can either send &lt;em&gt;text&lt;/em&gt; messages, or raw &lt;em&gt;binary&lt;/em&gt; data, by either
operating the WebSocket with &lt;em&gt;text&lt;/em&gt; or &lt;em&gt;binary&lt;/em&gt; frames.&lt;/p&gt;
&lt;p&gt;Having justified the use of WebSockets for our project, we now have to motivate
the use of the other mentioned technology: &lt;code&gt;asyncio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like in &lt;a href="https://p403n1x87.github.io/a-gentle-introduction-to-iot.html"&gt;A Gentle Introduction to IoT&lt;/a&gt;,
the choice of Python is motivated by the use of the Raspberry Pi. In Python,
WebSocket support is provided by the
&lt;a href="https://pypi.python.org/pypi/websockets"&gt;&lt;code&gt;websockets&lt;/code&gt;&lt;/a&gt; module, which is built
on top of &lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is where we encounter the first constraint though, since &lt;code&gt;asyncio&lt;/code&gt; was
introduced in Python 3.4. We then have to ensure that we are using a version of
Python greater than or at least equal to 3.4. But our coding can also vary based
on whether we are using Python 3.5 and later. That is because this version of
Python introduces the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; syntax for natively defining
coroutines (&lt;a href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP 492&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In the last part of this post we will have a look at Python code samples written
with the standard &lt;code&gt;asyncio&lt;/code&gt; syntax, as well as the new one introduced by PEP
492. For now, we shall have a quick overview of the new features that are
brought to Python 3 by the &lt;code&gt;asyncio&lt;/code&gt; module to better familiarise with it and
its usage.&lt;/p&gt;
&lt;h2 id="coroutines"&gt;Coroutines&lt;/h2&gt;
&lt;p&gt;I believe that the best way to understand &lt;code&gt;asyncio&lt;/code&gt; is to first look at the
basic concepts involved and recall the notion of &lt;code&gt;coroutine&lt;/code&gt;. In Python we have
the concept of &lt;em&gt;Generators&lt;/em&gt; since version 2.2. Generators look and feel like
normal functions, but rather than &lt;em&gt;returning&lt;/em&gt; a value, they &lt;em&gt;yield&lt;/em&gt; one, and are
normally used in loops to provide iterators.&lt;/p&gt;
&lt;p&gt;The typical scenario where you'd want to opt for a generator rather than a
function is when you have to keep track of some state in between the different
values returned. A simple example is a generator that generates the first &lt;span class="math"&gt;\(n\)&lt;/span&gt;
Fibonacci numbers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
        &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;span class="math"&gt;\(n=0\)&lt;/span&gt;, the generator doesn't yield any number and we can then return. When
&lt;span class="math"&gt;\(n=1\)&lt;/span&gt;, the generator must yield the first Fibonacci number only, which is 0, and
so on. The difference between &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; is that the former terminates
the iteration, while the latter allows it to continue. To better understand what
is going on here, observe that a call to &lt;code&gt;fibonacci&lt;/code&gt;, like &lt;code&gt;f = fibonacci(10)&lt;/code&gt;
doesn't return a Fibonacci number (you might at first expect this to return the
first Fibonacci number), but a &lt;em&gt;generator object&lt;/em&gt; instead, that is, something
that we can use with a &lt;code&gt;for&lt;/code&gt; loop, or any function that expects an iterable
object, like &lt;code&gt;sum&lt;/code&gt;. The first two Fibonacci numbers can then be generated with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Expected output&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;generator object fibonacci at 0x7f2e0940baf0&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but if we now try to print yet another Fibonacci number, we get a
&lt;code&gt;StopIteration&lt;/code&gt; exception, which signals that the generator has returned and
that there are no more values to be generated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Expected output&lt;/span&gt;
&lt;span class="c1"&gt;# Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c1"&gt;#   File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 5, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#     print(next(f))&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# StopIteration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following code snippet illustrates the use of a generator with a &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_cases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_cases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Test case: n = &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am omitting the expected output to avoid cluttering the page, but it should be
quite clear what the above code is supposed to do. To produce a more compact
result we can do something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sfibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_cases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Test case: n = &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;# Expected output:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Test case: n = 0&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Test case: n = 1&lt;/span&gt;
&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;span class="c1"&gt;# Test case: n = 2&lt;/span&gt;
&lt;span class="c1"&gt;# 0 1&lt;/span&gt;
&lt;span class="c1"&gt;# Test case: n = 3&lt;/span&gt;
&lt;span class="c1"&gt;# 0 1 1&lt;/span&gt;
&lt;span class="c1"&gt;# Test case: n = 10&lt;/span&gt;
&lt;span class="c1"&gt;# 0 1 1 2 3 5 8 13 21 34&lt;/span&gt;
&lt;span class="c1"&gt;# Test case: n = 20&lt;/span&gt;
&lt;span class="c1"&gt;# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which also shows how to construct a generator out of another generator.&lt;/p&gt;
&lt;p&gt;From the above example we deduce that the &lt;code&gt;yield&lt;/code&gt; keyword is generating a value
while also "&lt;em&gt;pausing&lt;/em&gt;" the execution of the function, until another value is
requested from it. In this case, the execution resumes from the instruction that
comes soon after the &lt;code&gt;yield&lt;/code&gt;, with all the values of local variables (the
&lt;em&gt;state&lt;/em&gt;) preserved.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Generators&lt;/em&gt; are also known as &lt;em&gt;semicoroutine&lt;/em&gt;, and this leads us to talk about
&lt;em&gt;coroutines&lt;/em&gt;. This is a more general concept, because it encompasses those code
elements that not only pass a value to the caller, but also receive and process
a value passed to them by another code element (e.g. a generator, or another
coroutine). This definition looks a bit circular, and this is due to the fact
that, with coroutines, the relation is not of caller-callee, but symmetric. In
more concrete terms, we are talking about functions that can retain a state in
between invocations, and that can call to other functions, suspending and
resuming execution from certain points of the code.&lt;/p&gt;
&lt;p&gt;Starting with Python 2.5, coroutines have become an integral part of the
language. They can be easily constructed with &lt;code&gt;yield&lt;/code&gt;, which has been turned
into an &lt;em&gt;expression&lt;/em&gt;. The value &lt;code&gt;yields&lt;/code&gt; evaluates to is passed to the coroutine
with a call to &lt;code&gt;send&lt;/code&gt; on the generator, like so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;coro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Expected output&lt;/span&gt;
&lt;span class="c1"&gt;# #1 : Hello&lt;/span&gt;
&lt;span class="c1"&gt;# #2 : World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you look to code like the above for the first time, you might be wondering
why I have included a call to &lt;code&gt;next&lt;/code&gt;. Remember from our discussion on generators
that, contrary to normal functions, a call to &lt;code&gt;coroutine&lt;/code&gt; returns a generator
object and not the first generated value. After creation, a coroutine needs to
be &lt;em&gt;primed&lt;/em&gt;, that is it needs to be started so that it can execute its code
until the first occurrence of the &lt;code&gt;yield&lt;/code&gt; expression. The coroutine then halts
and waits for values to be sent to it. In Python, there are two equivalent ways
of priming a coroutine: either call &lt;code&gt;next&lt;/code&gt;, as we have done in the code above,
or send it a &lt;code&gt;None&lt;/code&gt; with &lt;code&gt;coro.send(None)&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since it is quite easy to forget to prime a coroutine, a good idea is to
define a decorator, e.g. &lt;code&gt;@coroutine&lt;/code&gt; that creates, primes and returns a
coroutine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to know more about coroutines, I recommend that you have a look at
David Beazley's &lt;a href="http://www.dabeaz.com/coroutines/"&gt;A Curious Course on Coroutines and
Concurrency&lt;/a&gt;. Here, I have just stated the
essential details that we are going to need for our project. These should be
enough to convince you that, with coroutines in Python we can implement
single-threaded concurrency, which offer an ideal ground for asynchronous I/O
operations, without the overhead of many context switches between different
threads.&lt;/p&gt;
&lt;h2 id="the-asyncio-module"&gt;The &lt;code&gt;asyncio&lt;/code&gt; module&lt;/h2&gt;
&lt;p&gt;If you have ever done any sort of I/O before, like reading from/writing to a
file, or creating a socket and waiting for a connection etc... you will surely
know that most of the I/O operations are blocking. For example, if you are
trying to read from a file descriptor by making a &lt;code&gt;SYS_READ&lt;/code&gt; system call, your
code will hand control over to the OS until your request can be honoured. The
normal execution flow then resumes.&lt;/p&gt;
&lt;p&gt;The problem with this wait is that, in most cases, you don't know when there
will be enough data available from the file descriptor to read. Your application
then halts while it might be doing something useful instead.&lt;/p&gt;
&lt;p&gt;The typical workaround is to poll the file descriptor periodically, and only
read from it when data is actually available. As you can easily imagine, the
solutions come in different patterns, and every time you have to deal with this
there is some boilerplate code that you would have to write. This amounts to
writing your event loop to cycle through your tasks, which include I/O polling.
Wouldn't it be nice if we were provided with such boilerplate code encapsulated
in a module that we can use whenever we need to perform asynchronous I/O
operations?&lt;/p&gt;
&lt;p&gt;This must be what the people behind &lt;code&gt;asyncio&lt;/code&gt; must have thought, and that's why
the essential element that this Python module offers is an &lt;strong&gt;event loop&lt;/strong&gt;. This
is designed to register and schedule &lt;strong&gt;Tasks&lt;/strong&gt; which, with just a few words, can
be described as &lt;em&gt;objects decorating coroutines&lt;/em&gt; (hence, in practice, they are
coroutines). Some of these tasks might involve I/O operations, and some of these
operations might be blocking. By continuously polling for the I/O status of file
descriptors, sockets etc..., &lt;code&gt;asyncio&lt;/code&gt; allows you to write single-threaded
concurrent code that performs I/O.&lt;/p&gt;
&lt;p&gt;In this post, we are interested in working with WebSockets, as as an example of
what we have just seen we can play around with some WebSocket servers and
clients. In Python, we can make use of the &lt;code&gt;websockets&lt;/code&gt; modules, which builds
its functionalities on top of &lt;code&gt;asyncio&lt;/code&gt;. The &lt;a href="https://pypi.python.org/pypi/websockets"&gt;Getting
Started&lt;/a&gt; page on PyPI shows how simple
it is to create a a WebSocket client, and an echo server to test it. The
following examples are based on them, but with just some slight modifications,
and a twist: the client sends a string read from STDIN and the echo server
reverses it.&lt;/p&gt;
&lt;p&gt;So here is the server code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Echo server. Will reverse everything we throw at it.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;websockets&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websockets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8765&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and here is the client code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Client. Sends stuff from STDIN to the server.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;websockets&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;websockets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws://localhost:8765&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's where we make our first encounter with the new &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;
keywords, introduced by the already cited PEP 492. The new syntax &lt;code&gt;async def&lt;/code&gt; is
used to declare a &lt;em&gt;native coroutine&lt;/em&gt; in Python 3.5 and later versions. Perhaps
more interesting are &lt;code&gt;async with&lt;/code&gt; and &lt;code&gt;async for&lt;/code&gt;. The former introduces native
asynchronous context managers for classes that define the new magic methods
&lt;code&gt;__aenter__&lt;/code&gt; and &lt;code&gt;__aexit__&lt;/code&gt;, but apart from this, its usage is analogous to the
synchronous counterpart &lt;code&gt;with&lt;/code&gt;. The new syntax &lt;code&gt;async for&lt;/code&gt; is used to consume
asynchronous iterable, i.e. instances of classes that implement the &lt;code&gt;__aiter__&lt;/code&gt;
magic method. When the &lt;code&gt;await&lt;/code&gt; keyword is on its own, it defines an expression
that execute the coroutine it appears in to execute the one passed as its
argument until it completes. In the case of the code above, we just wait for the
&lt;code&gt;websocket&lt;/code&gt; object to complete the task of sending the data.&lt;/p&gt;
&lt;p&gt;After the above discussion, the code for the client application should be quite
clear. The first call to &lt;code&gt;websocket.send&lt;/code&gt; is used to &lt;em&gt;prime&lt;/em&gt; the socket, so that
&lt;code&gt;async for message in websocket&lt;/code&gt; won't hang indefinitely, waiting for something
to show up on the socket's reading end.&lt;/p&gt;
&lt;p&gt;Before we look at how to rewrite the above code snippets for Python 3.4, where
we do not have native coroutines, I would like to briefly comment on the last
two lines of code of the server application. The first time I came across that
code, they gave me a bit of thinking as to why we need to call
&lt;code&gt;run_until_complete&lt;/code&gt; and &lt;code&gt;run_forever&lt;/code&gt;. Wouldn't the former alone suffice? If
you recall our discussion about blocking I/O operations and the necessity of
constantly polling in order not to halt the execution of our application, you
realise that the call to &lt;code&gt;run_until_complete&lt;/code&gt; will register the socket with the
I/O polling task. Hence, apart from this task, we have nothing else running, and
if we do not start the event loop, the newly created socket won't be checked and
the application simply terminates. The last line is there to ensure that we keep
monitoring the socket for new incoming connections. When a client connects, a
new task is scheduled to serve the connection with the passed handler, which
must be a coroutine. This can be verified by peeking at the source code of both
&lt;a href="https://github.com/python/cpython/tree/a19fb3c6aaa7632410d1d9dcb395d7101d124da4/Lib/asyncio"&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://github.com/aaugustin/websockets"&gt;&lt;code&gt;websockets&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And now to the Python 3.4 version of the above code snippets. There are a few
rule of thumb that we can use to convert from 3.5 and later to 3.4, where we
don't have &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt;. The first is the use of the decorator
&lt;code&gt;@asyncio.coroutine&lt;/code&gt; instead of &lt;code&gt;async def&lt;/code&gt;. The situation is a bit more
complicated for &lt;code&gt;async with&lt;/code&gt;, which requires a replacement for &lt;code&gt;await&lt;/code&gt;, which is
&lt;code&gt;yield from&lt;/code&gt;. The latter is substantially equivalent to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="c1"&gt;# Same as: yield from foo()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this in mind, &lt;code&gt;async with&lt;/code&gt; can be coded with a more traditional &lt;code&gt;try ...
finally&lt;/code&gt; block as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# async with coro() as foo:&lt;/span&gt;
&lt;span class="c1"&gt;#     # &amp;lt;code&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#     pass&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;lt;code&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Whatever coro().__aexit__() would have done.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;async for&lt;/code&gt; loop would translate to something like the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# async for foo in bar():&lt;/span&gt;
&lt;span class="c1"&gt;#     # &amp;lt;code&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#     pass&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__anext__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# &amp;lt;code&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopAsyncIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This coding is not strict, since you could, or you might have to replace the
code of &lt;code&gt;bar().__anext__()&lt;/code&gt; with the actual coding inside this coroutine. This
is the case for the code that we are about to see, in which we perform the above
translations. The server code for Python 3.4 is the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Echo server. Will reverse everything we throw at it.&lt;/span&gt;
&lt;span class="c1"&gt;# For Python 3.4&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;websockets&lt;/span&gt;

&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websockets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8765&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;while the client code now looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Client. Sends stuff from STDIN to the server.&lt;/span&gt;
&lt;span class="c1"&gt;# For Python 3.4&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;websockets&lt;/span&gt;

&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;websocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websockets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield from&lt;/span&gt;  &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ws://localhost:8765&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how to execute a native coroutine, or one decorated with
&lt;code&gt;@asyncio.coroutine&lt;/code&gt; in Python 3.4, needs to be executed by an event loop from
the &lt;code&gt;asyncio&lt;/code&gt; module.&lt;/p&gt;
&lt;h1 id="setting-things-up"&gt;Setting Things Up&lt;/h1&gt;
&lt;p&gt;We shall now present the circuit that makes up the device that we want to
control over the network, and both the server and client code that will allow us
to use the gravity sensor of an Android device to operate it.&lt;/p&gt;
&lt;h2 id="the-circuitry"&gt;The Circuitry&lt;/h2&gt;
&lt;p&gt;This part of the post will be brief, because we are going to recycle part of the
previous post on IoT A Gentle Introduction to IoT. In fact, we are going to
double it up by making a circuit with two LEDs, each one following the same
design in the just mentioned post. The idea is to turn either one or the other
on, depending on the rotation angle of our Android device. For example, if we
tilt our device to the right, the green LED will become brighter, while when we
tilt it to the left, the red LED will become brighter.&lt;/p&gt;
&lt;p&gt;So, based on the knowledge acquired with the previous post on IoT, the circuit
that we want to build will look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Double LED configuration" src="https://p403n1x87.github.io/images/ws_asyncio/ws_asyncio_bb.png"&gt;&lt;/p&gt;
&lt;p&gt;For this project I am using a Raspberry Pi 3 Model B. As you can see from the
picture above, we need two LEDs, preferably of different colours, e.g. green and
red, and two 220 Ω resistors. The green LED will be controlled via the BCM 18
(8) pin (green jumper wire), while the red one is controlled via the BCM 5 (29)
pin (red jumper wire) of the Raspberry Pi. The black jumper wires indicate a
connection on a ground pin.&lt;/p&gt;
&lt;h2 id="the-server-code"&gt;The Server Code&lt;/h2&gt;
&lt;p&gt;The server code will run on the Raspberry Pi and will open a WebSocket server,
listening for connection requests. At the moment of writing, Raspbian Jesse has
Python 3.4.2 in its repository, so that we cannot benefit of the native Python
coroutine offered by Python 3.5, unless we install this version manually.&lt;/p&gt;
&lt;p&gt;All the server code can be found inside the
&lt;a href="https://github.com/P403n1x87/iot/tree/master/gravity_led/server"&gt;gravity_led/server&lt;/a&gt;
folder of the &lt;a href="https://github.com/P403n1x87/iot"&gt;iot&lt;/a&gt; repository. Due to its
length I will refrain from embedding it on this post, but I will comment on the
essential aspects.&lt;/p&gt;
&lt;p&gt;The code is based on an abstract WebSocket Server class, &lt;code&gt;WSServer&lt;/code&gt;, contained
in
&lt;a href="https://github.com/P403n1x87/iot/blob/master/gravity_led/server/lib/wss.py"&gt;lib/wss.py&lt;/a&gt;.
An actual WebSocket server has to inherit from this class and implement the
&lt;code&gt;handler&lt;/code&gt; method, which is the one that bootstraps the logic of the server
application. This will be called as soon as the WebSocket server starts serving
connection requests.&lt;/p&gt;
&lt;p&gt;On creation, we can specify the address and port the server is to listen on, as
well as a possible limit on the number of simultaneous connections that the
server is allowed to serve. Why would such a limit be ever necessary? The reason
is that, in this particular example, we only have one device, and this can only
be controlled by one client at a time. It makes no sense to accept more than one
connection. By setting the limit to 1, we then prevent other clients from
connecting and finding out that the device is already being controlled by
another client. For the way it is implemented though, the class is flexible
enough to allow changing this limit at run-time with a call to the
&lt;code&gt;set_server_limit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After instantiation, we can run the server with a call to the &lt;code&gt;start&lt;/code&gt; method,
and we can check whether it is running at any time with &lt;code&gt;is_running&lt;/code&gt;. Most of
the code in the former method provides logging information and a graceful
shutdown when the user presses Ctrl+C to halt the server.&lt;/p&gt;
&lt;p&gt;The code contained in
&lt;a href="https://github.com/P403n1x87/iot/blob/master/gravity_led/server/main.py"&gt;main.py&lt;/a&gt;
is used to bootstrap the class &lt;code&gt;GyroListener&lt;/code&gt; contained in
&lt;a href="https://github.com/P403n1x87/iot/blob/master/gravity_led/server/gyro_listener.py"&gt;gyro_listener.py&lt;/a&gt;,
which holds the actual logic of the server. As you can see, all that we have to
do is inherit from &lt;code&gt;WSServer&lt;/code&gt; and implement the &lt;code&gt;handler&lt;/code&gt; coroutine, as shown
here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connection ID &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; established [path &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BOARD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PWM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FREQ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PWM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FREQ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_running&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;gyro_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;g&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gyro_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Received datum &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;websockets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionClosed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connection ID &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; closed.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we initialise the Pi's GPIO and start listening to data over the socket
until the server is running or the connection is closed by the client. The two
pins that we have chosen to use to control the LEDs (&lt;code&gt;CHR&lt;/code&gt; and &lt;code&gt;CHL&lt;/code&gt;) are set on
the PWM (Pulse Width Modulation) mode so that we can control the brightness: the
more the Android device is tilted in one direction, the brighter the LED for
that direction.&lt;/p&gt;
&lt;p&gt;Here we also notice the "&lt;em&gt;contract&lt;/em&gt;" between the server and the client: the
latter will send the three coordinates of the gravity sensor as a
space-separated list of three floating point values. The server will split this
string and use the second component (the &lt;em&gt;y&lt;/em&gt;-axis of the gravity sensor) to
control the LEDs. When the value is positive the LED on the &lt;code&gt;CHR&lt;/code&gt; pin will turn
on, with a duty cycle proportional to the value passed by the client; when the
value is negative the LED on the &lt;code&gt;CHL&lt;/code&gt; pin will start to turn on.&lt;/p&gt;
&lt;p&gt;To launch the server, run &lt;code&gt;main.py&lt;/code&gt; and pass the IPv4 address and a port number,
for example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 main.py &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 &lt;span class="m"&gt;5678&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to listen on &lt;em&gt;any&lt;/em&gt; IP address on the Raspberry Pi and accept connections from everywhere.&lt;/p&gt;
&lt;h2 id="the-client-code"&gt;The Client Code&lt;/h2&gt;
&lt;p&gt;For the client, we are going to develop a minimalist Android application, with
the same project structure that we have encountered in the previous post on
&lt;a href="https://p403n1x87.github.io/android-development-from-the-command-line.html"&gt;Android Development from the Command
Line&lt;/a&gt;. Again, the code is quite extensive,
but you can find it in the
&lt;a href="https://github.com/P403n1x87/iot/tree/master/gravity_led/client"&gt;gravity_iot/client&lt;/a&gt;
folder. Apart from the minimal Android project setup, with the
&lt;code&gt;AndroidManifest.xml&lt;/code&gt; and the resource files for the UI, all that we need is a
single activity where we can specify the IP address and the port of the server
to connect to, and a toggle button to start and close a connection to the
server.&lt;/p&gt;
&lt;p&gt;For dealing with WebSockets in Java, we make use of the &lt;a href="https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket"&gt;Java
WebSockets&lt;/a&gt;
library, which offers the &lt;code&gt;WebSocketClient&lt;/code&gt; abstract class. As you can see from
the code in
&lt;a href="https://github.com/P403n1x87/iot/blob/master/gravity_led/client/src/main/java/MainActivity.java"&gt;MainActivity.java&lt;/a&gt;,
all that we have to do is extend the &lt;code&gt;WebSocketClient&lt;/code&gt; class and implement a few
methods, which we just use for logging purposes. The actual signalling is done
via callbacks triggered by the on-board gravity sensor on the Android device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onSensorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SensorEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;webSocketClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebsocketNotConnectedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ctrl_ws_client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sensor updated but socket not connected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method is part of the &lt;code&gt;MainActivity&lt;/code&gt; class since we decided that this
should implement the &lt;code&gt;SensorEventListener&lt;/code&gt; interface. When a connection is
successfully started, we register the instance of this class with the sensor, so
that when the value is changed a white-space separated list of the three
components of the gravity vector are sent in text form to the server via the
WebSocket.&lt;/p&gt;
&lt;p&gt;We can use Gradle to build and deploy the application for testing on a device
with the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./gradlew installDebug
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;assuming that you have an Android device in developer mode connected to your
building machine via USB. This is what it looks like on my Nexus 5&lt;/p&gt;
&lt;p&gt;&lt;img alt="ctrl_ws_client" class="center-image" src="https://p403n1x87.github.io/images/ws_asyncio/ctrl_ws_client.png"&gt;&lt;/p&gt;
&lt;p&gt;Before moving to the conclusion, just a quick note on the contents of the
&lt;code&gt;AndroidManifest.xml&lt;/code&gt; file. If you have had a look at it, you might have noticed
the attribute &lt;code&gt;android:configChanges="orientation|screenSize"&lt;/code&gt; on the &lt;code&gt;activity&lt;/code&gt;
element. This allows the application to rotate with the device orientation,
without the application being restarted. If we do not put this attribute, any
previous connection would be closed and we would have to restart it by pressing
on the toggle button. The use of this attribute is not mandatory, but bear in
mind that if you decide not to use it, then you would have to make sure that the
same WebSocket connection is persisted across every screen rotation.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;In the introduction, I have mentioned that WebSockets can be operated in two
modes: &lt;em&gt;text&lt;/em&gt; and &lt;em&gt;binary&lt;/em&gt;. In the code that we have seen in this post we have
sent &lt;em&gt;text&lt;/em&gt; frames between the server and the client. This is because we have
used data of type &lt;code&gt;String&lt;/code&gt; in the Java client code, which is then received as
&lt;code&gt;str&lt;/code&gt; on the Python server end.&lt;/p&gt;
&lt;p&gt;In most practical cases, it is more convenient to send a stream of bytes
instead, thus increasing throughput. On the Java side, this is achieved by
passing an array of bytes (&lt;code&gt;bytes[]&lt;/code&gt;) to the &lt;code&gt;send&lt;/code&gt; method. On the Python end,
data will then be received as &lt;code&gt;bytes&lt;/code&gt; (that is, the return value of the &lt;code&gt;recv&lt;/code&gt;
coroutine is of type &lt;code&gt;bytes&lt;/code&gt;) that one can iterate over, or perform any
necessary operation to make sense of the received information.&lt;/p&gt;
&lt;p&gt;The same holds on reverse: if we send an array of bytes from Python, we will
receive an binary frame on Java. In this case, though, we will have to implement
the &lt;code&gt;ByteBuffer&lt;/code&gt; version of the &lt;code&gt;onMessage&lt;/code&gt; callback of the &lt;code&gt;WebSocketClient&lt;/code&gt;
class, i.e. the one with signature&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ByteBuffer&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="IoT"></category><category term="python"></category><category term="android"></category><category term="raspberry pi"></category><category term="electronics"></category></entry><entry><title>Android Development from the Command Line</title><link href="https://p403n1x87.github.io/android-development-from-the-command-line.html" rel="alternate"></link><published>2017-10-14T22:42:00+01:00</published><updated>2017-10-14T22:42:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2017-10-14:/android-development-from-the-command-line.html</id><summary type="html">&lt;p&gt;Do you like your development tools to be as simple as a text editor to write the code and a bunch of CLI application to build your projects? Do you feel like you are in a cage when you use an IDE? Or perhaps your PC or laptop is a bit dated and all the cores spin like crazy when you fire up Android Studio? Then read on to learn how you can develop Android application with just the text editor of your choice and the standard Android SDK CLI tools.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pre-requisites"&gt;Pre-requisites&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#android-sdk-tools"&gt;Android SDK Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#android-sdk-platform-tools"&gt;Android SDK Platform Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#android-sdk-platforms"&gt;Android SDK Platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#android-sdk-build-tools"&gt;Android SDK Build Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#android-emulator"&gt;Android Emulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradle"&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-the-gradle-project"&gt;Creating the Gradle Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-application"&gt;Writing the Application&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-application-manifest"&gt;The Application Manifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-main-activity"&gt;The Main Activity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-layout-resource"&gt;The Layout Resource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-the-application"&gt;Running the Application&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-with-gradle"&gt;Building with Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-virtual-device"&gt;Creating a Virtual Device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-the-apk"&gt;Installing the APK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-lint-tasks"&gt;The lint tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Yes you guessed it right, I'm not a huge fan of IDEs. Don't get me wrong though,
I am fully aware of how powerful modern IDEs are, and all the magic that they
can do for you to assist you while you are coding your application. But this is
also why I don't like them, especially when I'm picking up something new.&lt;/p&gt;
&lt;p&gt;To the date of writing, I am not an experienced Android developer. When I
started developing applications (there was a time when I believed that no matter
how big a project could be, you could always find the time to code it in
assembly language), a plain old text editor was my friend, together with some
command line tools, like assemblers, linkers, compilers, debuggers etc.... With
no support at all, you had to know exactly what you were doing, you had to know
the syntax, the APIs and where they were located. You also needed a minimum
knowledge of what a linker is for and when and why you need one.&lt;/p&gt;
&lt;p&gt;Whenever I tried an IDE, e.g. Android Studio, I always felt like I didn't really
need to know much about the frameworks I was using, as all the built-in tools
would come to my rescue. As a consequence, I started feeling like I wasn't
really mastering anything and put the project I was working on aside for future
me to one day resume working on it. Rather than me using the IDE, it kind of was
the other way around: the IDE was using me to magically generate code.&lt;/p&gt;
&lt;p&gt;IDEs also tend to hide all the machinery involved in the build process from the
developer as well. In most cases, everything goes well, but what would you do if
you suddenly come across a problem and you have no clue at which stage of the
build process it is happening?&lt;/p&gt;
&lt;p&gt;Surely, if you work on a big company project, it would be crazy to renounce
entirely to IDEs, as your life might be a bit harder in everyday maintenance of
your code, but for smaller projects this argument is somewhat weak, and opting
for a plain text editor might have its many advantages. For once, you are in
total control of the code that is going into your final product. And then again,
there is also the educational aspect, which can give you the right amount of
experience to tackle unexpected issues that could pop up during any stage of the
development life-cycle.&lt;/p&gt;
&lt;p&gt;All this being said, in this post we shall see how to develop an Android
application by only relying on a text editor of your choice and the standard CLI
tool provided by the Android SDK. The focus is on the steps required to install
the Android SDK command line tools and how to organise your source code, rather
than on the details of the application itself.&lt;/p&gt;
&lt;p&gt;As with a standard Android project created with Android Studio, we are going to
rely on Gradle and the Android Gradle plugin for the build process. You may
rightfully think that this somehow partly defeats the point of this post, but,
hey, in the end Gradle is just a command line tool, and quite a standard way to
build and deploy Java projects these days.&lt;/p&gt;
&lt;p&gt;This post is targeted to Linux users, but there is a good chance that the steps
that we will go through have an equivalent on other platforms, like Windows. I'm
afraid this is something that you will have to find out on your own.&lt;/p&gt;
&lt;p&gt;Code very similar to the one presented in this post can be found in the GitHub
repository &lt;a href="https://github.com/P403n1x87/androtest"&gt;androtest&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="pre-requisites"&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;Before embarking on an adventure, it is wise to check that we are taking all
that we need along the way with us. As we are trying to keep things as simple as
possible, we won't need much, but there are a few preliminary steps that we need
to perform in order to set up our development environment.&lt;/p&gt;
&lt;p&gt;The first few steps couldn't be simpler: pick your favourite text editor (my
laptop can still handle an application like Atom) and terminal application, and
we already have almost half of what we need! The rest of the tools is provided
by the Java Development Kit, the Android SDK Tools and Gradle. More details in
due time.&lt;/p&gt;
&lt;p&gt;The JDK is usually available from your distro's repositories. On Ubuntu, it can
be installed with, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install openjdk-9-jdk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Android SDK might not be available from the official repositories. In
principle the could be installed along with Android Studio, but if you are not
going to use Google's official IDE then it is a bit of waste of space. The
&lt;em&gt;cleaner&lt;/em&gt; alternative is to just download the Android SDK Tools from the
&lt;a href="https://developer.android.com/studio/index.html#command-tools"&gt;Android Studio&lt;/a&gt;
download page. For simplicity, I will split the installation process of the
Android SDK into different steps.&lt;/p&gt;
&lt;h2 id="android-sdk-tools"&gt;Android SDK Tools&lt;/h2&gt;
&lt;p&gt;Download the zip archive and extract it somewhere, e.g. &lt;code&gt;~/.android/sdk&lt;/code&gt;, then
update your &lt;code&gt;.bashrc&lt;/code&gt; file to define the &lt;code&gt;ANDROID_HOME&lt;/code&gt; environment variable and
include the SDK tools binaries in the &lt;code&gt;PATH&lt;/code&gt; variable by adding the following
lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Android SDK Tools&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANDROID_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.android/sdk
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools:&lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that most of the tools installed in &lt;code&gt;$ANDROID_HOME/tools&lt;/code&gt; are deprecated
and one should use the dedicated ones provided in the &lt;code&gt;$ANDROID_HOME/tools/bin&lt;/code&gt;
folder. These include the fundamental
&lt;a href="https://developer.android.com/studio/command-line/sdkmanager.html"&gt;&lt;code&gt;sdkmanager&lt;/code&gt;&lt;/a&gt;
and the
&lt;a href="https://developer.android.com/studio/command-line/avdmanager.html"&gt;&lt;code&gt;avdmanager&lt;/code&gt;&lt;/a&gt;
tools for respectively creating and managing different SDK versions (and other
packages too) and virtual devices (the emulators).&lt;/p&gt;
&lt;h2 id="android-sdk-platform-tools"&gt;Android SDK Platform Tools&lt;/h2&gt;
&lt;p&gt;Throughout the Android development life-cycle, you are likely to need to
interface with the Android platform for testing your progress. In concrete terms
this means that you might want to compile your project as you develop it for
testing on an actual Android device. In order to connect to the device and look
at the log you will need the Android Debug Bridge, which is provided with the
Android Platform Tools. To install them we can use the &lt;code&gt;sdkmanager&lt;/code&gt; CLI tool to
pull the latest released version with the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager &lt;span class="s2"&gt;&amp;quot;platform-tools&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install the Platform Tools into the &lt;code&gt;$ANDROID_HOME/platform-tools&lt;/code&gt;
folder. We can then add it to the &lt;code&gt;PATH&lt;/code&gt; variable for easy invocation by simply
adding the following lines to &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Android Platform Tools&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/platform-tools
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="android-sdk-platforms"&gt;Android SDK Platforms&lt;/h2&gt;
&lt;p&gt;In order to compile a project we need a certain API revision to be installed.
This provides all the functionalities that our application can use and are
provided in the form of Java packages and classes and other useful components.
For example, if our project targets Marshmallow, then we need to install the
Android SDK Platform API Level 23. You can find out more at &lt;a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels"&gt;this
page&lt;/a&gt;.
To find out about all the packages available to download we can use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager --list --verbose
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the moment we are interested in Android platforms, i.e. those packages that
are prefixed with &lt;code&gt;platforms;&lt;/code&gt;, so we can filter the output of the above command
as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager --list --verbose &lt;span class="p"&gt;|&lt;/span&gt; grep -A &lt;span class="m"&gt;3&lt;/span&gt; platforms&lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Among the matching results, you should see something similar to the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;platforms;android-23
    Description:        Android SDK Platform 23
    Version:            3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then proceed to installing the Android SDK Platform API Level 23 with the
command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager &lt;span class="s2"&gt;&amp;quot;platforms;android-23&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;When you use the &lt;code&gt;sdkmanager&lt;/code&gt; tool, you might see the following warning message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Warning: File /home/user/.android/repositories.cfg could not be loaded.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to get rid of it you can simply create this file with no content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="android-sdk-build-tools"&gt;Android SDK Build Tools&lt;/h2&gt;
&lt;p&gt;Now that we have the API to compile against, we need the tools to actually be
able to build a project: the build tools. They provide utilities like
&lt;code&gt;apksigner&lt;/code&gt;, Jack and Jill etc..., but for the moment we don't have to worry
about the details of this package, as they will be invoked behind the scenes by
Gradle.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.android.com/studio/releases/build-tools.html"&gt;Android Studio User
Guide&lt;/a&gt;
recommends that you keep the build tools updated to the latest version. To find
out all the versions available for download, run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager --list --verbose &lt;span class="p"&gt;|&lt;/span&gt; grep -A &lt;span class="m"&gt;3&lt;/span&gt; build-tools&lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and locate the latest version. At the moment of writing this is 26.0.1, so the
command to use in this case is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager &lt;span class="s2"&gt;&amp;quot;build-tools;26.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="android-emulator"&gt;Android Emulator&lt;/h2&gt;
&lt;p&gt;The installation of the Android Emulator package is not mandatory, as you can
decide to test your application on an actual Android device. However, there are
many reasons why you might want to use an emulator: you probably don't own a
huge variety of Android devices, differing not only in physical size, but also
in the API version (Kit Kat, Lollipop, Marshmallow, just to name a few of the
most recent code-names). The package can be installed through the &lt;code&gt;sdkmanger&lt;/code&gt;
with the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager &lt;span class="s2"&gt;&amp;quot;emulator&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, we can add the emulator folder to the &lt;code&gt;PATH&lt;/code&gt; variable for easy access.
However, the Android SDK Tools provides a deprecated set of tools, &lt;code&gt;emulator&lt;/code&gt;
and &lt;code&gt;emulator-check&lt;/code&gt;, that would collide with the ones we have just installed.
To solve this problem we can rename the deprecated executables with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod -x &lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/emulator
chmod -x &lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/emulator-check
mv &lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/emulator &lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/emulator.dep
mv &lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/emulator-check &lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/tools/emulator-check.dep
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then add the others to the &lt;code&gt;PATH&lt;/code&gt; variables by appending the following lines
to the &lt;code&gt;~/.bashrc&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Android Emulator&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$ANDROID_HOME&lt;/span&gt;/emulator
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="gradle"&gt;Gradle&lt;/h2&gt;
&lt;p&gt;Let's now proceed to the installation of Gradle, a build automation system that
is also the default in Android Studio. Google has developed a dedicated Android
plugin to assist with the most common tasks. The ones that I personally tend to
run more frequently are collected in the following table&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;compileDebugJavaWithJavac&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles the debug version of the java sources. Useful to check for syntax errors while coding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;installDebug&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compiles and installs the debug version on all the devices discovered by the ADB.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs a lint on the sources, producing a report in &lt;code&gt;build/reports&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Gradle is quite popular so it should be available from your distro's official
repositories. On Ubuntu 17.04 though, a quite old version of Gradle is available
from them, so I would recommend that you add &lt;a href="https://launchpad.net/~cwchien/+archive/ubuntu/gradle"&gt;Cheng-Wei Chien's
PPA&lt;/a&gt; to your software
sources and install Gradle from there&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:cwchien/gradle
sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install gradle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gradle is quite a powerful tool, but you might find that it has a rather steep
learning curve to master all of its features, especially if you are not familiar
with Groovy. In this post we shall only scratch the very surface and look at
only the closures that we need for this project, as a discussion on Gradle
surely deserves a dedicated post on its own.&lt;/p&gt;
&lt;p&gt;Getting back on business, the installation of Gradle was the last step that we
needed to perform in order to set up the development environment, and we can now
move on to creating an Android project from scratch.&lt;/p&gt;
&lt;h1 id="creating-the-gradle-project"&gt;Creating the Gradle Project&lt;/h1&gt;
&lt;p&gt;The first thing to do is to create a Gradle project of Java type. This involves
setting up a directory structure in the project's parent folder and creating the
Gradle build script &lt;code&gt;build.gradle&lt;/code&gt;. With Gradle installed, these steps can be
automated with the
&lt;a href="https://docs.gradle.org/current/userguide/build_init_plugin.html"&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; task&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gradle init --type java-library
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are contributing to a project that is the work of many hands, it will
probably be the case that everybody is using the same build tools. As everybody
can have a different version of Gradle on their local machine, the Gradle
project recommends that one uses a
&lt;a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html"&gt;wrapper&lt;/a&gt; to
build a project, rather than invoke the local installation of Gradle directly.
By sharing the wrapper along with your project, every other developer working on
the same project will be able to use the same version of Gradle as everybody
else, thus getting rid of problems caused by switching between different
versions. Even though this is a sample project, we will nonetheless create and
use a Gradle wrapper to build our project. The previous command should have
created a &lt;code&gt;gradlew&lt;/code&gt; shell script in the project's folder. If not, run the
following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gradle wrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should also have a folder &lt;code&gt;src/&lt;/code&gt; containing all the sub-folders where Gradle
expects the sources and the resources that make up your project. But, most
importantly, you should also have the &lt;code&gt;build.gradle&lt;/code&gt; and &lt;code&gt;settings.gradle&lt;/code&gt; files
containing some sample build settings. This structure is slightly different from
the one generated by Android Studio, and documented on the &lt;a href="https://developer.android.com/studio/build/index.html"&gt;developer
portal&lt;/a&gt;, where you can
notice a nested Gradle project, with the topmost one used to import the actual
project as a module, and configure the global build settings. For the case at
hand, we could to without this nested structure and only define a single build
script, since our project is made up of only one module.&lt;/p&gt;
&lt;p&gt;The following is the content of the &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;buildscript&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;jcenter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;classpath&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;com.android.tools.build:gradle:2.3.3&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;com.android.application&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;compileSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
    &lt;span class="n"&gt;buildToolsVersion&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;26.0.1&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find a detailed explanation of the meaning of each closure in the
&lt;a href="https://developer.android.com/studio/build/index.html#top-level"&gt;Configure Your
Build&lt;/a&gt; page of
the Android Developer portal. Briefly, the &lt;code&gt;buildscript&lt;/code&gt; closure is used to
configure Gradle itself so that it knows where to find the Android-specific
Gradle tools that we want to use. We can then import the Android Gradle plugin
and use the extensions to the DSL that it provides to configure the
Android-specific build process. In this case we specify that the compilation SDK
version that we want to use is Level 23 (Marshmallow), and that we want to use
the version &lt;code&gt;26.0.1&lt;/code&gt; of the build tools.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gradle.properties&lt;/code&gt; file is used to configure the project-wide Gradle
settings, such as the Gradle daemon's maximum heap size. In fact, this is all we
will use it for in our case. Open it with your text editor and put the following
content in it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gradle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jvmargs&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;Xmx1536m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is our Gradle project created and configured! All the magic of the building
process is hidden from us by the Android Gradle plugin so that we don't have to
worry about anything else and just focus on our application code.&lt;/p&gt;
&lt;h1 id="writing-the-application"&gt;Writing the Application&lt;/h1&gt;
&lt;p&gt;Two essential ingredients for an Android application are the &lt;strong&gt;Main Activity&lt;/strong&gt;
and the &lt;a href="https://developer.android.com/guide/topics/manifest/manifest-intro.html"&gt;&lt;strong&gt;App
Manifest&lt;/strong&gt;&lt;/a&gt;.
Let's start with the latter first.&lt;/p&gt;
&lt;h2 id="the-application-manifest"&gt;The Application Manifest&lt;/h2&gt;
&lt;p&gt;The Android Application Manifest is an XML manifest file that is used to provide
the Android system with essential information of an application, like the name
of the Java package, the activities provided, the permissions required, the
minimum SDK version supported etc... . Within a Gradle project, this file must
be located in the &lt;code&gt;src/main&lt;/code&gt; folder and named rigorously &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.
In our case, this is what such manifest file would look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;manifest&lt;/span&gt; &lt;span class="na"&gt;xmlns:android&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;package&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.p403n1x87.androtest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;uses-sdk&lt;/span&gt;
    &lt;span class="na"&gt;android:minSdkVersion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;21&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:targetSdkVersion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;23&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;application&lt;/span&gt;
    &lt;span class="na"&gt;android:label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AndroTest&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@android:style/Theme.Material&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MainActivity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;intent-filter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;action&lt;/span&gt; &lt;span class="na"&gt;android:name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;category&lt;/span&gt; &lt;span class="na"&gt;android:name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;intent-filter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The structure of the Android Application Manifest file is described &lt;a href="https://developer.android.com/guide/topics/manifest/manifest-intro.html#filestruct"&gt;on the
developer
portal&lt;/a&gt;
in the form of a skeleton, as it is not based on any XML schema like DTD or XSD.&lt;/p&gt;
&lt;p&gt;The root element is &lt;code&gt;manifest&lt;/code&gt;, which accepts the &lt;code&gt;package&lt;/code&gt; attribute. Here we
specify the name of the Java package of our application. We also specify our
target API level to 23. The minimum level supported is set to 21 for reasons
that relate to the output of the &lt;code&gt;lint&lt;/code&gt; Android Gradle task that we will look at
later on. It is recommended that you set this attribute to a reasonable value.
For example, if you do not set it, Android will automatically add the legacy
overflow &lt;em&gt;three-dot&lt;/em&gt; button, even though there are no actions to show. Starting
from level 11, Android does not add this button by default.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;manifest&lt;/code&gt; element must contain a unique &lt;code&gt;application&lt;/code&gt; element that
describes our application in may aspects, from the theme to use, to the activity
content. In this case we set the application name to &lt;code&gt;AndroTest&lt;/code&gt; and the theme
to &lt;code&gt;Material&lt;/code&gt; and we expose only one activity, i.e. the &lt;code&gt;MainActivity&lt;/code&gt;, which is
the entry point of our application, and the one that would be fired up when we
launch it.&lt;/p&gt;
&lt;h2 id="the-main-activity"&gt;The Main Activity&lt;/h2&gt;
&lt;p&gt;This takes us now to the main activity, i.e. the Java class that contains the
code to be executed when our application is launched. Within a Gradle project,
the main Java code should reside in the &lt;code&gt;src/main/java&lt;/code&gt; folder. Since the
package name is &lt;code&gt;com.p403n1x87.androtest&lt;/code&gt;, the &lt;code&gt;MainActivity.java&lt;/code&gt; source file
should be created within the &lt;code&gt;src/main/java/com/p403n1x87/androtest&lt;/code&gt; folder.
Here is the code&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;
&lt;span class="normal"&gt;36&lt;/span&gt;
&lt;span class="normal"&gt;37&lt;/span&gt;
&lt;span class="normal"&gt;38&lt;/span&gt;
&lt;span class="normal"&gt;39&lt;/span&gt;
&lt;span class="normal"&gt;40&lt;/span&gt;
&lt;span class="normal"&gt;41&lt;/span&gt;
&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;
&lt;span class="normal"&gt;49&lt;/span&gt;
&lt;span class="normal"&gt;50&lt;/span&gt;
&lt;span class="normal"&gt;51&lt;/span&gt;
&lt;span class="normal"&gt;52&lt;/span&gt;
&lt;span class="normal"&gt;53&lt;/span&gt;
&lt;span class="normal"&gt;54&lt;/span&gt;
&lt;span class="normal"&gt;55&lt;/span&gt;
&lt;span class="normal"&gt;56&lt;/span&gt;
&lt;span class="normal"&gt;57&lt;/span&gt;
&lt;span class="normal"&gt;58&lt;/span&gt;
&lt;span class="normal"&gt;59&lt;/span&gt;
&lt;span class="normal"&gt;60&lt;/span&gt;
&lt;span class="normal"&gt;61&lt;/span&gt;
&lt;span class="normal"&gt;62&lt;/span&gt;
&lt;span class="normal"&gt;63&lt;/span&gt;
&lt;span class="normal"&gt;64&lt;/span&gt;
&lt;span class="normal"&gt;65&lt;/span&gt;
&lt;span class="normal"&gt;66&lt;/span&gt;
&lt;span class="normal"&gt;67&lt;/span&gt;
&lt;span class="normal"&gt;68&lt;/span&gt;
&lt;span class="normal"&gt;69&lt;/span&gt;
&lt;span class="normal"&gt;70&lt;/span&gt;
&lt;span class="normal"&gt;71&lt;/span&gt;
&lt;span class="normal"&gt;72&lt;/span&gt;
&lt;span class="normal"&gt;73&lt;/span&gt;
&lt;span class="normal"&gt;74&lt;/span&gt;
&lt;span class="normal"&gt;75&lt;/span&gt;
&lt;span class="normal"&gt;76&lt;/span&gt;
&lt;span class="normal"&gt;77&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.p403n1x87.androtest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.app.Activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.hardware.Sensor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.hardware.SensorEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.hardware.SensorEventListener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.hardware.SensorManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.ViewGroup.LayoutParams&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.TextView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.LinearLayout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;java.lang.Math.sqrt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SensorManager&lt;/span&gt; &lt;span class="n"&gt;mSensorManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Sensor&lt;/span&gt;        &lt;span class="n"&gt;mSensor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt;      &lt;span class="n"&gt;text&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;  &lt;span class="n"&gt;layoutMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@Override&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// UI&lt;/span&gt;
    &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;main_layout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="n"&gt;text&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutMain&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;layoutMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout_main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Sensors&lt;/span&gt;
    &lt;span class="n"&gt;mSensorManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;getSystemService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SENSOR_SERVICE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mSensorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultSensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_GRAVITY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gravSensors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mSensorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSensorList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_GRAVITY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nSensors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gravSensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Detected gravity sensors: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nSensors&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nSensors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;tvSensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="n"&gt;j&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;tvSensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLayoutParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LayoutParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;mSensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gravSensors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mSensorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;registerListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SensorEventListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onSensorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;SensorEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;tvSensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sensor %d: %f m/s^2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="nd"&gt;@Override&lt;/span&gt;
          &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onAccuracyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sensor&lt;/span&gt; &lt;span class="n"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;mSensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SensorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SENSOR_DELAY_NORMAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;layoutMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tvSensor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;We DO NOT have gravity! :(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The code is fairly simple and quite self-explanatory. We override the &lt;code&gt;onCreate&lt;/code&gt;
method of the &lt;code&gt;Activity&lt;/code&gt; class, from which &lt;code&gt;MainActivity&lt;/code&gt; inherits, to set up
the UI. We use a layout resource as a basis, which we then dynamically extend
with extra &lt;code&gt;TextView&lt;/code&gt; widgets to hold the value of each gravity sensor that gets
discovered at run-time.&lt;/p&gt;
&lt;h2 id="the-layout-resource"&gt;The Layout Resource&lt;/h2&gt;
&lt;p&gt;In this project we have a mixture of static layout resources and dynamic
creation of &lt;code&gt;TextView&lt;/code&gt; elements. This offers us the chance to see how to make
resources available to the Java code, i.e. by placing them in the place where
Gradle, and the Android Gradle plugin, would expect them. Files placed in the
&lt;code&gt;src/main/res&lt;/code&gt; folder are treated as resources and can be referenced in the way
described at the Android Developer portal. In the previous code block, on line
36 we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;main_layout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The expression &lt;code&gt;R.layout.main_layout&lt;/code&gt; refers to the resource &lt;code&gt;main_layout.xml&lt;/code&gt;
located in the &lt;code&gt;layout&lt;/code&gt; sub-folder of &lt;code&gt;src/main/res&lt;/code&gt;. The various grouping of
resources is detailed at the page &lt;a href="https://developer.android.com/guide/topics/resources/providing-resources.html"&gt;Providing
Resources&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Later on, in dealing with the output of the &lt;code&gt;lint&lt;/code&gt; task, we will have the chance
to look at the &lt;code&gt;strings.xml&lt;/code&gt; resources in the &lt;code&gt;values&lt;/code&gt; sub-folder. For the time
being, let's have a look at what the &lt;code&gt;main_layout.xml&lt;/code&gt; looks like in this case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;LinearLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;android:id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/layout_main&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;android:layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;android:layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;android:padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32px&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;android:gravity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
              &lt;span class="na"&gt;android:orientation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vertical&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;TextView&lt;/span&gt; &lt;span class="na"&gt;android:id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/text&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:paddingBottom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;12px&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gravity sensors&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class="c"&gt;  A new TextView element will be added programmatically for each on-board&lt;/span&gt;
&lt;span class="c"&gt;  gravity sensor detected.&lt;/span&gt;
&lt;span class="c"&gt;  --&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;LinearLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a rather simple layout. We create a vertical &lt;code&gt;LinearLayout&lt;/code&gt; container to
display a vertical stack of &lt;code&gt;TextView&lt;/code&gt; elements. The first one, statically
included in the XML resource file, will hold the counter of the discovered
gravity sensors. More &lt;code&gt;TextView&lt;/code&gt; elements are added at run-time, one for each of
the sensors, to display their updated value.&lt;/p&gt;
&lt;h1 id="running-the-application"&gt;Running the Application&lt;/h1&gt;
&lt;p&gt;Now that we have set up the Gradle project and coded our application, it is time
to build it and install it on an Android device to run it. In this section we
shall see how to invoke the Gradle &lt;code&gt;build&lt;/code&gt; task to generate the APK (the Android
Package Kit) package, and how to install it on our devices, being them either
virtual or physical, in two different ways. Finally, we will give a final touch
to our sample application by fixing a few of the issue reported by the &lt;code&gt;lint&lt;/code&gt;
task.&lt;/p&gt;
&lt;h2 id="building-with-gradle"&gt;Building with Gradle&lt;/h2&gt;
&lt;p&gt;The process of building an Android application involves many steps and tools. If
we rely on a Gradle project, as we have done in this case, and as it would be if
you were using Android Studio, all of the details of this process are hidden to
us. In a post where we are trying to make use of only simple tools, you may
think that Gradle would defeat the point. Whilst I'd agree with you, I also
believe that we will have to draw a line at some point, and Gradle feels like
the right place. If, at any point, you feel the need to manually build your
project, you can refer to these two references for more details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spin.atomicobject.com/2011/08/22/building-android-application-bundles-apks-by-hand/"&gt;Building Android Application Bundles (APKs) by Hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://czak.pl/2016/05/31/handbuilt-android-project.html"&gt;Jack, Jill &amp;amp; building Android apps by hand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This being said, let's see how to build our sample project with Gradle. We can
list all the available tasks with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./gradlew tasks --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Among all the tasks listed by the previous command, we should see the following
ones&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Build tasks&lt;/span&gt;
&lt;span class="gh"&gt;-----------&lt;/span&gt;
assemble - Assembles all variants of all applications and secondary packages.
assembleAndroidTest - Assembles all the Test applications.
assembleDebug - Assembles all Debug builds.
assembleRelease - Assembles all Release builds.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
clean - Deletes the build directory.
cleanBuildCache - Deletes the build cache directory.
compileDebugAndroidTestSources
compileDebugSources
compileDebugUnitTestSources
compileReleaseSources
compileReleaseUnitTestSources
mockableAndroidJar - Creates a version of android.jar that&amp;#39;s suitable for unit tests.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could decide to &lt;code&gt;assemble&lt;/code&gt; our project, or &lt;code&gt;build&lt;/code&gt; it in case we also wrote
tests and want them built too. As it doesn't make much of a difference in our
case, we can run the &lt;code&gt;build&lt;/code&gt; task with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./gradlew build
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; task actually does a bit more than assemble and execute tests. It
also runs the &lt;code&gt;lint&lt;/code&gt; task. More on this later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the build task was successful, you should now have the &lt;code&gt;androtest-debug.apk&lt;/code&gt;
into the &lt;code&gt;build/outputs/apk&lt;/code&gt; folder, ready to be deployed on an Android device.&lt;/p&gt;
&lt;h2 id="creating-a-virtual-device"&gt;Creating a Virtual Device&lt;/h2&gt;
&lt;p&gt;In case you want to install the application on a physical device, you can skip
this section and go straight to the next one. Under some circumstances, you
might want to test your application on diverse hardware settings, and the best
way is probably to make use of a &lt;em&gt;virtual device&lt;/em&gt;. If you have installed the
&lt;code&gt;emulator&lt;/code&gt; package as previously described, you can create a virtual machine
with the following commands. But first we need to install a &lt;em&gt;system image&lt;/em&gt;, for
example the &lt;strong&gt;Intel x86 Atom_64 System Image&lt;/strong&gt;. Since our application doesn't
make use of the Google APIs we can opt for the default image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sdkmanager &lt;span class="s2"&gt;&amp;quot;system-images;android-23;default;x86_64&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The download and installation might take some time, so just wait for
&lt;code&gt;sdkmanager&lt;/code&gt; to complete. You can then proceed to creating a virtual device with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;avdmanager create avd -n &lt;span class="nb"&gt;test&lt;/span&gt; -k &lt;span class="s2"&gt;&amp;quot;system-images;android-23;default;x86_64&amp;quot;&lt;/span&gt; -d &lt;span class="m"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a virtual device named &lt;code&gt;test&lt;/code&gt; with the system image that we
have just downloaded. The &lt;code&gt;-d&lt;/code&gt; switch specifies which device we want to emulate.
In this case the value 8 represents a "Nexus 5" device. A complete list of the
devices that can be emulated may be found with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;avdmanager list device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, to run the newly created virtual device we use the &lt;code&gt;emulator&lt;/code&gt; tool,
just like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;emulator @test -skin 768x1280
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;@test&lt;/code&gt; specified the name of the virtual device we want to run, and the
&lt;code&gt;-skin&lt;/code&gt; switch defines the resolution we want to run the emulator at. Note that
a bug in the &lt;code&gt;emulator&lt;/code&gt; tools prevents you from running this command from any
working directory. Instead, you need to navigate to &lt;code&gt;$ANDROID_HOME/emulator&lt;/code&gt; in
order to start it without errors.&lt;/p&gt;
&lt;p&gt;For more details on how to manage virtual devices, have a look at the
&lt;a href="https://developer.android.com/studio/command-line/avdmanager.html#global_options"&gt;&lt;code&gt;avdmanager&lt;/code&gt;&lt;/a&gt;
documentation page.&lt;/p&gt;
&lt;h2 id="installing-the-apk"&gt;Installing the APK&lt;/h2&gt;
&lt;p&gt;There are at least to ways of installing the APK to an Android device. One is
via a Gradle task, and the other is more manual and involves the Android Debug
Bridge tool &lt;code&gt;adb&lt;/code&gt;. Let's have a look at both.&lt;/p&gt;
&lt;p&gt;From the previous run of the &lt;code&gt;./gradlew tasks --all&lt;/code&gt;, you should have seen the
following tasks&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Install tasks&lt;/span&gt;
&lt;span class="gh"&gt;-------------&lt;/span&gt;
installDebug - Installs the Debug build.
installDebugAndroidTest - Installs the android (on device) tests for the Debug build.
uninstallAll - Uninstall all applications.
uninstallDebug - Uninstalls the Debug build.
uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.
uninstallRelease - Uninstalls the Release build.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;installDebug&lt;/code&gt; task will look for all the Android devices in debugging mode
connected to your machine and attempt to install the APK on &lt;em&gt;all&lt;/em&gt; of them. For
instance, if you have a physical device in debug mode connected to your
PC/laptop while also running a virtual device, this Gradle task will install the
APK on both of them.&lt;/p&gt;
&lt;p&gt;If you want to install the APK on only one of the currently connected devices,
you can do so with the &lt;code&gt;adb&lt;/code&gt; tool. First of all, determine the identifier of
each of the connected devices with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adb devices
List of devices attached
* daemon not running. starting it now at tcp:5037 *
* daemon started successfully *
05426e2409d30434    device
emulator-5554   device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The device with ID &lt;code&gt;05426e2409d30434&lt;/code&gt; is a physical Nexus 5 in debug mode
connected via USB to my laptop, while &lt;code&gt;emulator-5554&lt;/code&gt;, as the name indicates, is
a running instance of the &lt;code&gt;test&lt;/code&gt; virtual device we created before. We can
install the APK on e.g. the emulator with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adb -s &lt;span class="s2"&gt;&amp;quot;emulator-5554&amp;quot;&lt;/span&gt; install build/outputs/apk/androtest-debug.apk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will now be ready to be executed on the virtual device.&lt;/p&gt;
&lt;h2 id="the-lint-tasks"&gt;The lint tasks&lt;/h2&gt;
&lt;p&gt;If you have ever used Android Studio you might wonder if there is the chance to
get all the useful code analysis and hints that the IDE brings up while you code
your application. While this feature is probably not supported by the text
editor of your choice, we can remedy by using the lint tool provided by the
Android SDK. A convenient way to invoke it is through a dedicated Gradle task.
From the output of &lt;code&gt;./gradlew tasks --all&lt;/code&gt; you should also see the following
tasks&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Verification tasks&lt;/span&gt;
&lt;span class="gh"&gt;------------------&lt;/span&gt;
check - Runs all checks.
connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.
connectedCheck - Runs all device checks on currently connected devices.
connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.
deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.
deviceCheck - Runs all device checks using Device Providers and Test Servers.
lint - Runs lint on all variants.
lintDebug - Runs lint on the Debug build.
lintRelease - Runs lint on the Release build.
test - Run unit tests for all variants.
testDebugUnitTest - Run unit tests for the debug build.
testReleaseUnitTest - Run unit tests for the release build.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how we can invoke the lint tool in multiple ways. As we saw before, the
&lt;code&gt;build&lt;/code&gt; task, as opposed to &lt;code&gt;assemble&lt;/code&gt;, will also run the lint tool. But we can
also choose to run it as part of a full check with the &lt;code&gt;check&lt;/code&gt; task, or just on
its own, on every variant of our project or simply on the debug build. As an
example, let's run the &lt;code&gt;lint&lt;/code&gt; task with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./gradlew lint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output should contain something that looks like the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lint&lt;/span&gt;
&lt;span class="n"&gt;Ran&lt;/span&gt; &lt;span class="n"&gt;lint&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="n"&gt;issues&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;span class="n"&gt;Ran&lt;/span&gt; &lt;span class="n"&gt;lint&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="n"&gt;issues&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;span class="n"&gt;Wrote&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;///&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gabriele&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;androtest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reports&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;Wrote&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;///&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gabriele&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;androtest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reports&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;


&lt;span class="n"&gt;BUILD&lt;/span&gt; &lt;span class="n"&gt;SUCCESSFUL&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;actionable&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;executed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This tells us that the lint tool has found 13 issues on both the debug and the
release build of our project, and that a report is available as both an HTML and
an XML file in &lt;code&gt;build/reports&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's open the HTML report and have a look at the reported issues. As
predictable, the largest number of issues is about &lt;em&gt;internationalisation&lt;/em&gt;, as we
have used many hard-coded strings in our source code. So let's try to fix some
of these, starting from the &lt;code&gt;HardcodedText&lt;/code&gt; one. By clicking on it, we get sent
to a more detailed part of the page that suggests us to use a &lt;code&gt;@string&lt;/code&gt; resource
instead of the hard-coded string &lt;code&gt;Gravity sensors&lt;/code&gt;. Since our code will change
the string at run-time in any case, the simplest solution is to replace it with
an empty string. If we now run the lint task again, we should see only 12
issues. Good! :).&lt;/p&gt;
&lt;p&gt;Let's now tackle a couple of &lt;em&gt;TextView Internationalization&lt;/em&gt; issues. The first
one is about the string &lt;code&gt;"Detected gravity sensors: " +
Integer.toString(nSensors)&lt;/code&gt; that we have used in the &lt;code&gt;MainActivity.java&lt;/code&gt; source
file. The problem here is two-fold. We should use a resource string and favour
placeholders rather than concatenation. So let's create a &lt;a href="https://developer.android.com/guide/topics/resources/string-resource.html"&gt;string
resource&lt;/a&gt;
file. Recall from before that this should go in an XML file, say &lt;code&gt;strings.xml&lt;/code&gt;,
within the &lt;code&gt;src/main/res/values&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;string&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sensors_no&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Detected gravity sensors: %d&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now replace line 44 in &lt;code&gt;MainActivity.java&lt;/code&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sensors_no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nSensors&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the lint task again, and the count should now be down to only 9 issues. This
should give you the idea of how to continue fixing the remaining findings.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;In this post we saw that, if we want to develop Android applications by simply
relying on a text editor and some command line tools, the initial set up of the
development environment requires a few preliminary steps, some of which are
performed when you install Android Studio. However, some of the other steps need
to be performed regardless, with the only difference that, in Android Studio,
you would have a GUI to assist you. The bonus of going IDE-free, however, is in
the fact that we now know what operations are being performed by the IDE when,
e.g., we install an Android SDK that targets a certain API level.&lt;/p&gt;
&lt;p&gt;Creating a Gradle project is quite easy, and in this we are assisted by Gradle
itself. The Android Gradle plugin takes care of invoking the right tools to
perform the most common tasks, like building our project, or even installing it
on an Android device. One handy feature that we might miss out with a plain text
editor is the live linting of our code. However, at any stage of the
development, we can run the &lt;code&gt;lint&lt;/code&gt; Gradle task to generate a report with all the
issues that have been discovered within the whole project.&lt;/p&gt;
&lt;p&gt;This post should have also showed you that, whilst Android Studio is a very
useful tool, there is practically nothing that we would miss out by using the
command line tools of the SDK instead. Development might at first be less
smooth, and the learning curve steeper, but surely has its positives too.&lt;/p&gt;</content><category term="Programming"></category><category term="android"></category><category term="gradle"></category><category term="java"></category></entry><entry><title>A Gentle Introduction to IoT</title><link href="https://p403n1x87.github.io/a-gentle-introduction-to-iot.html" rel="alternate"></link><published>2017-07-31T19:30:15+01:00</published><updated>2017-07-31T19:30:15+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2017-07-31:/a-gentle-introduction-to-iot.html</id><summary type="html">&lt;p&gt;The IoT revolution has started. But what is it exactly? Is it hard to take part to it? In this post I present you with all the details of a very simple and almost inexpensive &lt;i&gt;Internet of Things&lt;/i&gt; project. Read through as we go from assembling the required hardware, to coding the software that will drive it, exploring some of the most modern free technologies that are on offer today. At the end we will be able to take control of some LEDs over the internet, from wherever we are. Consider this as a launch pad to more complex and exciting IoT projects.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#preamble"&gt;Preamble&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#whats-iot"&gt;What's IoT?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-project"&gt;The Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-hardware"&gt;The Hardware&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-gpio-pins"&gt;The GPIO Pins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-circuit"&gt;The Circuit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-software"&gt;The Software&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-rpi-python-module"&gt;The RPi Python Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-wsgi-specification"&gt;The WSGI Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-web-application"&gt;Writing the Web Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-apache"&gt;Configuring Apache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="preamble"&gt;Preamble&lt;/h1&gt;
&lt;p&gt;No, I'm afraid this post is not on how to build your army of toy soldiers. If
the disappointment hasn't stopped you from reading any further, what I will
discuss here is something simpler and more peaceful, involving general
electronics single board computers, LEDs, Python, web servers and web
applications. All in just one place!&lt;/p&gt;
&lt;p&gt;I will try to introduce the fundamental concepts of IoT by example, and I will
do so by sharing my recent hands-on experience with my first Raspberry Pi, and
how this has led me to get to know of fascinating technologies of the modern
era. If your main objective is still to build an army of toy soldiers, this is
definitely a first step (however you should consider using technology for better
purposes, really!).&lt;/p&gt;
&lt;p&gt;I will try not to give much for granted, but of course I will have to draw a
line at some point, or this post would have never been finished! The subject is
software, but it is also hardware, for the former would make little sense
without the latter.&lt;/p&gt;
&lt;p&gt;The approach will be very practical. We will start with a concrete problem, and
we shall see how to solve it, both from a hardware and a software perspective.&lt;/p&gt;
&lt;h2 id="whats-iot"&gt;What's IoT?&lt;/h2&gt;
&lt;p&gt;Can you eat it? Well, although your are free of munching on a breadboard if you
really want to, IoT, as you probably know already, stands for &lt;em&gt;Internet of
Things&lt;/em&gt;. This term is used to indicate the inter-networking of physical devices
(the &lt;em&gt;things&lt;/em&gt;) that are equipped with electronics, sensors, motors etc.. and
that communicate information with each other, sometimes taking actions based on
the received inputs. In this sense, every-day life devices, like the fridges or
the washing machines in our homes, or vending machines, or cars even, become
&lt;em&gt;smart&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Even though the first example of &lt;em&gt;smart things&lt;/em&gt; appeared in the 1982 (and you
can surely consider the toy army of Toy Story as an example of IoT in early
animation movies), it is around 2016 that the IoT has evolved greatly, and the
key aspect is the almost ubiquitous availability of wireless networks that allow
an increasing pool of diverse devices to communicate with one another.&lt;/p&gt;
&lt;p&gt;The IoT example of this post is somewhat a classic, but that will hopefully give
you a rough idea of what the IoT is also about, in case this is the first time
that you came across it. It is also quite simple and with a contained cost, but
nonetheless will spawn many interesting connections with some fascinating modern
technologies.&lt;/p&gt;
&lt;h2 id="the-project"&gt;The Project&lt;/h2&gt;
&lt;p&gt;So what is exactly the project described in this post about? The idea is to turn
some LEDs on and off by sending commands to a Raspberry Pi through a web page.
This might seem quite a trivial project, but it has given me the opportunity to
refresh some rusty knowledge of electronics that dated back to my undergraduate
years, as well as learn a great deal of new things from the software side too.&lt;/p&gt;
&lt;h1 id="the-hardware"&gt;The Hardware&lt;/h1&gt;
&lt;p&gt;In this first part I will describe all the hardware that is necessary for the
project. The main one is, I would say, a single-board computer like a Raspberry
Pi. In my case, I'm using a Raspberry Pi 3 Model B running the Raspbian OS. To
turn an LED on and off we will use one of the GPIO pins. For commodity, I will
also use a T-cobbler to connect all the GPIO pins on a breadboard, where the
rest of the circuit will be assembled. All that we still need are a couple of
jumper wires, a 220 Ω resistor and an LED of your favourite colour. To
summarise, here is the minimum required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1x Raspberry Pi&lt;/li&gt;
&lt;li&gt;1x breadboard&lt;/li&gt;
&lt;li&gt;1x T-cobbler and a bus cable (alternatively 2x male-to-female jumper wires)&lt;/li&gt;
&lt;li&gt;2x male-to-male jumper wires&lt;/li&gt;
&lt;li&gt;1x 220 Ω resistor&lt;/li&gt;
&lt;li&gt;1x LED (about 20 mA max current)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-gpio-pins"&gt;The GPIO Pins&lt;/h2&gt;
&lt;p&gt;Before looking at the circuit, it is probably best to mention a few facts about
the Raspberry Pi. In particular, the key part here is the set of GPIO pins that
it provides.&lt;/p&gt;
&lt;p&gt;The General Purpose Input-Output pins represent, as the name itself suggests, a
way to connect to external devices in order to send commands to and from the
Raspberry Pi. Some of these can be set to work as input or output, and can be
set either high (3.3 V or a logic 1) or low (0 V or a logic 0). Some pins can be
used together for other purposes, like communicating with another device through
a Serial Peripheral Interface (SPI), attaching LCD screen through the Display
Parallel Interface (DPI) etc.... Good references for the Raspberry Pi GPIO pins
are &lt;a href="https://pinout.xyz/"&gt;this website&lt;/a&gt; and the &lt;a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf"&gt;Broadcom BCM2835 ARM
Peripherals&lt;/a&gt;
manual.&lt;/p&gt;
&lt;p&gt;From the software side, the pins can be conveniently configured and controlled
by means of the RPi Python module. The thing to be mindful of is that there are
a bunch of different naming conventions for the pins on the Raspberry Pi. The
main ones, to use a terminology proper of the RPi module, is &lt;code&gt;BOARD&lt;/code&gt; and &lt;code&gt;BCM&lt;/code&gt;.
The former is a pin numbering that reflects the physical location of the pins on
the PCB. Pin number one is on the top-left corner and gives a 3.3 V fixed
output. Pin 2 is the one to its right, Pin 3 is the one below it, and so forth.
The latter is the numbering convention used in the Broadcom manual.&lt;/p&gt;
&lt;h2 id="the-circuit"&gt;The Circuit&lt;/h2&gt;
&lt;p&gt;Here is the schematic of the circuit that we want to build.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The circuit schematics" class="center-image" src="https://p403n1x87.github.io/images/iot/iot_schem.png"&gt;
&lt;em&gt;The schematic of the circuit, showing all the components used for this project.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As I have already mentioned, I prefer using a T-cobbler to connect all the GPIO
pins to the breadboard. In case you are not using one, this is what your
breadboard should look like this picture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The physical components" class="center-image" src="https://p403n1x87.github.io/images/iot/iot_bb.png"&gt;
&lt;em&gt;Another schematic representation of the circuit, showing how the components are physically connected with each other on the breadboard and the Raspberry Pi 3 Model B.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where did the magic number 220 Ω come from? The explanation is very simple and
essentially based on Ohm's law. Across a resistor &lt;span class="math"&gt;\(R\)&lt;/span&gt; to which a voltage
difference of &lt;span class="math"&gt;\(V\)&lt;/span&gt; is applied, the current flowing through it is given by&lt;/p&gt;
&lt;div class="math"&gt;$$I = \frac VR.$$&lt;/div&gt;
&lt;p&gt;An LED is a diode, i.e. a p-n junction, that is capable of emitting light. In
&lt;em&gt;forward bias&lt;/em&gt;, an order-one approximation of a diode is given by a small
resistor (order of 10 Ω) in series with a voltage generator (of about -0.67 V).
The manufacturer of the LED usually provides the maximum current that the diode
can withstand. In the case of common LEDs, this value is around 20 mA.
Considering that, when a GPIO pin is on, it will provide 3.3 V to our circuit,
in order not to burn our LED we need to use a resistor of resistance &lt;span class="math"&gt;\(R\)&lt;/span&gt; given
by the inequality&lt;/p&gt;
&lt;div class="math"&gt;$$\frac{3.3\text{ V} - 0.67\text{ V}} R \leq 20\text{ mA},$$&lt;/div&gt;
&lt;p&gt;which yields&lt;/p&gt;
&lt;div class="math"&gt;$$R\geq 130\ \Omega.$$&lt;/div&gt;
&lt;p&gt;For a better estimate, we can look at the V-I chart provided by the
manufacturer, which would probably give us a minimum value closer to 200 Ω.
Anything below and you might risk frying your LED. Using a way bigger resistor,
however, would starve it of current and it would not turn on at all. But with
220 Ω we should be perfectly fine (and safe!).&lt;/p&gt;
&lt;h1 id="the-software"&gt;The Software&lt;/h1&gt;
&lt;p&gt;Now that we have assembled the required hardware, it is time to see how to
control it. What we have done so far is to connect the Raspberry Pi with a very
simple one-wire device, i.e. an LED. The IoT is the possibility of controlling a
device from the internet, anywhere in the world, with the actual device that we
want to control possibly miles and miles away from us.&lt;/p&gt;
&lt;p&gt;What we now need is then a simple interface, accessible from the internet, that
allows us to control the LED. Let's see how to create such interface,
step-by-step.&lt;/p&gt;
&lt;p&gt;But before we go any further, let's have a look, like we did with the hardware
part, at all that we will need.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python (2.7 or later; note that the project has been tested with Python2.7
   and it might have to be adapted slightly to work with Python3)&lt;/li&gt;
&lt;li&gt;a web server e.g. Apache2&lt;/li&gt;
&lt;li&gt;a text editor of your choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yep, that's all.&lt;/p&gt;
&lt;h2 id="the-rpi-python-module"&gt;The RPi Python Module&lt;/h2&gt;
&lt;p&gt;On Raspbian there is a pretty simple way to control the GPIO pin that comes
already bundled with the OS. I'm talking about the
&lt;a href="https://pypi.python.org/pypi/RPi.GPIO"&gt;RPi&lt;/a&gt; Python module. For the simple task
that we want to achieve here, RPi exposes all the features that we need.
However, keep in mind that more advanced tasks, like real-time applications,
cannot be solved by this module. This is not just because it is a Python module,
but a "limitation" of any OS based on the Linux kernel, which is multitasking in
nature. This means that the kernel can decide on its own how to allocate
resources for all the running processes, potentially giving rise to jitter in
your applications.&lt;/p&gt;
&lt;p&gt;Another important limitation that should push you towards other approaches, like
&lt;a href="http://wiringpi.com/"&gt;wiringPi&lt;/a&gt;, is the lack of hardware PWM. PWM stands for
Pulse-Width Modulation and is a technique used to encode a message in a pulsing
signal. Some of the common uses are that of dimming an LED (recall that an LED
response is exponential, even though we treated it as linear in our first-order
approximation discussed above), or controlling a motor, but this is a topic that
would take us away from the main focus of this post, and it might be the subject
of a future one.&lt;/p&gt;
&lt;p&gt;Returning to our project, let's have a look at how to turn our LED on. Recall
from the schematic above that we are using the GPIO Pin 16 (according to the
Broadcom convention), which is the 36th physical pin on the GPIO.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;G&lt;/span&gt;     &lt;span class="c1"&gt;# Import the GPIO component from the RPi module&lt;/span&gt;

&lt;span class="n"&gt;LED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;                 &lt;span class="c1"&gt;# Define a constant with the pin number where the LED&lt;/span&gt;
                         &lt;span class="c1"&gt;# is connected&lt;/span&gt;

&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BOARD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# Set the pin numbering mode to the physical number&lt;/span&gt;

&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# Set the LED pin to output mode&lt;/span&gt;

&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;# Set the pin to high (3.3 V)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can type the above lines of Python code directly into the Python interpreter.
To turn the LED off we can either set the value on the pin 36 back to 0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or clean up the GPIO configuration with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we'll ever want to use more than just one LED on our breadboard, we can
encapsulate most of the above code inside a Python class so that it can be
reused instead of having to type it every time with setup a new LED. A
minimalist Python class that would represent a physical LED would be something
like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# File: led.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;G&lt;/span&gt;

&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BOARD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nd"&gt;@property&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nd"&gt;@state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our code for turning an LED on and off would then reduce to the following few
lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;led&lt;/span&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="n"&gt;led_red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;led_red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;led_red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The extra method &lt;code&gt;toggle&lt;/code&gt; can be used, as the name suggests, to toggle the LED
state from on to off and vice-versa. In the above example we could then replace
both &lt;code&gt;led_red.on&lt;/code&gt; and &lt;code&gt;led_red.off()&lt;/code&gt; by &lt;code&gt;led_red.toggle()&lt;/code&gt;. The property
&lt;code&gt;state&lt;/code&gt; is used to get the state of the LED as a Boolean value (&lt;code&gt;True&lt;/code&gt; for on
and &lt;code&gt;False&lt;/code&gt; for off), and it can also be used to set it. For instance, something
like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;led_red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;would turn the LED on, since &lt;code&gt;[1]&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; when converted to a
Boolean. Analogously, the following line of code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;led_red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;would turn the LED off, since &lt;code&gt;bool({}) = False&lt;/code&gt; in Python.&lt;/p&gt;
&lt;p&gt;Sweet! We now know how to control our LED with code and all that's left to do is
build a nice web interface that will execute this code on demand.&lt;/p&gt;
&lt;h2 id="the-wsgi-specification"&gt;The WSGI Specification&lt;/h2&gt;
&lt;p&gt;Given that we already have some code in Python to control our LED, it would be
good if the web interface could use that code directly. Is this possible? The
(short) answer is &lt;em&gt;yes&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;A more articulated answer to the above question leads us into the realm of the
Web Server Gateway Interface specification, or WSGI for short. It is a universal
specification that was born out of the necessity of putting some order among all
the Python frameworks for developing web applications. Before the specification,
each of said frameworks would be compatible with just a few web servers.
Choosing one of them would then restrict your choice of a web server to go with
it, and vice-versa. To overcome this limitation, the WSGI specification was
proposed in the &lt;a href="https://www.python.org/dev/peps/pep-0333/"&gt;PEP 333&lt;/a&gt;, which
dates back ton 2003. The technical details can be found in the linked page. Here
we just limit ourself to the essential details of the specification that will
allow us to write a simple web application to control the LED over the internet.&lt;/p&gt;
&lt;p&gt;In very simple terms, a Python web application consists of a &lt;em&gt;bootstrap
callable&lt;/em&gt; object that is called by the web server. The python code contained in
the callable is executed, and the web server expects a response consisting of a
code (200 for OK, 403 for Forbidden, 404 for Not Found etc...) and a stream of
bytes (usually the HTML code to be rendered by the browser). A callable can be
any Python object that exposes a &lt;code&gt;__call__&lt;/code&gt; function like, e.g., classes and
functions.&lt;/p&gt;
&lt;p&gt;My favourite web server is Apache2 and it will be the one that I will discuss in
this post. Its functionalities can be extended with modules, and the
&lt;a href="https://modwsgi.readthedocs.io/en/develop/"&gt;mod_wsgi&lt;/a&gt; project provides a
WSGI-compliant module for Apache. The documentation is very detailed and covers
all the aspects, from the installation to the configuration and debugging
techniques.&lt;/p&gt;
&lt;p&gt;Regarding the installation process, this can be carried out in two modes. Either
on the Apache-side, or on the Python-side. If you are into the IoT, chances are
you will have your web server running on a Raspberry Pi. For this reason, I will
discuss how to install the mod_wsgi module for the Apache web server. On
Raspbian, this can be done with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install libapache2-mod-wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation, the module should already be enabled. If this isn't the
case, you can enable it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo a2enmod wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="writing-the-web-application"&gt;Writing the Web Application&lt;/h2&gt;
&lt;p&gt;The next steps are to actually write our web application and configure Apache to
run it when a request comes in. In the configuration process we will specify our
bootstrap Python script. By default, Apache expects to find a callable object
inside it with the name &lt;code&gt;application&lt;/code&gt;. The simplest thing that we could do is
then to create a Python script and define a function with such a name. The code
of our application would then be contained in this function, or called by it, in
case we decide for a more modular approach.&lt;/p&gt;
&lt;p&gt;In case things would go wrong while we develop our web application, we might
want to be able to have a look at the Python stack trace to see where the
problems are. Normally we would have to look in the Apache error log (usually in
&lt;code&gt;/var/log/apache2/error.log&lt;/code&gt;). However, we can make use of a middleware from the
&lt;a href="https://paste.readthedocs.io/en/latest/"&gt;paste&lt;/a&gt; Python package, which is
specifically designed for WSGI applications. Our bootstrap script will then look
like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# File: bootstrap.wsgi&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;index&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;     &lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;paste.exceptions.errormiddleware&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ErrorMiddleware&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ErrorMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two lines are necessary if we want to be able to import modules and
packages that are in the same folder as the bootstrap script.&lt;/p&gt;
&lt;p&gt;We then import the class &lt;code&gt;Index&lt;/code&gt; from the &lt;code&gt;index&lt;/code&gt; module. This is just a design
choice. The bootstrap script contains the essential code to get us to the main
page (by means of the &lt;code&gt;Index&lt;/code&gt; class), and returns us the full stack trace in
case of errors (by means of the &lt;code&gt;ErrorMiddleware&lt;/code&gt; class from the paste package).
To make sense of the rest of the code, have a look at the already referenced
documentation of the &lt;code&gt;mod_wsgi&lt;/code&gt; module for Apache2.&lt;/p&gt;
&lt;p&gt;The core code of our application is contained in the &lt;code&gt;Index&lt;/code&gt; class from the
&lt;code&gt;index&lt;/code&gt; module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# File index.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;led&lt;/span&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt;

&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toggle&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, this module looks more like a view rather than a controller, as the
actual code for controlling the LED is buried in the &lt;code&gt;led&lt;/code&gt; module that we have
analysed previously. The &lt;code&gt;util.py&lt;/code&gt; module contains some helper functions to
conveniently deal with HTML templates and query strings. We refrain from showing
the code in this post, but you can find it in the &lt;a href="https://github.com/P403n1x87/led_app"&gt;dedicated GitHub
repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The HTML template contained in the &lt;code&gt;index.html&lt;/code&gt; file is very simple and looks
like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;theme-color&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#666666&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;led_app/led.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?action=toggle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button {state}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The body is essentially just a link that executes a request with the parameter
&lt;code&gt;action&lt;/code&gt; set to &lt;code&gt;toggle&lt;/code&gt;, containing a placeholder &lt;code&gt;div&lt;/code&gt; element. The
look-and-feel of a 3D button is then provided by the classes contained in the
linked stylesheet, which you can find in the GitHub repository. Note how we use
the &lt;code&gt;{state}&lt;/code&gt; placeholder in the class attribute of the &lt;code&gt;div&lt;/code&gt; element. This
allows us setting the button appearance according to the LED current state. In
the stylesheet we have two classes, &lt;code&gt;.on&lt;/code&gt; and &lt;code&gt;.off&lt;/code&gt;, the former giving a bright
red colour to the button, while the latter giving a darker shade. The value is
passed by the line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the static method &lt;code&gt;main&lt;/code&gt; of the &lt;code&gt;Index&lt;/code&gt; class of &lt;code&gt;index.py&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="configuring-apache"&gt;Configuring Apache&lt;/h2&gt;
&lt;p&gt;We are almost ready to start playing with our LED over the internet. The last
step is to put our application up and running on the Apache web server. To this
end there is a tiny bit of configuration that we need to do. We can start by
making a copy of the default web site Apache2 comes with. On Raspbian, this is
located in &lt;code&gt;/etc/apache2/sites-available&lt;/code&gt; and is contained in the
&lt;code&gt;000-default.conf&lt;/code&gt; configuration file. Make a copy of this file in, say,
&lt;code&gt;led.conf&lt;/code&gt; and modify it to look like the following one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# File: led.conf&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;ServerAdmin&lt;/span&gt; webmaster@localhost

  &lt;span class="c"&gt;# Required by static data storage access (e.g. css files)&lt;/span&gt;
  &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/home/pi/Projects/www&lt;/span&gt;

  &lt;span class="nb"&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/error.log
  &lt;span class="nb"&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/access.log combined

  &lt;span class="c"&gt;# WSGI Configuration&lt;/span&gt;
  &lt;span class="nb"&gt;WSGIScriptAlias&lt;/span&gt; &lt;span class="sx"&gt;/led&lt;/span&gt; &lt;span class="sx"&gt;/home/pi/Projects/www/led_app/bootstrap.wsgi&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/home/pi/Projects/www/led_app&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;Require&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; granted
  &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even though we are implementing a WSGI application, the &lt;code&gt;DocumentRoot
/home/pi/Projects/www&lt;/code&gt; is needed because we are importing a css file in
&lt;code&gt;index.html&lt;/code&gt;. The above configuration file assumes that the web application
resides in the &lt;code&gt;/home/pi/Projects/www/led_app&lt;/code&gt; folder. This way, static files
can be accessed with a relative path referring to the parent folder
&lt;code&gt;/home/pi/Projects/www&lt;/code&gt;. This explains why we are importing the &lt;code&gt;led.css&lt;/code&gt; file
as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;led_app/led.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The section below the &lt;code&gt;# WSGI Configuration&lt;/code&gt; comment is the WSGI part of the
configuration. The first line of this section tells Apache which script to use
to bootstrap the web application. This is the script that is assumed to contain
the callable object named &lt;code&gt;application&lt;/code&gt;. The rest of the WSGI configuration
section is required to set the rights to read the bootstrap and the python
scripts contained in the web application folder.&lt;/p&gt;
&lt;p&gt;That's it! All we have to do now is deactivate any other website on port 80 with
&lt;code&gt;a2dissite&lt;/code&gt; (this is only required if the web sites are not named), and enable
&lt;code&gt;led.conf&lt;/code&gt; with &lt;code&gt;a2ensite led.conf&lt;/code&gt;. Restart the Apache2 web server with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and point the browser on any device that is on the same local network as the Pi
to its local IP address, append '/led' to it to start the web application (e.g.
&lt;code&gt;http://192.168.0.203/led&lt;/code&gt;) and you should now be in the web application, with a
red button that will now allow you to control the LED state over the LAN.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The final look of the web application" class="center-image" src="https://p403n1x87.github.io/images/iot/website.png"&gt;
&lt;em&gt;The final look of the web application. The red button in the middle is used to toggle the LED state.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are behind a router, of course you will need to forward the port 80 to
the Pi's local address before you could be able to access your web application
from the internet, outside of your local network. In this case you will have to
use the router's public IP instead of the local IP.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;We have come to the end of this post on a simple IoT project. Its main purpose,
like most of the other posts in this blog, is two-fold. On one hand, it is a way
for me to take notes of new things that I have discovered and that I can later
come back to if I need to. All the information gathered from the cited sources
is gathered in a single place, which makes it more convenient than having to go
through them separately. On the other hand, it is a way to share my experience
with others, in the hope that it could be useful somehow. Even though the
project in it self, as I have remarked many times now, is quite simple, the post
includes references to many topics, e.g. electronics, programming, web servers
and applications, and it shows you how all these different aspects can be
organically combined together to create something.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="IoT"></category><category term="raspberry pi"></category><category term="wsgi"></category><category term="electronics"></category></entry><entry><title>Prime Numbers, Algorithms and Computer Architectures</title><link href="https://p403n1x87.github.io/prime-numbers-algorithms-and-computer-architectures.html" rel="alternate"></link><published>2017-03-07T00:15:00+01:00</published><updated>2017-03-07T00:15:00+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2017-03-07:/prime-numbers-algorithms-and-computer-architectures.html</id><summary type="html">&lt;p&gt;What does the principle of locality of reference have to do with prime numbers? This is what we will discover in this post. We will use the segmented version of the Sieve of Eratosthenes to see how hardware specifications can (read &lt;em&gt;should&lt;/em&gt;) be used to fix design parameters for our routines.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#counting-primes"&gt;Counting Primes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#segmented-sieve"&gt;Segmented Sieve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;A natural number &lt;span class="math"&gt;\(p\in\mathbb N\)&lt;/span&gt; is said to be &lt;em&gt;prime&lt;/em&gt; if its only divisors are 1 and &lt;span class="math"&gt;\(p\)&lt;/span&gt; itself. Any other number that does not have this property is sometimes called &lt;em&gt;composite&lt;/em&gt;. The discovery that there are infinitely many prime numbers dates back to c. 300 BC and is due to Euclid. His argument by contradiction is very simple: suppose that, indeed, there are only finitely many primes, say &lt;span class="math"&gt;\(p_1,\ldots,p_n\)&lt;/span&gt;. The natural number&lt;/p&gt;
&lt;div class="math"&gt;$$m=p_1p_2\cdots p_n + 1$$&lt;/div&gt;
&lt;p&gt;is larger than and evidently not divisible by any of the primes by construction, and therefore &lt;span class="math"&gt;\(m\)&lt;/span&gt; must be prime. However, being larger than any of the &lt;span class="math"&gt;\(p_k\)&lt;/span&gt;s, &lt;span class="math"&gt;\(m\)&lt;/span&gt; cannot be one of the finitely many primes, thus reaching to a contradiction.&lt;/p&gt;
&lt;p&gt;Prime numbers play a fundamental role in &lt;em&gt;Number Theory&lt;/em&gt;, a branch of Mathematics that deals with the properties of the natural numbers. Everybody gets to know about the prime factorisation of the natural numbers, a result so important that has been given the name of &lt;em&gt;Fundamental Theorem of Arithmetic&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="counting-primes"&gt;Counting Primes&lt;/h1&gt;
&lt;p&gt;Even though we saw that prime numbers are infinite, one might still want to know how many prime numbers are there within a certain upper bound. As numbers become bigger, the help of a calculator becomes crucial to tackle this problem and therefore it makes sense to think of algorithms that would get us to the answer efficiently.&lt;/p&gt;
&lt;p&gt;The fastest way to count all the primes less than a given upper bound &lt;span class="math"&gt;\(n\)&lt;/span&gt; is by means of an ancient algorithm known as the &lt;em&gt;Sieve of Eratosthenes&lt;/em&gt;. The idea is to start with the sequence of all the numbers from 0 up to &lt;span class="math"&gt;\(n\)&lt;/span&gt; and discard/mark the composite numbers as they are discovered. By definition, 0 and 1 are not prime, so they are removed. The number 2 is prime, but all its multiples are not, so we proceed by removing all the multiples of 2. We keep the first number that remains after 2, 3 in this case, and proceed to remove its multiples (starting from its square, since smaller multiples have already been removed at the previous steps). The process is repeated until it is no longer possible to proceed beyond the assigned bound &lt;span class="math"&gt;\(n\)&lt;/span&gt;. It is clear that it is enough to get up to at most &lt;span class="math"&gt;\(\lceil\sqrt n\rceil\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The following is a simple implementation in C++.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Sieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Sieve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_primes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_primes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Sieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;There are &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; primes between 0 and &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#ifdef VERBOSE&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A vector of booleans is implemented in C++ by an arry of bits instead of single bytes. Apart from turning all the possible complier optimisations, at the hardware level, this more compact data structure is more cache-friendly. Here is a first link between a software implementation of a prime search and the computer architecture the code runs on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With an input of the order of &lt;span class="math"&gt;\(10^6\)&lt;/span&gt; the sieve is still quite fast. However the memory requirements are substantial: up to &lt;span class="math"&gt;\(10^9\)&lt;/span&gt; we are able to still use integers, but the memory consumption is of the order of the GB. The amount of memory on the system then can pose a serious limitation to the input parameter.&lt;/p&gt;
&lt;h1 id="segmented-sieve"&gt;Segmented Sieve&lt;/h1&gt;
&lt;p&gt;If we want to list and/or count all the primes between two given (and possibly quite large) integers, we need a &lt;em&gt;Segmented Sieve&lt;/em&gt;. If we are interested in all the primes between &lt;span class="math"&gt;\(a\)&lt;/span&gt; and &lt;span class="math"&gt;\(b\)&lt;/span&gt; we could, in principle, use the sieve of Eratosthenes to find all the primes up to &lt;span class="math"&gt;\(b\)&lt;/span&gt; and then list/count all the primes larger than &lt;span class="math"&gt;\(a\)&lt;/span&gt;. But with &lt;span class="math"&gt;\(b\)&lt;/span&gt; of the order, say, &lt;span class="math"&gt;\(10^{15}\)&lt;/span&gt;, a lot of memory is required to hold the result. Instead we can split the interval &lt;span class="math"&gt;\([a,b]\)&lt;/span&gt; into chunks and process them separately.&lt;/p&gt;
&lt;p&gt;The two main questions that we need to answer are: how do we adapt the sieve algorithm to start from &lt;span class="math"&gt;\(a\)&lt;/span&gt; rather than 0, and how do we fix the chunk size. Let us deal with the latter question first. The reason why we need a segmented sieve in the first place is because of memory limitations. So an upper bound for the chunck size is given by the available memory. However, for large values of the inputs, the sieve might need to jump to memory location which are further apart. But how do we quantify this "further apart"? The answer, again, is in the system architecture, which quite likely include a system of cache memory. In order not to violate the locality principle we should choose a chunk size which is comparable to the cache size. Assuming this to be of the order of the MB, and recalling that &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; is an array of bits, a possible chunk size is of the order of &lt;span class="math"&gt;\(10^7\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Coming to the question of how to implemente a segmented sieve, all we need to do is mark/remove all the composite number in range. Of course we would need to start by removing all the even numbers, then all the multiples of 3, then of 5 and so on. Therefore we still need the knowledge of the primes starting from 2 and going above. But how much above? Since our upper limit is &lt;span class="math"&gt;\(b\)&lt;/span&gt;, we need all the prime numbers up to &lt;span class="math"&gt;\(\lceil\sqrt b\rceil\)&lt;/span&gt;, which can be obtained with the standard sieve discussed earlier. These prime numbers can then be used to discover all the primes in the range &lt;span class="math"&gt;\([a,b]\)&lt;/span&gt;. We start by removing the first even number greater than or equal to &lt;span class="math"&gt;\(a\)&lt;/span&gt;, together with all the numbers obtained by repeatedly adding 2 to it until we are out of bound. More generally, to find the first multiple of the prime &lt;span class="math"&gt;\(p\)&lt;/span&gt; in &lt;span class="math"&gt;\([a,b]\)&lt;/span&gt; we use the formula&lt;/p&gt;
&lt;div class="math"&gt;$$s = \left\lceil\frac ap\right\rceil\cdot p$$&lt;/div&gt;
&lt;p&gt;However, recall that, for the standard sieve we really have to start from &lt;span class="math"&gt;\(p^2\)&lt;/span&gt;, since lower multiples of &lt;span class="math"&gt;\(p\)&lt;/span&gt; have already been removed at the previous iteration. Therefore, as our starting point we pick the &lt;em&gt;maximum&lt;/em&gt; between &lt;span class="math"&gt;\(s\)&lt;/span&gt; and &lt;span class="math"&gt;\(p^2\)&lt;/span&gt; (actually between &lt;span class="math"&gt;\(\lceil a/p\rceil\)&lt;/span&gt; and &lt;span class="math"&gt;\(p\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;The following is a simple implementation of the Segmented Sieve in C++.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define CHUNK 10000000 &lt;/span&gt;&lt;span class="c1"&gt;// 10e7&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SSieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Sieve&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Sieve&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Segmented Sieve&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// primes in each segment&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Bounds&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// Cached primes count&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;seg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// Current segment&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Total numbers in interval&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;max_seg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Total number of segments&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;do_segment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Do not regenerate the current segment&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_seg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;seg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Determine segment bounds&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHUNK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHUNK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHUNK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Allocate the new segmented sieve&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Remove composite numbers in segment&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;get_primes&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;//{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;SSieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// The standard sieve&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;max_seg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHUNK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHUNK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;SSieve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max_seg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;do_segment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;p&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Keep track of the number of primes in segments&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// This is used by SSieve::get to retrieve the primes&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Determine which segment the requested prime belongs to&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Reconstruct the segmented sieve if necessary&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;do_segment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Translate into the actual prime&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;seg_c&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ssieve&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHUNK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be tested with a slightly modified &lt;code&gt;main&lt;/code&gt; procedure, for example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;SSieve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SSieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;There are &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; primes between &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; and &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#ifdef VERBOSE&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Programming"></category><category term="c++"></category><category term="number theory"></category><category term="optimisation"></category></entry><entry><title>Getting Started with x86-64 Assembly on Linux</title><link href="https://p403n1x87.github.io/getting-started-with-x86-64-assembly-on-linux.html" rel="alternate"></link><published>2016-08-10T15:48:37+01:00</published><updated>2016-08-10T15:48:37+01:00</updated><author><name>Gabriele N. Tornetta</name></author><id>tag:p403n1x87.github.io,2016-08-10:/getting-started-with-x86-64-assembly-on-linux.html</id><summary type="html">&lt;p&gt;You have experience of x86 assembly and you wonder what the fundamental architectural differences with the 64 bit Intel architecture are? Then this post might be what you are looking for. Here we'll see how to use the Netwide Assembler (NASM) to write a simple Hello World application in x86_64 assembly. Along the way, we will also have the chance to see how to use some standard tools to optimise the final executable by stripping out unnecessary debug symbols.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hello-syscalls"&gt;Hello Syscalls!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hello-libc"&gt;Hello libc!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;In this post we will learn how to assemble and link a simple "Hello World"
application written in x86-64 assembly for the Linux operating system. If you
have experience with Intel IA-32 assembly and you want to quickly get adjusted
to the x86-64 world then this post is for you. If you're trying to learn the
assembly language from scratch then I'm afraid this post is not for you. There
are many great resources online on 32-bit assembly. One of my favourite
documents is Paul Carter's PC Assembly Language, which I highly recommend if
you're moving your first steps into the assembly language. If you then decide to
come back to this post, you should be able to read it with no problems, since
the tools that I will employ here are the same used in Carter's book.&lt;/p&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;This post is organised as follows. In the next section, I gather some details
about the tools that we will use to code, assemble, link and execute the
applications. As already mentioned above, most of the tools are the same as
those used in Carter's book. Our assembler (and hence the syntax) will be NASM.
I will make use of two linkers, &lt;code&gt;ld&lt;/code&gt; and the one that comes with &lt;code&gt;gcc&lt;/code&gt;, the GNU
C Compiler, for reasons that will be explained later. The first x64 application
that we will code will give us the chance to get familiar with the new system
calls and how they differ from the 32-bit architecture. With the second one we
will make use of the Standard C Library. Both examples will give us the chance
to explore the x86-64 calling convention as set out in the &lt;a href="http://www.x86-64.org/documentation/abi.pdf"&gt;System V Application
Binary Interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All the code shown in this post will also be available from the &lt;a href="https://github.com/P403n1x87/asm/tree/master/hello64"&gt;dedicated asm
GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="tools"&gt;Tools&lt;/h1&gt;
&lt;p&gt;The Netwide Assembler is arguably the most popular assembler for the Linux
Operating System and it is an open-source project. Its documentation is nicely
written and explains all the features of the language and of the (dis)assembler.
This post will try to be as much self-contained as possible, but whenever you
feel the need to explore something a bit more, the NASM documentation will
probably be the right place. To assemble a 64-bit application we will need to
use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nasm -f elf64 -o myapp.o myapp.asm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The flag &lt;code&gt;-f elf64&lt;/code&gt; instructs NASM that we want to create a 64-bit ELF object
file. The flag &lt;code&gt;-o myapp.o&lt;/code&gt; tells the assembler that we want the output object
file to be &lt;code&gt;myapp.o&lt;/code&gt; in the current directory, whereas &lt;code&gt;myapp.asm&lt;/code&gt; specifies the
name of the source file containing the NASM code to be assembled.&lt;/p&gt;
&lt;p&gt;When an application calls functions from shared libraries it is necessary to
&lt;em&gt;link&lt;/em&gt; our object file to them so that it knows where to find them. Even if we
are not using any external libraries, we still need to invoke the linker in
order to obtain a valid executable file. The typical usage of &lt;code&gt;ld&lt;/code&gt; that we will
encounter in this post is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ld -o myapp.o myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is enough to produce a valid executable when we are not linking our object
file &lt;code&gt;myapp.o&lt;/code&gt; against any external shared library or any other object file.
Occasionally, depending on your distribution, you will have to specify which
interpreter you want to use. This is a library which, for ELF executables, acts
as a loader. It loads the application in memory, as well as the required linked
shared libraries. On Ubuntu 16.04, the right 64-bit interpreter is at
&lt;code&gt;/lib64/ld-linux-x86-64.so.2&lt;/code&gt; and therefore my invocation of &lt;code&gt;ld&lt;/code&gt; will look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ld -o myapp myapp.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some external shared libraries are designed to work with C. It is then advisable
to include a &lt;code&gt;main&lt;/code&gt; function in the assembly source code since the Standard C
Library will take care of some essential cleanup steps when the execution
returns from it. Cases where one might want to opt for this approach are when
the application works with file descriptors and/or spawns child processes. We
will see an example of this situation in a future tutorial on assembly and Gtk+.
For the time being, we shall limit ourselves to see how to use the GNU C
Compiler to link our object file with other object files (and in particular with
&lt;code&gt;libc&lt;/code&gt;). The typical usage of &lt;code&gt;gcc&lt;/code&gt; will be something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc -o myapp.o myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is very much similar to &lt;code&gt;ld&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="hello-syscalls"&gt;Hello Syscalls!&lt;/h1&gt;
&lt;p&gt;In this first example we will make use of the Linux system calls to print the
string &lt;code&gt;Hello World!&lt;/code&gt; to the screen. Here is where we encounter a major
difference between the 32-bit and the 64-bit Linux world.&lt;/p&gt;
&lt;p&gt;But before we get to that, let's have a look at what is probably the most
important difference between the 32-bit and the 64-bit architecture: the
registers. The number of the general purpose registers (GPRs for short) has
doubled and now have a maximum size of ... well ... 64-bit. The old &lt;code&gt;EAX&lt;/code&gt;,
&lt;code&gt;EBX&lt;/code&gt;, &lt;code&gt;ECX&lt;/code&gt; etc... are now the low 32-bit of the larger &lt;code&gt;RAX&lt;/code&gt;, &lt;code&gt;RBX&lt;/code&gt;, &lt;code&gt;RCX&lt;/code&gt;
etc... respectively, while the new 8 GPRs are named &lt;code&gt;R8&lt;/code&gt; to &lt;code&gt;R15&lt;/code&gt;. The prefix
&lt;code&gt;R&lt;/code&gt; stands for, surprise, surprise, &lt;em&gt;register&lt;/em&gt;. This seems like a sensible
decision, since this is in line with many other CPU manufacturers. Further
details can be found in &lt;a href="http://www.nasm.us/doc/nasmdo11.html"&gt;Chapter 11&lt;/a&gt; of
the NASM documentation and in &lt;a href="https://software.intel.com/sites/default/files/m/d/4/1/d/8/Introduction_to_x64_Assembly.pdf"&gt;this Intel
white&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's now move back to system calls. Unix systems and derivatives do not make
use of software interrupts, with the only exception of &lt;code&gt;INT 0x80&lt;/code&gt;, which on
32-bit systems is used to make system calls. A system call is a way to request a
service from the kernel of the operating system. Most C programmers don't need
to worry about them, as the Standard C Library provides wrappers around them.
The x86_64 architecture introduced the dedicated instruction &lt;code&gt;syscall&lt;/code&gt; in order
to make system calls. You can still use interrupts to make system calls, but
&lt;code&gt;syscall&lt;/code&gt; will be faster as it does not access the interrupt descriptor table.&lt;/p&gt;
&lt;p&gt;The purpose of this section is to explore this new opcode with an example.
Without further ado, let's dive into some assembly code. The following is the
content of my &lt;code&gt;hello64.asm&lt;/code&gt; file.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;global &lt;/span&gt;&lt;span class="nv"&gt;_start&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; CONSTANTS&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;SYS_WRITE&lt;/span&gt;&lt;span class="kd"&gt;   equ&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="no"&gt;SYS_EXIT&lt;/span&gt;&lt;span class="kd"&gt;    equ&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="kd"&gt;      equ&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt;           &lt;span class="nv"&gt;db&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;; char *&lt;/span&gt;
&lt;span class="no"&gt;hello_len&lt;/span&gt;&lt;span class="kd"&gt;       equ&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;                 &lt;span class="c1"&gt;; size_t&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Code goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.text&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;
    &lt;span class="c1"&gt;; syscall(SYS_WRITE, STDOUT, hello, hello_len);&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;SYS_WRITE&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;STDOUT&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello_len&lt;/span&gt;
    &lt;span class="nf"&gt;syscall&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt;    &lt;span class="nb"&gt;rax&lt;/span&gt;

    &lt;span class="c1"&gt;; syscall(SYS_EXIT, &amp;lt;sys_write return value&amp;gt; - hello_len);&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;
    &lt;span class="nf"&gt;sub&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello_len&lt;/span&gt;
    &lt;span class="nf"&gt;syscall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;hello64.asm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lines 1, 13, 20 and 22 are part of the skeleton of any NASM source code. With
line 1 we export the symbol &lt;code&gt;_start&lt;/code&gt;, which defines the entry point for the
application, i.e. the point in where the execution starts from. The actual
symbol is declared on line 22, and line 24 will be the fist one to be executed.&lt;/p&gt;
&lt;p&gt;In lines 6 to 8 we define some constants to increase the readability of the
code. The price to pay is that NASM will export these symbols as well, thus
increasing the size of the final executable file. I will discuss how to deal
with this later on in this post. For the time being, let's focus on the rest of
the code.&lt;/p&gt;
&lt;p&gt;Line 13 marks the beginning of the initialised data section. Here we define
strings and other immediate values. In this case we only need to define the
&lt;code&gt;"Hello World!\n"&lt;/code&gt; string (&lt;code&gt;10&lt;/code&gt; is the ASCII code for the newline character
&lt;code&gt;\n&lt;/code&gt;) and label it &lt;code&gt;hello&lt;/code&gt;. Line 15 defines a constant equals to the length of
the string, and this is accomplished by subtracting the address of the label
&lt;code&gt;hello&lt;/code&gt; from the current address, given by &lt;code&gt;$&lt;/code&gt; in NASM syntax.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.text&lt;/code&gt; section, where the actual code resides, starts at line 20. Here we
declare the &lt;code&gt;_start&lt;/code&gt; symbol, i.e. the entry point of the application, followed
by the code to be executed. In this simple example, all we need to do is print
the string to screen and then terminate the application. This means that we need
to call the &lt;code&gt;sys_write&lt;/code&gt; system call, followed by a call to &lt;code&gt;sys_exit&lt;/code&gt;, perhaps
with an exit code that will tell us whether the call to &lt;code&gt;sys_write&lt;/code&gt; has been
successful or not.&lt;/p&gt;
&lt;p&gt;Here is our first encounter with the new syscall opcode and the x86_64 calling
convention. There isn't much to say about syscall. It does what you would expect
it to do, i.e. make a system call. The system call to make is specified by the
value of the rax register, whereas the parameters are passed according to the
already mentioned x86_64 calling convention. It is recommended that you have a
look at the official documentation to fully grasp it, especially when it comes
to complex calls. In a nutshell, some of the parameters are passed through
registers and the rest go to the stack.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The order of the registers is: &lt;code&gt;rdi&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdx&lt;/code&gt;, &lt;code&gt;r10&lt;/code&gt;, &lt;code&gt;r8&lt;/code&gt;, &lt;code&gt;r9&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We shall see in the next code example that, when we call a C function, we should
use &lt;code&gt;rcx&lt;/code&gt; instead of &lt;code&gt;r10&lt;/code&gt;. Indeed, the latter is only used for the Linux kernel
interface, while the former is used in all the other cases.&lt;/p&gt;
&lt;p&gt;On line 23 we have a comment that shows us the equivalent C code for a call to
&lt;code&gt;sys_write&lt;/code&gt;. Its "signature" is the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. SYS_WRITE

Parameters
----------

unsigned int    file descriptor
const char *    pointer to the string
size_t              number of bytes to write


Return value
------------
The number of bytes of the pointed string written on the file descriptor.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The number that appears on the top right corner is the code associated to the
system call (compare this with line 6 above), and by convention this goes into
the &lt;code&gt;rax&lt;/code&gt; register (see line 24). Since &lt;code&gt;sys_write&lt;/code&gt; requires 3 integer
parameters we only need the registers &lt;code&gt;rdi&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt; and &lt;code&gt;rdx&lt;/code&gt;, in this order.
Therefore, the file descriptor, the standard output in this case, will go in
&lt;code&gt;rdi&lt;/code&gt;, the address of the first byte of the string will go in &lt;code&gt;rsi&lt;/code&gt; while its
length will be loaded into &lt;code&gt;rdx&lt;/code&gt; (lines 25 to 27).&lt;/p&gt;
&lt;p&gt;In order to make the actual system call we can now use the new opcode &lt;code&gt;syscall&lt;/code&gt;.
The return value, namely the number of bytes written by &lt;code&gt;sys_write&lt;/code&gt; in this
case, is returned in the &lt;code&gt;rax&lt;/code&gt; register. With line 29 we save the return value
in the stack in order to use it as an exit code to be passed to &lt;code&gt;sys_exit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since the application has done everything that needed to be done, i.e. print a
string to standard output, we are ready to terminate the execution of the main
process. This is achieved by making the exit system call, whose "signature" is
the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;60. SYS_EXIT

Parameters
----------

int     error code


Return value
------------
This system call does not return.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With line 32 we load the code of &lt;code&gt;sys_exit&lt;/code&gt; into the &lt;code&gt;rax&lt;/code&gt; register in
preparation for the system call. As error code, we might want to return &lt;code&gt;0&lt;/code&gt; if
&lt;code&gt;sys_write&lt;/code&gt; has done its job properly, i.e. if it has written all the expected
number of bytes, and something else otherwise. The simplest way to achieve this
is by subtracting the string length from the return value of &lt;code&gt;sys_write&lt;/code&gt;.
Remember that we stored the latter in the stack, so it is now time to retrieve
it. The first and only argument of &lt;code&gt;sys_exit&lt;/code&gt; must go in &lt;code&gt;rdi&lt;/code&gt;, so we might as
well pop the &lt;code&gt;sys_write&lt;/code&gt; return value in there directly, and this is precisely
what line 33 does. On line 34 we subtract the length of the string from &lt;code&gt;rdi&lt;/code&gt;,
so that if &lt;code&gt;sys_write&lt;/code&gt; has written all the expected number of bytes, &lt;code&gt;rdi&lt;/code&gt; will
now be &lt;code&gt;0&lt;/code&gt;. The last instruction on line 35 is the &lt;code&gt;syscall&lt;/code&gt; opcode that will
make the system call and terminate the execution.&lt;/p&gt;
&lt;p&gt;All right, time now to assemble, link and execute the above code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nasm -f elf64 -o hello64.o hello64.asm
ld -o hello64 hello64.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will assemble the source code of &lt;code&gt;hello64.asm&lt;/code&gt; into the object file
&lt;code&gt;hello64.o&lt;/code&gt;, while the linker will finish off the job by linking the interpreter
to the object file and produce the ELF64 executable. To run the application,
simply type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./hello64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you also want to display the exit code to make sure the executable is
behaving as expected we could use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./hello64&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exit code:&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and, on screen, we should now see&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hello World!
exit code: 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apart from the fun, another reason to write assembly code is that you can shrink
the size of the executable file. Let's check how big &lt;code&gt;hello64&lt;/code&gt; is at this stage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc -c &amp;lt; hello64
1048
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A kilobyte seems a bit excessive for an assembly application that only prints a
short string on screen. The reason of such a bloated executable is in the symbol
table created by NASM. This plays an important role inside our ELF file in case
we'd need to link it with other object files. You can see all the symbols stored
in the elf file with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ objdump -t hello64

hello64:     file format elf64-x86-64

SYMBOL TABLE:
00000000004000b0 l    d  .text 0000000000000000 .text
00000000006000d8 l    d  .data 0000000000000000 .data
0000000000000000 l    df *ABS* 0000000000000000 hello64.asm
0000000000000001 l       *ABS* 0000000000000000 SYS_WRITE
000000000000003c l       *ABS* 0000000000000000 SYS_EXIT
0000000000000001 l       *ABS* 0000000000000000 STDOUT
00000000006000d8 l       .data 0000000000000000 hello
000000000000000d l       *ABS* 0000000000000000 hello_len
00000000004000b0 g       .text 0000000000000000 _start
00000000006000e5 g       .data 0000000000000000 __bss_start
00000000006000e5 g       .data 0000000000000000 _edata
00000000006000e8 g       .data 0000000000000000 _end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming that we are not planning of doing this with our simple Hello World
example, we strip the symbol table off &lt;code&gt;hello64&lt;/code&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;strip -s hello64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we now check the file size again, this is what we get&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc -c &amp;lt; hello64
512
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;i.e. less than half the original size. Looking at the symbol table again, this
is what we get now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ objdump -t hello64

hello64: file format elf64-x86-64

SYMBOL TABLE:
no symbols
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observe that we can obtain the same result with the -s switch to the linker we
decide to use, that is, either ld or gcc. Thus, for example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ld -s -o hello64 hello64.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will produce an ELF executable that lacks the symbol table completely.&lt;/p&gt;
&lt;p&gt;The possibility of removing symbols from an ELF file gives us the chance of
defining the constants for the system calls once and for all. In my GitHub
repository you can find the file
&lt;a href="https://github.com/P403n1x87/asm/blob/master/syscalls/syscalls.inc"&gt;&lt;code&gt;syscalls.inc&lt;/code&gt;&lt;/a&gt;
where I have defined all the system calls together with their associated ID, and
the "signature" of each on a comment line. With the help of this file, our
source code would look like this&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;
&lt;span class="normal"&gt;35&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;global &lt;/span&gt;&lt;span class="nv"&gt;_start&lt;/span&gt;

&lt;span class="cp"&gt;%include &amp;quot;../syscalls.inc&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; CONSTANTS&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="kd"&gt;      equ&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt;           &lt;span class="nv"&gt;db&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;      &lt;span class="c1"&gt;; char *&lt;/span&gt;
&lt;span class="no"&gt;hello_len&lt;/span&gt;&lt;span class="kd"&gt;       equ&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;                 &lt;span class="c1"&gt;; size_t&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Code goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.text&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;
    &lt;span class="c1"&gt;; syscall(SYS_WRITE, STDOUT, hello, hello_len);&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;SYS_WRITE&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;STDOUT&lt;/span&gt;
    &lt;span class="nf"&gt;lea&lt;/span&gt;     &lt;span class="nb"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello_len&lt;/span&gt;
    &lt;span class="nf"&gt;syscall&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt;    &lt;span class="nb"&gt;rax&lt;/span&gt;

    &lt;span class="c1"&gt;; syscall(SYS_EXIT, &amp;lt;sys_write return value&amp;gt; - hello_len);&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;
    &lt;span class="nf"&gt;sub&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello_len&lt;/span&gt;
    &lt;span class="nf"&gt;syscall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;hello64_inc.asm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note the inclusion of the file &lt;code&gt;syscalls.inc&lt;/code&gt; at line 3, assumed to be stored in
the parent folder of the one containing the assembly source code, and the only
constant &lt;code&gt;STDOUT&lt;/code&gt; at line 8.&lt;/p&gt;
&lt;p&gt;If you do not need symbols in the final ELF file, you can just remove the symbol
table completely with the previous command. However, if you want to retain some,
but get rid of the one associated to constants that are meaningful to just your
source code, you can add a &lt;code&gt;-N &amp;lt;symbol name&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;strip -N STDOUT hello64&lt;/code&gt;)
switch to strip for each symbol you want dropped. To automate this when using
&lt;code&gt;syscalls.inc&lt;/code&gt;, one can execute the following (rather long) command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;strip &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; -r line &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; s _ &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;-N &lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;tail -n +5 ../syscalls.inc&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; hello64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;on the ELF executable.&lt;/p&gt;
&lt;p&gt;Finally, let's verify that all we really have is pure assembly code, i.e. that
our application doesn't depend on external shared objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ldd hello64
        not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, this output is telling us that &lt;code&gt;hello64&lt;/code&gt; is not linked to any
other shared object files.&lt;/p&gt;
&lt;h1 id="hello-libc"&gt;Hello libc!&lt;/h1&gt;
&lt;p&gt;We shall now rewrite the above Hello World! example and let the Standard C
Library take care of the output operation. That is, we won't deal with system
calls directly, we shall instead delegate a higher abstraction layer, the
Standard C Library, do that for us. Furthermore, with this approach, we will
also delegate some basic clean-up involving, e.g., open file descriptor, child
processes etc..., which we would have to deal with otherwise. For a simple
application like a Hello World! this last point is pretty much immaterial, but
we will see in another post on GUIs with Gtk+ 3 the importance of waiting for
child processes to terminate an application gracefully.&lt;/p&gt;
&lt;p&gt;So the code we want to write is the assembly analogue of the following C code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the &lt;code&gt;main&lt;/code&gt; function, we call &lt;code&gt;printf&lt;/code&gt; to print the string on screen and
then use its return value, decreased by the string length, as exit code. Thus,
if &lt;code&gt;printf&lt;/code&gt; writes all the bytes of our string, we get 0 as exit code, meaning
that the call has been successful.&lt;/p&gt;
&lt;p&gt;The didactic importance of this example resides in the use of the variadic
function &lt;code&gt;printf&lt;/code&gt;. The System V ABI specifies that, when calling a variadic
function, the register &lt;code&gt;rax&lt;/code&gt; should hold the number of XMM registers used for
parameter passing. In this case, since we are just printing a string, we are not
passing any other arguments apart from the location of the first character of
the string, and therefore we need to set &lt;code&gt;rax&lt;/code&gt; to zero. With all these
considerations, the assembly analogue of the above C code will look like this&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;global &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;extern &lt;/span&gt;&lt;span class="nv"&gt;printf&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt;           &lt;span class="nv"&gt;db&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="c1"&gt;; const char *&lt;/span&gt;
&lt;span class="no"&gt;hello_len&lt;/span&gt;&lt;span class="kd"&gt;       equ&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hello&lt;/span&gt;               &lt;span class="c1"&gt;; size_t&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Code goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.text&lt;/span&gt;

&lt;span class="c1"&gt;; int main ()&lt;/span&gt;
&lt;span class="nl"&gt;main:&lt;/span&gt;
    &lt;span class="c1"&gt;; return printf(hello) - hello_len;&lt;/span&gt;
    &lt;span class="nf"&gt;lea&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt;    &lt;span class="nv"&gt;printf&lt;/span&gt;
    &lt;span class="nf"&gt;sub&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello_len&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;hello64_libc.asm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On line 1 we export the main symbol, which will get called by the &lt;code&gt;libc&lt;/code&gt;
framework. On line 3 we instruct NASM that our application uses an external
symbol, i.e. the variadic function &lt;code&gt;printf&lt;/code&gt;. There is nothing new to say about
the &lt;code&gt;.data&lt;/code&gt; section, that starts at line 8. The code, however, is quite
different. On line 17 we declare the label &lt;code&gt;main&lt;/code&gt;, which marks the entry point
of the C main function. We do not need local variables no access the standard
argument of &lt;code&gt;main&lt;/code&gt;, namely &lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt;, so we do not create a local stack
frame. Instead, we go straight to calling &lt;code&gt;printf&lt;/code&gt;. We load the string address
in the &lt;code&gt;rdi&lt;/code&gt; register (line 19), set the &lt;code&gt;rax&lt;/code&gt; register to zero (line 20), since
we are not passing any arguments by the XMM registers, and finally call the
&lt;code&gt;printf&lt;/code&gt; function. On the last line we subtract the string length, &lt;code&gt;hello_len&lt;/code&gt;,
from the return value of &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Assuming the above code resides in the file &lt;code&gt;hello64_libc.asm&lt;/code&gt;, we can assemble
and link it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nasm -f elf64 -o hello64_libc.o hello64_libc
gcc -o hello64_libc hello64_libc.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The ELF executable I get on my machine is 8696 bytes in size, and 6328 without
the symbol table. If we thought 1048 was too much for a simple Hello World
application, the libc example is 8 times bigger. And without symbols, you can
see that we are wasting about 8K by relying on the Standard C Library.&lt;/p&gt;
&lt;p&gt;A somewhat intermediate approach is to drop the main function and only use the
&lt;code&gt;printf&lt;/code&gt; function from &lt;code&gt;libc&lt;/code&gt;. The advantage is a reduced file size, since our
executable only depends on the Standard C Library. However, as discussed above,
we lose an important clean-up process that can be convenient, if not necessary,
at times.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;global &lt;/span&gt;&lt;span class="nv"&gt;_start&lt;/span&gt;

&lt;span class="cp"&gt;%include &amp;quot;../syscalls.inc&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;extern &lt;/span&gt;&lt;span class="nv"&gt;printf&lt;/span&gt;

&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.data&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt;           &lt;span class="nv"&gt;db&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="c1"&gt;; const char *&lt;/span&gt;
&lt;span class="no"&gt;hello_len&lt;/span&gt;&lt;span class="kd"&gt;       equ&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;           &lt;span class="c1"&gt;; size_t&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;; Code goes here&lt;/span&gt;
&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SECTION &lt;/span&gt;&lt;span class="nv"&gt;.text&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;
    &lt;span class="c1"&gt;; printf(hello) - hello_len;&lt;/span&gt;
    &lt;span class="nf"&gt;lea&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nf"&gt;xor&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rax&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt;    &lt;span class="nv"&gt;printf&lt;/span&gt;
    &lt;span class="nf"&gt;sub&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;hello_len&lt;/span&gt;

    &lt;span class="c1"&gt;; syscall(SYS_EXIT, rax - hello_len)&lt;/span&gt;
    &lt;span class="nf"&gt;push&lt;/span&gt;    &lt;span class="nb"&gt;rax&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class="nf"&gt;pop&lt;/span&gt;     &lt;span class="nb"&gt;rdi&lt;/span&gt;
    &lt;span class="nf"&gt;syscall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;hello64_libc2.asm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note how, on lines 1 and 18, we removed the main function and reintroduced the
&lt;code&gt;_start&lt;/code&gt; symbol to tell NASM where the entry point is. Thus, execution of our
application now starts at line 20. Here we prepare to call the &lt;code&gt;printf&lt;/code&gt;
function from &lt;code&gt;libc&lt;/code&gt; (lines 20 to 22), we compute the exit code (line 23) and we
store it in the stack. Now there is no Standard C Library framework to terminate
the execution for us, since we cannot return from the non-existent main
function, and therefore we have to make a call to &lt;code&gt;SYS_EXIT&lt;/code&gt; ourselves (lines 26
to 29).&lt;/p&gt;
&lt;p&gt;Assuming this code resides in the file &lt;code&gt;hello64_libc2&lt;/code&gt;, we assemble and link
with the commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nasm -f elf64 -o hello64_libc2.o hello64_libc2
ld -s -o hello64_libc2 hello64_libc.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking the file size, this is what I get on my machine now&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc -c &amp;lt; hello64_libc2
2056
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;i.e. about a third of the "full" &lt;code&gt;libc&lt;/code&gt; example above. There is something we can
still do with &lt;code&gt;strip&lt;/code&gt;, namely determine which sections are not needed. After
linking with &lt;code&gt;ld&lt;/code&gt;, the ELF I get has the following sections&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ readelf -S hello64_libc2 | grep [.]
  [ 1] .interp           PROGBITS         0000000000400158  00000158
  [ 2] .hash             HASH             0000000000400178  00000178
  [ 3] .dynsym           DYNSYM           0000000000400190  00000190
  [ 4] .dynstr           STRTAB           00000000004001c0  000001c0
  [ 5] .gnu.version      VERSYM           00000000004001de  000001de
  [ 6] .gnu.version_r    VERNEED          00000000004001e8  000001e8
  [ 7] .rela.plt         RELA             0000000000400208  00000208
  [ 8] .plt              PROGBITS         0000000000400220  00000220
  [ 9] .text             PROGBITS         0000000000400240  00000240
  [10] .eh_frame         PROGBITS         0000000000400260  00000260
  [11] .dynamic          DYNAMIC          0000000000600260  00000260
  [12] .got.plt          PROGBITS         00000000006003a0  000003a0
  [13] .data             PROGBITS         00000000006003c0  000003c0
  [14] .shstrtab         STRTAB           0000000000000000  000003ce
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By trials and errors, I have discovered that I can get rid of &lt;code&gt;.hash&lt;/code&gt;,
&lt;code&gt;.gnu.version&lt;/code&gt; and &lt;code&gt;.eh_frame&lt;/code&gt; while still getting a valid ELF executable that
does its job. To get rid of these sections one can use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;strip -R .hash -R .gnu.version -R .eh_frame hello64_libc2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which yields an executable of 1832 bytes.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;With the above examples, we have seen that, if our real goal is that of coding a
Hello World application meant to run on an architecture with the x86_64
instruction set, assembly is the best shot we have. Chances are, if you are
coding an application, it is more complex than just printing a string on screen.
Even pretending for a moment that you don't care about the portability of your
code, there are certainly some benefits from linking your application with gcc
and letting the Standard C Library do some clean-up work for you. We will have
the chance to see this last point from a close-up perspective in a future post.
So take this current post as a reference point where you can look back when you
need to recall the basics of writing a 64-bit assembly application for the Linux
OS.&lt;/p&gt;</content><category term="Programming"></category><category term="assembly"></category></entry></feed>