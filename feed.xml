<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Hub of Heliopolis</title>
    <description>The Hub of Heliopolis is the &lt;i&gt;tech bay&lt;/i&gt; of &lt;a href=&quot;http://thenestofheliopolis.blogspot.co.uk/&quot;&gt;The Nest of Heliopolis&lt;/a&gt;. It is the home of all my &lt;i&gt;encounters&lt;/i&gt; with technology that I consider worth sharing with the World.
</description>
    <link>https://p403n1x87.github.io//</link>
    <atom:link href="https://p403n1x87.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 05 May 2019 21:32:16 +0000</pubDate>
    <lastBuildDate>Sun, 05 May 2019 21:32:16 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Deterministic and Statistical Python Profiling</title>
        <description>&lt;h2 id=&quot;brief-introduction-to-profiling&quot;&gt;Brief Introduction to Profiling&lt;/h2&gt;

&lt;p&gt;Let’s start with a quick introduction to what &lt;em&gt;profiling&lt;/em&gt; is. &lt;em&gt;Profiling&lt;/em&gt; is a run-time program analysis technique. Generally, a certain level of &lt;em&gt;instrumentation&lt;/em&gt; is required to retrieve some kind of &lt;em&gt;tracing&lt;/em&gt; information while the program is running. This is usually in the form of tracing instructions interleaved with the line of your source code, like debug statements, for instance, usually enriched with timestamp information or other relevant details, like memory usage, etc… .&lt;/p&gt;

&lt;p&gt;One normally distinguishes between two main categories of profilers:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;event-based&lt;/em&gt; (or &lt;em&gt;deterministic&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;em&gt;statistical&lt;/em&gt; (or &lt;em&gt;sampling&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Profilers in the first category make use of &lt;em&gt;hooks&lt;/em&gt; that allow registering event callbacks. At the lowest level, these hooks are provided directly by the operating system and allow you to trace events like function calls and returns. Virtual machines and interpreters, like JVM and CPython, provide &lt;em&gt;software&lt;/em&gt; hooks instead, for generally the same events, but also for language-specific features, like class loading for instance. The reason why profilers in this category are called &lt;em&gt;deterministic&lt;/em&gt; is that, by listening to the various events, you can get a deterministic view of what is happening inside your application.&lt;/p&gt;

&lt;p&gt;In contrast, &lt;em&gt;statistical&lt;/em&gt; profilers tend to provide approximate figures only, obtained by, e.g., sampling the call stack at regular interval of times. These samples can then be analysed statistically to provide meaningful metrics for the profiled target.&lt;/p&gt;

&lt;p&gt;One might get the impression that deterministic profilers are a better choice than statistical profilers. However, both categories come with pros and cons. For example, statistical profilers usually require less instrumentation, if none at all, and introduce less overhead in the profiled target program. Therefore, if a statistical profiler can guarantee a certain accuracy on the metrics that can be derived from them, then it is usually a better choice over a more accurate deterministic profiler that can introduce higher overhead.&lt;/p&gt;

&lt;h2 id=&quot;python-profiling&quot;&gt;Python Profiling&lt;/h2&gt;

&lt;p&gt;There are quite a plethora of profiling tools available for Python, either deterministic or statistical. The official documentation describes the use of the Python profiling interface through two different implementations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/profile.html#module-profile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/profile.html#module-cProfile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cProfile&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The former is a pure Python module and, as such, introduces more overhead than the latter, which is a C extension that implements the same interface as &lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;. They both fit into the category of &lt;em&gt;deterministic&lt;/em&gt; profilers and make use of the Python C API &lt;a href=&quot;https://docs.python.org/3/c-api/init.html#profiling-and-tracing&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PyEval_SetProfile&lt;/code&gt;&lt;/a&gt; to register event hooks.&lt;/p&gt;

&lt;h3 id=&quot;standard-python-profiling&quot;&gt;Standard Python Profiling&lt;/h3&gt;

&lt;p&gt;Let’s have a look at how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;cProfile&lt;/code&gt;, as this will be the standard choice for a deterministic profiler. Here is an example that will profile the call-stack of &lt;code class=&quot;highlighter-rouge&quot;&gt;psutil.process_iter&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# File: process_iter.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cProfile&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psutil&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'[list(psutil.process_iter()) for i in range(1_000)]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'process_iter'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above code runs &lt;code class=&quot;highlighter-rouge&quot;&gt;psutil.process_iter&lt;/code&gt; for 1000 times through cProfile and sends the output to the &lt;code class=&quot;highlighter-rouge&quot;&gt;process_iter&lt;/code&gt; file in the current working directory. A good reason to save the result to a file is that one can then use a tool like &lt;a href=&quot;https://github.com/jrfonseca/gprof2dot&quot;&gt;gprof2dot&lt;/a&gt; to provide a graphical representation of the collected data. This tool turns the output of cProfile into a dot graph which can then be visualised to make better sense of it. E.g., these are the commands required to collect the data and visualise it in the form of a DOT graph inside a PDF document:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ 
$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
python3 process_iter.py
gprof2dot -f pstats process_iter | dot -Tpdf -o process_iter.pdf
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what the result will look like. The colours help us identify the branches of execution where most of the time is spent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/process_iter.svg&quot; alt=&quot;process_iter&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-look-under-the-bonnet&quot;&gt;A Look Under the Bonnet&lt;/h3&gt;

&lt;p&gt;The output of a tool like gprof2dot can be quite intuitive to understand, especially if you have had some prior experience with profilers. However, in order to better appreciate what is still to come it is best if we have a quick look at some of the basics of the Python execution model.&lt;/p&gt;

&lt;p&gt;Python is an interpreted language and the reference implementation of its interpreter is &lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot;&gt;CPython&lt;/a&gt;. As the name suggests, it is written in C, and it offers a C API that can be used to write C extensions.&lt;/p&gt;

&lt;p&gt;One of the fundamental objects of CPython is the interpreter itself, which has a data structure associated with it, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;PyInterpreterState&lt;/code&gt;. In principle, there can be many instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyInterpreterState&lt;/code&gt; within the same process, but for the sake of simplicity, we shall ignore this possibility here. One of the fields of this C data structure is &lt;code class=&quot;highlighter-rouge&quot;&gt;tstate_head&lt;/code&gt;, which points to the first element of a doubly-linked list of instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyThreadState&lt;/code&gt; structure. As you can imagine, this other data structure represents the state of a thread of execution associated with the referring interpreter instance. We can navigate this list by following the references of its field &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; (and navigate back with &lt;code class=&quot;highlighter-rouge&quot;&gt;prev&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Each instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyThreadState&lt;/code&gt; points to the current execution frame, which is the object that bears the information about the execution of a code block via the field &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;. This is described by the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyFrameObject&lt;/code&gt; structure, which is also a list. In fact, this is the stack that we are after. Each frame will have, in general, a parent frame that can be retrieved by means of the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_back&lt;/code&gt; pointer on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyFrameObject&lt;/code&gt; structure. The picture produced by gprof2dot of the previous section is the graphical representation of this stack of frames. The information contained in the first row of each box comes from the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyCodeObject&lt;/code&gt; structure, which can be obtained from every instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyFrameObject&lt;/code&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;f_code&lt;/code&gt; field. In particular, &lt;code class=&quot;highlighter-rouge&quot;&gt;PyCodeObject&lt;/code&gt; allows you to retrieve the name of the file that contains the Python code being executed in that frame as well as its line number and the name of the context (e.g. the current function).&lt;/p&gt;

&lt;p&gt;Sometimes the C API changes between releases, but the following image is a fairly stable representation of the relations between the above-mentioned structures that are common among many of the major CPython releases.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/python_structs.svg&quot; alt=&quot;CPython data structures&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The loop around &lt;code class=&quot;highlighter-rouge&quot;&gt;PyFrameObject&lt;/code&gt;, which represents its field &lt;code class=&quot;highlighter-rouge&quot;&gt;f_back&lt;/code&gt;, creates the structure of a singly-linked list of frame objects. This is precisely the frame stack.&lt;/p&gt;

&lt;p&gt;The Python profiling API can be demonstrated with some simple Python code. The following example declares a decorator, &lt;code class=&quot;highlighter-rouge&quot;&gt;@profile&lt;/code&gt;, that can be used to extract the frame stack generated by the execution of a function. In this case, we define the factorial function&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;profiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c_&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_code&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{code.co_name}@{frame.f_lineno}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_back&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:12} {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;old_profiler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getprofile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprofile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setprofile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old_profiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the coding of the &lt;code class=&quot;highlighter-rouge&quot;&gt;profiler&lt;/code&gt; function can be simplified considerably by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;inspect&lt;/code&gt; module:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inspect&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;profiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c_&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{f.function}@{f.lineno}&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:8} {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; -&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;statistical-profiling&quot;&gt;Statistical Profiling&lt;/h3&gt;

&lt;p&gt;For a profiler from the statistical category, we have to look for external tools. In this case, The “standard” approach is to make use of a system call like &lt;code class=&quot;highlighter-rouge&quot;&gt;setitimer&lt;/code&gt;, which is used to register a signal handler that gets called at regular intervals of time. The general idea is to register a callback that gets a snapshot of the current frame stack when triggered. An example of a profiler that works like this is &lt;a href=&quot;https://github.com/vmprof/vmprof-python&quot;&gt;vmprof&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some drawbacks of this approach are: 1. the signal handler runs in the same process as the Python interpreter, and generally the main thread; 2. signals can interrupt system calls, which can cause stalls in the running program.&lt;/p&gt;

&lt;p&gt;There are other approaches that can be taken in order to implement a statistical profiler, though. An example is &lt;a href=&quot;https://github.com/uber/pyflame&quot;&gt;pyflame&lt;/a&gt;, which is more in the spirit of a debugging tool and uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt;-like system calls. The situation is a bit more involved here since the profiler is now an external process. The general idea is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; to pause the running Python program, read its virtual memory and reconstruct the frame stack from it. Here, the main challenges are 1. to find the location of the relevant CPython data structures in memory and 2. parse them to extract the frame stack information. The differences between Python 2 and Python 3 and the occasional changes of the CPython ABI within the same minor release add up to the complexity of the task.&lt;/p&gt;

&lt;p&gt;Once all has been taken care of, though, a statistical profiler of this kind has the potential of lowering the overhead caused by source instrumentation even further so that the payoff is generally worth the effort.&lt;/p&gt;

&lt;h2 id=&quot;enter--austin&quot;&gt;Enter &lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/austin_logo_white.svg&quot; height=&quot;32px&quot; style=&quot;max-width:100%;&quot; /&gt; Austin&lt;/h2&gt;

&lt;p&gt;We just saw that with a tool like pyflame we can get away with no instrumentation. An objection that can be raised against it, though, is that it still halts the profiled program in order to read the interpreter state. System calls like &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; were designed for debugging tools, for which it is desirable to stop the execution at some point, inspect memory, step over one instruction or a whole line of source code at a time etc…. Ideally, we would like our profiler to interfere as little as possible with the profiled program.&lt;/p&gt;

&lt;p&gt;This is where a tool like &lt;a href=&quot;https://github.com/P403n1x87/austin&quot;&gt;Austin&lt;/a&gt; comes into play. Austin is, strictly speaking, not a full-fledged profiler on its own. In fact, Austin is merely a frame stack sampler for CPython. Concretely, this means that all Austin does is to sample the frame stack of a running Python program at (almost) regular intervals of time.&lt;/p&gt;

&lt;p&gt;A similar approach is followed by &lt;a href=&quot;https://github.com/benfred/py-spy&quot;&gt;py-spy&lt;/a&gt;, another Python profiler written in Rust and inspired by &lt;a href=&quot;https://github.com/rbspy/rbspy&quot;&gt;rbspy&lt;/a&gt;. However, Austin tends to provide higher performance in general for two main reasons. One is that it is written in pure C, with no external dependencies other than the standard C library. The other is that Austin is just a frame stack sampler. It focuses on dumping the relevant parts of the Python interpreter state as quickly as possible and delegates any data aggregations and analysis to external tools. In theory, Austin offers you higher sampling rates at virtually no cost at the expenses of the profiled process. This makes Austin the ideal choice for profiling production code at run-time, with not even a single line of instrumentation required!&lt;/p&gt;

&lt;p&gt;So, how does Austin read the virtual memory of another process without halting it? Many platforms offer system calls to do just that. On Linux, for example, the system call is &lt;a href=&quot;http://man7.org/linux/man-pages/man2/process_vm_readv.2.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process_vm_readv&lt;/code&gt;&lt;/a&gt;. Once one has located the instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyInterpreterState&lt;/code&gt;, everything else follows automatically, as we saw with the discussion on some of the details of the CPython execution model.&lt;/p&gt;

&lt;h3 id=&quot;on-your-marks&quot;&gt;On Your Marks&lt;/h3&gt;

&lt;p&gt;At this point you might have started, quite understandably, to be a bit concerned with concurrency issues. What can we actually make of a memory dump from a running process we have no control over? What guarantees do we have that the moment we decide to peek at the Python interpreter state, we find all the relevant data structures in a consistent state? The answer to this question lies in the difference in execution speed between C and Python code, the latter being, on average, order of 10 times faster than the former. So what we have here is a race between Austin (which is written in C) and the Python target. When Austin samples the Python interpreter memory, it does so quite quickly compared to the scale of execution of a Python code block. On the other hand, CPython is also written in C, can refresh its state pretty quickly too. As a cinematic analogy, think that we are trying to create an animation by taking snapshots of a moving subject in quick succession. If the motion we are trying to capture is not too abrupt (compared to the time it takes to take a snapshot, that is), then we won’t spot any motion blur and our images will be perfectly clear. This video of the Cassini flyby over Jupiter, Europa and Io, for instance, been made from still images, visualises this idea clearly.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-0JxkZjwpRg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With Austin, each frame stack sample is the analogue of a snapshot and the moving subject is the Python code being executed by the interpreter. Of course, Austin could be unlucky and decide to sample precisely during the moment CPython is in the middle of updating the frame stack. However, based on our previous considerations, we can expect this to be a rather rare event. Sometimes a picture is worth a thousand words, so here is an idealistic “CPython vs Austin” execution timeline comparison.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/timeline.svg&quot; alt=&quot;CPython and Austin timeline comparison&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Now one could argue that, in order to decrease the error rate, an approach similar to pyflame, where we halt the execution before taking a snapshot, would be a better solution. In fact, it makes practically no difference. Indeed it could happen that the profiler decides to call &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; while CPython is in the middle of refreshing the frame stack. In this case, it doesn’t really matter whether CPython has been halted or not, the frame stack will be in an inconsistent state anyway.&lt;/p&gt;

&lt;p&gt;As a final wrap-up comment to this digression, statistical profilers for Python like Austin can produce reliable output, as the error rate tends to be very low. This is possible because Austin is written in pure C and therefore offers optimal sampling performance.&lt;/p&gt;

&lt;h3 id=&quot;flame-graphs-with-austin&quot;&gt;Flame Graphs with Austin&lt;/h3&gt;

&lt;p&gt;The simplest way to turn Austin into a basic profiler is to pipe it to a tool like Brendan Gregg’s &lt;a href=&quot;https://github.com/brendangregg/FlameGraph&quot;&gt;FlameGraph&lt;/a&gt;. For example, assuming that &lt;code class=&quot;highlighter-rouge&quot;&gt;austin&lt;/code&gt; is in your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable (e.g. because you have installed it from the Snap Store with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo snap install austin --beta --classic&lt;/code&gt;) and that &lt;code class=&quot;highlighter-rouge&quot;&gt;flamegraph.pl&lt;/code&gt; is installed in &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/flamegraph&lt;/code&gt;, we can do&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
austin python3 process_iter.py | /opt/flamegraph/flamegraph.pl --countname=usec &amp;gt; process_iter.svg
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are using &lt;code class=&quot;highlighter-rouge&quot;&gt;--countname=usec&lt;/code&gt; because Austin samples frame stacks in microseconds and this information will then be part of the output of the flame graph tool. The following image is the result that I have got from running the above command.&lt;/p&gt;

&lt;object data=&quot;https://p403n1x87.github.io//images/python-profiling/process_iter_fg.svg&quot; type=&quot;image/svg+xml&quot; width=&quot;100%&quot;&gt;
  &lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/process_iter_fg.svg&quot; style=&quot;width:100%;&quot; /&gt;
&lt;/object&gt;

&lt;p&gt;Austin is now included in the official Debian repositories. This means that you can install it with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
apt install austin
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;on Linux distributions that are derived from Debian. On Windows, Austin can be installed from &lt;a href=&quot;https://chocolatey.org/packages/austin&quot;&gt;Chocolatey&lt;/a&gt; with the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;&amp;gt; &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
choco install austin --pre
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can just head to the &lt;a href=&quot;https://github.com/P403n1x87/austin/releases&quot;&gt;release&lt;/a&gt; page on GitHub and download the appropriate binary release for your platform.&lt;/p&gt;

&lt;h3 id=&quot;the-tui&quot;&gt;The TUI&lt;/h3&gt;

&lt;p&gt;The GitHub repository of Austin comes with a TUI application written in Python and based on &lt;code class=&quot;highlighter-rouge&quot;&gt;curses&lt;/code&gt;. It provides an example of an application that uses the output from Austin to display &lt;em&gt;live&lt;/em&gt; top-like profiling statistics of a running Python program.&lt;/p&gt;

&lt;p&gt;If you want to try it, you can install it with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
pip install git+https://github.com/P403n1x87/austin.git
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and run it with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
austin-tui python3 /path/to/process_iter.py
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, the TUI shows only the current frame being executed in the selected thread. You can navigate through the different threads with &lt;kbd&gt;⇞ Page Up&lt;/kbd&gt; and &lt;kbd&gt;⇟ Page Down&lt;/kbd&gt;. You can also view all the collected samples with the Full Mode, which can be toggled with &lt;kbd&gt;F&lt;/kbd&gt;. The currently executing frame will be highlighted and a tree representation of the current frame stack will be available on the right-hand side of the terminal.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/austin-tui_threads_nav.gif&quot; alt=&quot;Austin TUI&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;If you are a statistician or a data scientist working with Python, you can use the TUI to peek at your model while it is training to see what is going on and to identify areas of your code that could potentially be optimised to run faster. For example, let’s assume that you are training a model on Linux in a single process using the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
python3 my_model.py
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can attach the TUI to your model with the command (as superuser)&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
austin-tui -p `pgrep -f my_model.py | head -n 1` -i 10000
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;pgrep&lt;/code&gt; part is there to select the PID of the Python process that is running your model, while &lt;code class=&quot;highlighter-rouge&quot;&gt;-i 10000&lt;/code&gt; sets the sampling interval to 10 ms.&lt;/p&gt;

&lt;h3 id=&quot;web-austin&quot;&gt;Web Austin&lt;/h3&gt;

&lt;p&gt;Web Austin is another example of how to use Austin to build a profiling tool. In this case, we make use of the &lt;a href=&quot;https://github.com/spiermar/d3-flame-graph&quot;&gt;d3-flame-graph&lt;/a&gt; plugin for &lt;a href=&quot;https://d3js.org/&quot;&gt;D3&lt;/a&gt; to produce a &lt;strong&gt;live&lt;/strong&gt; flame graph visualisation of the collected samples inside a web browser. This opens up to &lt;em&gt;remote profiling&lt;/em&gt;, as the web application can be served on an arbitrary IPv4 address.&lt;/p&gt;

&lt;p&gt;Like the TUI, Web Austin can be installed from GitHub with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
pip install git+https://github.com/P403n1x87/austin.git
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming you are still interested to see what is happening inside your statistical model while it is training, you can use the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
austin-web -p `pgrep -f my-model.py | head -n 1` -i 10000
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As for the TUI, the command line arguments are the same as Austin’s. When Web Austin starts up, it creates a simple HTTP server that serves on &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; at an ephemeral port.&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
# austin-web -p `pgrep -f my-model.py | head -n 1` -i 10000
_____      ___       __    ______       _______              __________             _____
____/|_    __ |     / /_______  /_      ___    |___  __________  /___(_)______      ____/|_
_|    /    __ | /| / /_  _ \_  __ \     __  /| |  / / /_  ___/  __/_  /__  __ \     _|    /
/_ __|     __ |/ |/ / /  __/  /_/ /     _  ___ / /_/ /_(__  )/ /_ _  / _  / / /     /_ __|
 |/        ____/|__/  \___//_.___/      /_/  |_\__,_/ /____/ \__/ /_/  /_/ /_/       |/


* Sampling process with PID 3711 (python3 my_model.py)
* Web Austin is running on http://localhost:34257. Press Ctrl+C to stop.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you then open &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:34257&lt;/code&gt; in your browser you will then see a web application that looks like the following&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://p403n1x87.github.io//images/python-profiling/web-austin.gif&quot; alt=&quot;Web Austin&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that an active internet connection is required for the application to work, as the d3-flame-graph plugin, as well as some fonts, are retrieved from remote sources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to change the host and the port of the HTTP server created by Web Austin you can set the environment variables &lt;code class=&quot;highlighter-rouge&quot;&gt;WEBAUSTIN_HOST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WEBAUSTIN_PORT&lt;/code&gt;. If you want to run the Web Austin web application on, e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0:8080&lt;/code&gt;, so that it can be accessed from everywhere, use the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
# WEBAUSTIN_HOST=&quot;0.0.0.0&quot; WEBAUSTIN_PORT=8080 austin-web -p `pgrep -f my-model.py | head -n 1` -i 10000
_____      ___       __    ______       _______              __________             _____
____/|_    __ |     / /_______  /_      ___    |___  __________  /___(_)______      ____/|_
_|    /    __ | /| / /_  _ \_  __ \     __  /| |  / / /_  ___/  __/_  /__  __ \     _|    /
/_ __|     __ |/ |/ / /  __/  /_/ /     _  ___ / /_/ /_(__  )/ /_ _  / _  / / /     /_ __|
 |/        ____/|__/  \___//_.___/      /_/  |_\__,_/ /____/ \__/ /_/  /_/ /_/       |/


* Sampling process with PID 3711 (python3 my_model.py)
* Web Austin is running on http://0.0.0.0:8080. Press Ctrl+C to stop.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;write-your-own&quot;&gt;Write Your Own&lt;/h3&gt;

&lt;p&gt;Austin’s Powers (!) reside in its very simplicity. The “hard” problem of sampling the Python frame stack has been solved for you so that you can focus on processing the samples to produce the required metrics.&lt;/p&gt;

&lt;p&gt;If you decide to write a tool in Python, the Austin project on GitHub comes with a Python wrapper. Depending on your preferences, you can choose between a thread-based approach or an &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; one. Just as an example, let’s see how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncAustin&lt;/code&gt; class to make a custom profiler based on the samples collected by Austin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;austin&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncAustin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;austin.stats&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_line&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyAustin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncAustin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Subclass AsyncAustin and implement this callback. This will be called
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# every time Austin generates a sample. The convenience method parse_line
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# will parse the sample and produce the thread name, the stack of contexts
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# with the corresponding line numbers and the measured duration for the
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# sample.
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_sample_received&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_austin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyAustin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;my_austin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_austin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Austin failed to start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyAustin is starting...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;my_austin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The profiled target has terminated.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyAustin has been terminated from keyboard.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As the example above shows, it is enough to inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncAustin&lt;/code&gt; and define the &lt;code class=&quot;highlighter-rouge&quot;&gt;on_sample_received&lt;/code&gt; callback. This will get called every time Austin produces a sample. You can then do whatever you like with it. Here we simply pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt;, which is just a binary string in the format &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread [tid];[func] ([mod]);#[line no];[func] ...;L[line no] [usec]&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_line&lt;/code&gt; function, which conveniently split the string into its main components, i.e. the thread identifier, the stack of frames and the sample duration. We then print the resulting triple to screen.&lt;/p&gt;

&lt;p&gt;The rest of the code is there to create an instance of this custom Austin application. We call &lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt; to ensure that Austin has been started successfully. The optional argument is a timeout, which defaults to 1. If Austin is not started within 1 second, &lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;. If we do not wish to do anything else with the event loop, we can then simply call the &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; methods which schedules the main read loop that calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;on_sample_received&lt;/code&gt; callback whenever a sample is read from Austin’s &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; file descriptor.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;In this post, we have seen a few profiling options for Python. We have argued that some statistical profilers, like Austin, can prove valuable tools. Whilst providing approximate figures, the accuracy is in general quite high and the error rate very low. Furthermore, no instrumentation is required and the overhead introduced is very minimal, all aspects that make a tool like Austin a perfect choice for many Python profiling needs.&lt;/p&gt;

&lt;p&gt;A feature that distinguishes Austin from the rest is its extreme simplicity which implies great flexibility. By just sampling the frame stack of the Python interpreter, the user is left with the option of using the collected samples to derive the metrics that best suit the problem at hand.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 May 2019 16:35:00 +0000</pubDate>
        <link>https://p403n1x87.github.io//python/profiling/2019/05/05/python-profiling.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//python/profiling/2019/05/05/python-profiling.html</guid>
        
        <category>Programming</category>
        
        <category>Python</category>
        
        <category>Austin</category>
        
        <category>Profiling</category>
        
        
        <category>Python</category>
        
        <category>Profiling</category>
        
      </item>
    
      <item>
        <title>What Actually Are Containers?</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When I first heard about containers, I turned to my favourite search engine to
find out more about them and what they are. Most of the resources I have read
through, though, seemed to put a great emphasis on what containers are &lt;strong&gt;not&lt;/strong&gt;.
Containers are like virtual machines, but are &lt;strong&gt;not&lt;/strong&gt; virtual machines.&lt;/p&gt;

&lt;p&gt;So, what actually &lt;strong&gt;are&lt;/strong&gt; they? After many unhelpful reads, the first good blog
post that I’ve come across and that explains what containers indeed are is &lt;a href=&quot;https://jvns.ca/blog/2016/10/10/what-even-is-a-container/&quot;&gt;What
even is a container&lt;/a&gt;
by Julia Evans. If you go and read through that post (and I do recommended that
you do!), you will immediately learn that a container is like a cauldron where
you mix in the essential ingredients for a magic potion. Only in this case, the
ingredients are Linux kernel features.&lt;/p&gt;

&lt;p&gt;If many posts on containers make it sounds like they are some sort of black
magic (how can you have a &lt;em&gt;lightweight&lt;/em&gt; virtual machine?!), the aim of this post
is to show that the idea behind them is quite simple and made possible by a few
Linux kernel features, like &lt;strong&gt;control groups&lt;/strong&gt;, &lt;strong&gt;chroot&lt;/strong&gt; and &lt;strong&gt;namespaces&lt;/strong&gt;. I
will discuss each of them in turn in this post, but you should also be aware
that there are other kernel features involved in containers to make them robust
and secure. These other aspects, however, will be part of a separate post. Here
we shall just focus on the essential ingredients that can allow you to literally
handcraft and run something that you may call a container, in the sense that is
commonly used these days.&lt;/p&gt;

&lt;h2 id=&quot;containers-defined&quot;&gt;Containers Defined&lt;/h2&gt;

&lt;p&gt;Before we progress any further, I believe that we should take a moment to agree
on the meaning that we should attach to the word &lt;em&gt;container&lt;/em&gt;. Much of the
confusion, in my opinion, arises from the many different definitions that are
out there. According to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Operating-system-level_virtualization&quot;&gt;Wikipedia&lt;/a&gt;,
&lt;em&gt;containers&lt;/em&gt; …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… may look like real computers from the point of view of programs running in
them. A computer program running on an ordinary operating system can see all
resources … of that computer. However, programs running inside a container
can only see the container’s contents and devices assigned to the container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My way of paraphrasing this definition is the following: a container is a main
process that runs in user-space that gives you the impression that you are
running an operating system with its own view of the file system, processes,
etc… on top of the operating system that is installed on the machine. In this
sense, a container &lt;em&gt;contains&lt;/em&gt; part of the host resources and hosts its own
system and user applications.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-operating-systems&quot;&gt;A Note on Operating Systems&lt;/h2&gt;

&lt;p&gt;Another cause of confusion, sometimes, is the definition of &lt;em&gt;operating system&lt;/em&gt;
itself, so before moving on, I want to make sure we agree on this too. An
operating system can be thought as a &lt;em&gt;nut&lt;/em&gt;. At its core we have, well, the
kernel, which is in direct control of the hardware. On its own, the kernel is a
&lt;em&gt;passive&lt;/em&gt; component of an operating system. When an operating system is booted,
the kernel is the first part that gets loaded into memory and it quietly sits
there. Its purpose is to provide many “buttons and levers” (the &lt;em&gt;ABI&lt;/em&gt;) that just
wait to be pushed and pulled to operate the hardware and provide services to
system and user applications. Around the kernel one usually finds, surprise
surprise, a shell. You might be familiar with Bash, Ksh, Zsh, etc… which allow
you to manipulate the file system (create, copy, move, delete files from disk),
launch applications etc … . Some of these applications are included with the
operating system and build on top of the kernel services to provide basic
functionalities (e.g. most if not all the standard Unix tools). Such
applications are known as &lt;em&gt;system application&lt;/em&gt;. Other software, like text
editors, games, web browsers and alike are &lt;em&gt;user applications&lt;/em&gt;. In some cases,
it is hard to decide between system and user applications, as the line between
them is not very clear and open to debate. However, once you decide on what
works for you in terms of &lt;em&gt;system applications&lt;/em&gt;, an operating system becomes the
combination of them and the kernel. Thus, Linux is just a &lt;em&gt;kernel&lt;/em&gt; and not an
operating system. On the other hand, Ubuntu &lt;em&gt;is&lt;/em&gt; an example of a (Linux-based)
operating system, since a typical Ubuntu installation includes the compiled code
of the Linux kernel together with system applications.&lt;/p&gt;

&lt;p&gt;How do we tell which operating system we are currently running? Most Linux-based
operating system have some files in the ‘/etc’ folder that contains information
about the distribution name and the installed version. For example, on
Debian-based distributions, this file is typically named &lt;code class=&quot;highlighter-rouge&quot;&gt;os-release&lt;/code&gt;. In my
case, this is what I get if I peek at its content with &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ cat /etc/os-release
NAME=&quot;Ubuntu&quot;
VERSION=&quot;18.04 LTS (Bionic Beaver)&quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&quot;Ubuntu 18.04 LTS&quot;
VERSION_ID=&quot;18.04&quot;
HOME_URL=&quot;https://www.ubuntu.com/&quot;
SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;
BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;
PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;
VERSION_CODENAME=bionic
UBUNTU_CODENAME=bionic
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;creating-jails-with-chroot&quot;&gt;Creating Jails With &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;One of the earliest examples of “containers” was provided by the use of
&lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;. This is a system call that was introduced in the BSD in 1982 and all
it does is to change the apparent root directory for the process it is called
from, and all its descendant processes.&lt;/p&gt;

&lt;p&gt;How can we use such a feature to create a container? Suppose that you have the
root file system of a Linux-based operating system in a sub-folder in your file
system. For example, the new version of your favourite distribution came out and
you want to try the applications it comes with. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; wrapper
application that ships with most if not all Unix-based operating systems these
days to launch the default shell with the apparent root set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/myfavedistro-latest&lt;/code&gt;. Assuming that your favourite distribution comes with
most of the standard Unix tools, you will now be able to launch applications
from its latest version, using the services provided by the Linux kernel of the
host machine. Effectively, you are now running an instance of a different
operating system that is using the kernel loaded at boot time from the host
operating system (some sort of Frankenstein OS if you want).&lt;/p&gt;

&lt;p&gt;Does what we have just described fit into the above definition of &lt;em&gt;container&lt;/em&gt;?
Surely the default shell has its own view of the file system, which is a proper
restriction of the full file system of the host system. As for other resources,
like peripherals etc…, they happen to coincide with the host system, but at
least something is different. If we now look at the content of the &lt;code class=&quot;highlighter-rouge&quot;&gt;os-release&lt;/code&gt;
file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; folder (or the equivalent for the distribution of your
choice), you will quite likely see something different from before, so indeed we
have a running instance of a different operating system.&lt;/p&gt;

&lt;p&gt;The term that is usually associated to &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; is &lt;em&gt;jail&lt;/em&gt; rather than
&lt;em&gt;container&lt;/em&gt; though. Indeed, a process that is running within a new apparent root
file system cannot see the content of the parent folders and therefore it is
confined in a corner of the full, actual file system on the physical host. The
modified environment that we see from a shell started with chroot is sometimes
referred to as a &lt;em&gt;chroot jail&lt;/em&gt;. But perhaps another reason why the term &lt;em&gt;jail&lt;/em&gt;
is being used is that, without the due precautions, it is relatively easy to
break out of one (well, OK, maybe that’s not an official reason).&lt;/p&gt;

&lt;p&gt;If the above discussion sounds a bit too abstract to you then don’t worry
because we are about to get hour hands dirty with &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-minimal-chroot-jail&quot;&gt;A Minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; Jail&lt;/h2&gt;

&lt;p&gt;Since a &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail is pretty much like a &lt;em&gt;Bring Your Own System Application&lt;/em&gt;
party, with the kernel kindly offered by the host, a minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail can
be obtained with just the binary of a shell, and just a few other binary files.
Let’s try and create one with just &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; in it then. Under the assumption
that you have it installed on your Linux system, we can determine all the
shared object the &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; shell depends on with &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ ldd `which bash`
        linux-vdso.so.1 =&amp;gt;  (0x00007ffca3bca000)
        libtinfo.so.5 =&amp;gt; /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f9605411000)
        libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f960520d000)
        libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9604e2d000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f960563a000)
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So let’s create a folder that will serve as the new root file system, e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/minimal&lt;/code&gt;, and copy the bash executable in it, together with all its
dependencies. Copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; executable inside &lt;code class=&quot;highlighter-rouge&quot;&gt;~/minimal/bin&lt;/code&gt;, the libraries
from &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/minimal/lib&lt;/code&gt; and those from &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib64&lt;/code&gt;into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/minimal/lib64&lt;/code&gt;.
Then start the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
chroot ~/minimal
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now have a running bash session with a vanilla prompt format that
looks like this&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
bash-4.4#
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; is being executed as the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; user. This is because, under normal
circumstances, only &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; has the POSIX &lt;em&gt;capability&lt;/em&gt; of calling the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_CHROOT&lt;/code&gt; system call.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To see the current capabilities of a user one can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;capsh --print&lt;/code&gt;
  command. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Bounding set&lt;/code&gt; line shows the capabilities that have been
  inherited and that can be granted to a process from the current user.
  Capabilities represent another feature that is relevant for containers. They
  will be discussed in a separate post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you now play around a bit with this bash session, you will realise pretty
quickly that there isn’t much that you can do. Most of the standard Unix tools
are not available, not even &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. This container that we created as a &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;
jail is indeed minimal.&lt;/p&gt;

&lt;h2 id=&quot;a-more-interesting-example&quot;&gt;A More Interesting Example&lt;/h2&gt;

&lt;p&gt;Ubuntu has, since version 12.04, released base images of the operating system.
These are just root file system images in the format of a compressed tarball.
Suppose that a new stable version has come out and you want to give it a try
before you upgrade your system. One thing you can do is to go to the &lt;a href=&quot;http://cdimage.ubuntu.com/ubuntu-latest/releases/&quot;&gt;Ubuntu
Base releases&lt;/a&gt; page and
download the image that you want to test. Extract the content of the tarball
somewhere, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ubuntu-latest&lt;/code&gt; and “run” it with &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
chroot ~/ubuntu-latest
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are now running an instance of a new version of Ubuntu. To check that this is
indeed the case, look at the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/os-release&lt;/code&gt;. Furthermore, we
now have access to all the basic tools that make up the Ubuntu operating system.
For instance you could use aptitude to download and install new packages, which
could be useful to test the latest version of an application.&lt;/p&gt;

&lt;p&gt;If you intend to do some serious work with these kinds of &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jails, keep
in mind that some of the pseudo-file systems won’t be available from within the
jail. That’s why you would have to mount them manually with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# 
# 
# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
mount -t proc proc proc/
mount -t sysfs sys sys/
mount -o bind /dev dev/
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way you will be able to use, e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt; to look at the currently running
processes.&lt;/p&gt;

&lt;h2 id=&quot;leaky-containers&quot;&gt;Leaky Containers&lt;/h2&gt;

&lt;p&gt;With the simplicity of &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jails comes many issues that make these kind of
“containers” &lt;em&gt;leaky&lt;/em&gt;. What do I mean by this? Suppose that you want to
&lt;em&gt;containerise&lt;/em&gt; two resource-intensive applications into two different &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;
jails (for example, the two applications, for some reasons, require different
Linux-based operating systems). A typical example these days is that of
microservices that we would like to run on the same host machine. When the first
microservice fires up, it starts taking all the system resources (like CPU time
for instance), leaving no resources for the second microservice. The same can
happen for network bandwidth utilisation or disk I/O rates.&lt;/p&gt;

&lt;p&gt;Unfortunately, this issue cannot be addressed within &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jails, and their
usefulness is somewhat restricted. Whilst we can use it to create some sort of
“ancestral” containers, this is not the solution we would turn to in the long
run.&lt;/p&gt;

&lt;p&gt;Another serious issue with a poorly implemented &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail is the dreaded
S-word: &lt;em&gt;security&lt;/em&gt;. If nothing is done to prevent the user of the jail from
calling certain system calls (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; itself), it is relatively
straightforward to &lt;em&gt;break out&lt;/em&gt; of it. Recall how the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; wrapper utility
requires &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; privileges to be executed. When we launched a bash session
within the Ubuntu Base root file system, we were logged in as the root user.
Without any further configuration, nothing will prevent us from coding a simple
application that performs the following steps from within the jail:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a folder with the &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; system call or Unix wrapper tool.&lt;/li&gt;
  &lt;li&gt;Call the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; system call to change the apparent root to the newly
created folder.&lt;/li&gt;
  &lt;li&gt;Attempt to navigate sufficiently many levels up to hit the actual file system
root.&lt;/li&gt;
  &lt;li&gt;Launch a shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why does this work? A simple call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; system call only changes the
apparent root file system, but doesn’t actually change the current working
directory. The Unix &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; wrapper tool performs a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;chdir&lt;/code&gt;
&lt;em&gt;followed&lt;/em&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; to actually put the calling process inside the jail.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A minimal version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot(2)&lt;/code&gt; utility written in x86-64 assembly code
  can be found in the
  &lt;a href=&quot;https://github.com/P403n1x87/asm/blob/master/chroot/minichroot.asm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;minichroot.asm&lt;/code&gt;&lt;/a&gt;
  source file within the GitHub repository linked to this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A call to &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; which is not preceded by a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;chdir&lt;/code&gt; moves the jail
boundary &lt;em&gt;over&lt;/em&gt; the current location down another level, so that we are
effectively out of the jail. This means that we can &lt;code class=&quot;highlighter-rouge&quot;&gt;chdir&lt;/code&gt; up many times now to
try and hit the actual root of the host file system. Now run a shell session and
bang! We have full control of the host file system under the root user! Scary,
isn’t it?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to give this method a try, have a look at the
  &lt;a href=&quot;https://github.com/P403n1x87/asm/blob/master/chroot/jailbreak.asm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jailbreak.asm&lt;/code&gt;&lt;/a&gt;
  source file within the GitHub repository linked to this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A less serious matter, but still something that you might want to address, is
that, after we have mounted the &lt;code class=&quot;highlighter-rouge&quot;&gt;proc&lt;/code&gt; file system within the jail, the view of
the running processes from within the jail is the same as the one from the host
system. Again, if we do nothing to strip down capabilities from the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;
jail user, any process on the host machine can easily be killed (in the best
hypothesis) by the jail user. Indeed, &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; containers really require a lot
of care to prevent unwanted information from leaking. That is why present days
containers make use of a different approach to guarantee “airtight” walls, as we
shall soon see.&lt;/p&gt;

&lt;h1 id=&quot;control-groups&quot;&gt;Control Groups&lt;/h1&gt;

&lt;p&gt;As we have argued above, when we make use of containers we might want to run
multiple instances of them on the same machine. The problem that we face is
physical resource sharing among the containers. How can we make sure that a
running instance of a containerised process doesn’t eat up all the available
resources from the host machine?&lt;/p&gt;

&lt;p&gt;The answer is provided by a feature of the Linux kernel known as &lt;strong&gt;control
groups&lt;/strong&gt;. Usually abbreviated as &lt;code class=&quot;highlighter-rouge&quot;&gt;cgroups&lt;/code&gt;, control groups  were initially
released in 2007, based on earlier work of Google engineers, and originally
named &lt;em&gt;process containers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Roughly speaking, &lt;em&gt;cgroups&lt;/em&gt; allow you to limit, account for and isolate system
resources usage among running processes. As a simple example, consider the
scenario where one of your applications has a bug and starts leaking memory in
an infinite loop. Slowly but inevitably, your process ends up using all the
physical memory available on the machine it is running on, causing some of the
other processes to be killed at random by the OOM (Out of Memory) killer or, in
the worst case, crashing the entire system. If only you could assign a slice of
memory to the process that you want to test, then OOM killer would get rid of
only your faulty process, thus preventing your entire system from collapsing and
allowing the other applications to run smoothly without consequences. Well, this
is exactly one of the problems that &lt;em&gt;cgroups&lt;/em&gt; allow you to solve.&lt;/p&gt;

&lt;p&gt;But physical memory is only one of the aspects (or &lt;em&gt;subsystem&lt;/em&gt;, in the language
of &lt;em&gt;cgroups&lt;/em&gt;; another term that is used interchangeably is &lt;em&gt;controller&lt;/em&gt;) that
can be limited with the use of control groups. CPU cycles, network bandwidth,
disk I/O rate are other examples of resources that can be accounted for with
control groups. This way you can have two or more CPU-bound applications running
happily on the same machine, just by splitting the physical computing power
among them.&lt;/p&gt;

&lt;h2 id=&quot;a-hierarchy-of-cgroups&quot;&gt;A Hierarchy of cgroups&lt;/h2&gt;

&lt;p&gt;Linux processes are organised in a hierarchical structure. At boot, the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;
process, with PID 1, is spawned, and every other process originates from it as a
child process. This hierarchical structure is visible from the virtual file
system mounted at &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cgroups have a similar hierarchical structure but, contrary to processes (also
known as &lt;em&gt;tasks&lt;/em&gt; in &lt;em&gt;cgroup&lt;/em&gt;-speak), there may be &lt;em&gt;many&lt;/em&gt; of such hierarchies of
cgroups. This is the case for cgroups v1, but starting with version 2,
introduced in 2015, cgroups follow a unified hierarchic structure. It is
possible to use the two at the same time, thus having a hybrid cgroups resource
management, even though this is discouraged.&lt;/p&gt;

&lt;p&gt;Every cgroups inherits features from the parent cgroups and in general they can
get more restrictive the further you move down the hierarchy, without the
possibility of having overrides. Processes are then spawned or moved/assigned to
cgroups so that each process is in exactly one cgroup at any given time.&lt;/p&gt;

&lt;p&gt;This is, in a nutshell, what cgroups and cgroups2 are. A full treatment of
cgroups would require a post on its own and it would take us off-topic. If you
are curious to find out more about their history and their technical details,
you can have a look at the official documentation
&lt;a href=&quot;https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;https://www.kernel.org/doc/Documentation/cgroup-v2.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-work-with-control-groups&quot;&gt;How to Work with Control Groups&lt;/h2&gt;

&lt;p&gt;Let’s have a look at how to use cgroups to limit the total amount of physical
(or resident) memory that a process is allowed to use. The example is based on
cgroups v1 since they are still in use today even though cgroups v2 are
replacing them and there currently is an on-going effort of migrating from v1 to
v2.&lt;/p&gt;

&lt;p&gt;Since the introduction of cgroups in the Linux kernel, &lt;em&gt;every&lt;/em&gt; process belongs
to one and only one cgroup at any given time. By default, there is only one
cgroup, the &lt;em&gt;root&lt;/em&gt; cgroup, and every other process, together with its children,
is in it.&lt;/p&gt;

&lt;p&gt;Control groups are manipulated with the use of file system operations on the
cgroup mount-point (usually &lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;). For example, a new cgroup can be
created with the &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; command. Values can be set by writing on the files that
the kernel will create in the subfolder, and the simplest way is to just use
&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;. When a cgroup is no longer needed, it can be removed with &lt;code class=&quot;highlighter-rouge&quot;&gt;rmdir&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;rm
-r&lt;/code&gt; should not be used as an alternative!). This will effectively deactive the
cgroup only when the last process in it has terminated, or if it only contains
zombie processes.&lt;/p&gt;

&lt;p&gt;As an example, let’s see how to create a cgroup that restricts the amount of
total physical memory processes can use.&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# 
# 
# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
mkdir /sys/fs/cgroup/memory/mem_cg
echo 100m &amp;gt; /sys/fs/cgroup/memory/mem_cg/memory.limit_in_bytes
echo 100m &amp;gt; /sys/fs/cgroup/memory/mem_cg/memory.memsw.limit_in_bytes
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;memory.memsw.*&lt;/code&gt; is not present in &lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/fs/cgroup/memory&lt;/code&gt;, you might need
  to enable it on the kernel by adding the parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;cgroup_enable=memory
  swapaccount=1&lt;/code&gt; to, e.g., GRUB’s &lt;em&gt;kernel line&lt;/em&gt;. To do so, open
  &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/default/grub&lt;/code&gt; and append these parameters to
  &lt;code class=&quot;highlighter-rouge&quot;&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any process running in the &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_cg&lt;/code&gt; cgroup will be constrained to a total amount
(that is, physical plus swap) of memory equal to 100 MB. When a process gets
above the limit, the OOM killer will get rid of it. To add a process to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;mem_cg&lt;/code&gt; cgroup we have to write its PID to the &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt; file, e.g. with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
echo $$ &amp;gt; /sys/fs/cgroup/memory/mem_cg/tasks
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will put the currently running shell into the &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_cg&lt;/code&gt; cgroup. When we want
to remove the cgroup, we can just delete its folder with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
rmdir /sys/fs/cgroup/memory/mem_cg
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that, even if fully removed from the virtual file system, any removed
cgroups remain active until all the associated processes have terminated or have
become zombies.&lt;/p&gt;

&lt;p&gt;Alternatively, one can work with cgroups by using the tools provided by
&lt;code class=&quot;highlighter-rouge&quot;&gt;libcgroup&lt;/code&gt; (Red Hat), or &lt;code class=&quot;highlighter-rouge&quot;&gt;cgroup-tools&lt;/code&gt; (Debian). Once installed with the
corresponding package managers, the above commands can be replaced with the
following, perhaps more intuitive ones:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# 
# 
# 
# 
# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
cgcreate -g memory:mem_cg
cgset -r memory.limit_in_bytes=100m
cgset -r memory.memsw.limit_in_bytes=100m
cgclassify -g memory:mem_cg $$
cgdelete memory:mem_cg
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One can use &lt;code class=&quot;highlighter-rouge&quot;&gt;cgexec&lt;/code&gt; as an alternative to start a new process directly within a
cgroup:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
cgroup -g memory:mem_cg /bin/bash
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can test that the memory cgroup we have created works with the following
simple C program&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;stdlib.h&quot;
#include &quot;stdio.h&quot;
#include &quot;string.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Allocation #%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have created an infinite loop in which we allocate chunks of 1 MB of memory
at each iteration. The call to &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; is a trick to force the Linux kernel to
actually allocate the requested memory under the copy-on-write strategy.&lt;/p&gt;

&lt;p&gt;Once compiled, we can run it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;mem_cg&lt;/code&gt; cgroup with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
cgexec -g mem_cg ./a.out
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We expect to see about 100 successful allocations and after that the OOM killer
intervenes to stop our processes, since it would have reached the allocated
memory quota by then.&lt;/p&gt;

&lt;p&gt;Imagine now launching a &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail inside a memory cgroup like the one we
created above. Every application that we launch from within it is automatically
created inside the same cgroup. This way we can run, e.g., a microservice and we
can be assured that it won’t eat up all the available memory from the host
machine. With a similar approach, we could also make sure that it won’t reserve
all the CPU and its cores to itself, thus allowing other processes (perhaps in
different jails/containers) to run simultaneously and smoothly on the same
physical machine.&lt;/p&gt;

&lt;h1 id=&quot;linux-namespaces&quot;&gt;Linux Namespaces&lt;/h1&gt;

&lt;p&gt;The description of Linux namespaces given by the dedicated manpage sums up the
concept pretty well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A namespace wraps a global system resource in an abstraction that
  makes it appear to the processes within the namespace that they have
  their own isolated instance of the global resource.  Changes to the
  global resource are visible to other processes that are members of
  the namespace, but are invisible to other processes.  One use of
  namespaces is to implement containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So no questions asked about why Linux namespaces were introduced in the first
place. As the description says, they are used to allow processes to have their
own copy of a certain physical resource. For example, the most recent versions
of the Linux kernel allow us to define a namespace of the &lt;strong&gt;network&lt;/strong&gt; kind, and
every application that we run under it will have its own copy of the full
network stack. We have pretty much a rather lightweight way of virtualising an
entire network!&lt;/p&gt;

&lt;p&gt;Linux namespaces represent a relatively new feature that made its first
appearance in 2002 with the &lt;strong&gt;mount&lt;/strong&gt; kind. Since there were no plans to have
different kinds of namespaces, at that time the term &lt;em&gt;namespace&lt;/em&gt; was synonym of
&lt;em&gt;mount&lt;/em&gt; namespace. Beginning in 2006, more kinds were added and, presently,
there are plans for new kinds to be developed and included in future releases of
the Linux kernel.&lt;/p&gt;

&lt;p&gt;If you really want to identify a single feature that makes modern Linux
container possible, namespaces is arguably the candidate. Let’s try to see why.&lt;/p&gt;

&lt;h2 id=&quot;some-implementation-details&quot;&gt;Some Implementation Details&lt;/h2&gt;

&lt;p&gt;In order to introduce namespaces in Linux, a new system call, &lt;code class=&quot;highlighter-rouge&quot;&gt;unshare&lt;/code&gt;, has
been added to the kernel. Its use is “to allow a process to control its shared
execution context without creating a new process.” (quoted verbatim from the
manpage of &lt;code class=&quot;highlighter-rouge&quot;&gt;unshare(2)&lt;/code&gt;). What does this mean? Suppose that, at a certain point,
you want the current process to be moved to a new network namespace so that it
has its own “private” network stack. All you have to do is make a call to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;unshare&lt;/code&gt; system call with the appropriate flag set.&lt;/p&gt;

&lt;p&gt;What if we do want to spawn a new process in a new namespace instead? With the
introduction of namespaces, the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; system call has been extended
with new flags. When &lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt; is called with some of these flags set, new
namespaces of the corresponding kinds are created and the new process is
automatically made a member of them.&lt;/p&gt;

&lt;p&gt;The namespace information of the currently running processes is stored in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;proc&lt;/code&gt; file system, under the new &lt;code class=&quot;highlighter-rouge&quot;&gt;ns&lt;/code&gt; subfolder of every PID folder (i.e.
&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/[pid]/ns/&lt;/code&gt;). This as well as other details of how namespaces are
implemented can be found in the
&lt;a href=&quot;http://man7.org/linux/man-pages/man7/namespaces.7.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;namespaces(7)&lt;/code&gt;&lt;/a&gt;
manpage.&lt;/p&gt;

&lt;h2 id=&quot;how-to-work-with-namespaces&quot;&gt;How to Work with Namespaces&lt;/h2&gt;

&lt;p&gt;As with cgroups, an in-depth description of namespaces would require a post on
its own. So we will have a look at just one simple example. Since networks are
ubiquitous these days, let’s try to launch a process that has its own
virtualised network stack and that is capable of communicating with the host
system via a network link.&lt;/p&gt;

&lt;p&gt;This is the plan:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a linked pair of virtual ethernet devices, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;veth0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;veth1&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;veth1&lt;/code&gt; to a new network namespace&lt;/li&gt;
  &lt;li&gt;Assign IP addresses to the virtual NICs and bring them up.&lt;/li&gt;
  &lt;li&gt;Test that the can transfer data between them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a simple bash script that does exactly this. Note that the creation of a
network namespace requires a capability that normal Unix user don’t usually
have, so this is why you will need to run them as, e.g., root.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Create a new network namespace&lt;/span&gt;
ip netns add &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a pair of virtual ethernet interfaces&lt;/span&gt;
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add veth0 &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;veth peer name veth1

&lt;span class=&quot;c&quot;&gt;# Configure the host virtual interface&lt;/span&gt;
ip addr add 10.0.0.1/24 dev veth0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;veth0 up

&lt;span class=&quot;c&quot;&gt;# Move the guest virtual interface to the test namespace&lt;/span&gt;
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;veth1 netns &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Configure the guest virtual interface in the test namespace&lt;/span&gt;
ip netns &lt;span class=&quot;nb&quot;&gt;exec test &lt;/span&gt;bash
ip addr add 10.0.0.2/24 dev veth1
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;veth1 up

&lt;span class=&quot;c&quot;&gt;# Start listening for TCP packets on port 2000&lt;/span&gt;
nc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 2000&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On line 2 we use the extended, namespace-capable version of &lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt; to create a new
namespace of the network kind, called &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;. We then create the pair of virtual
ethernet devices with the command on line 5. On line 12 we move the &lt;code class=&quot;highlighter-rouge&quot;&gt;veth1&lt;/code&gt;
device to the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; namespace and, in order to configure it, we launch a bash
session inside &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; with the command on line 15. Once in the new namespace we
can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;veth1&lt;/code&gt; device again, which has now disappeared from the default
(also known as &lt;em&gt;global&lt;/em&gt;) namespace. You can check that by opening a new terminal
and typing &lt;code class=&quot;highlighter-rouge&quot;&gt;ip link list&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;veth1&lt;/code&gt; device should have disappeared after the
execution of the command on line 12.&lt;/p&gt;

&lt;p&gt;We can then use &lt;code class=&quot;highlighter-rouge&quot;&gt;netcat&lt;/code&gt; to listen to TCP packets being sent on port 2000 from
within the new namespace (line 20). On a new bash session in the default
namespaces, we can start &lt;code class=&quot;highlighter-rouge&quot;&gt;netcat&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
nc 10.0.0.2 2000
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to start sending packets to the new namespace &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; via the link between
&lt;code class=&quot;highlighter-rouge&quot;&gt;veth0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;veth1&lt;/code&gt;. Everything that you type should now be echoed by the bash
session in the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; namespace after you press Enter.&lt;/p&gt;

&lt;h1 id=&quot;putting-it-all-together&quot;&gt;Putting It All Together&lt;/h1&gt;

&lt;p&gt;Now let’s see how to put all the stuff we have discussed thus far together to
handcraft some more (better) containers.&lt;/p&gt;

&lt;h2 id=&quot;process-containment-for-chroot-jails&quot;&gt;Process Containment for &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; Jails&lt;/h2&gt;

&lt;p&gt;With our first attempt at manually crafting a container with &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;, we
discovered a few weaknesses of different nature that made the result quite
leaky. Let’s try to address some of those issues, for instance the fact that all
the processes running on the host system are visible from within the container.
To this end, we shall make use of the Ubuntu Base image that we used in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; section. We then combine &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; with namespaces in the following way.
Assuming that you have created the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; network namespace as described in the
previous section, run&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
unshare --fork -p -u ip netns exec test chroot ubuntu-latest
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--fork&lt;/code&gt; switch is required by the &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; switch because we want to spawn a
new bash session with PID 1, rather than within the calling process. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;
switch will give us a new hostname that we are then free to change without that
affecting the host system. We then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt; new capability of creating
namespaces of the network kind to create the Ubuntu Base &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail.&lt;/p&gt;

&lt;p&gt;The first improvement is now evident. From inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail, mount the
&lt;code class=&quot;highlighter-rouge&quot;&gt;proc&lt;/code&gt; file system with, e.g.&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
mount -t proc proc /proc
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then look at the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 11:54 ?        00:00:00 /bin/bash -i
root         8     1  0 11:56 ?        00:00:00 ps -ef
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The bash session that we started inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail has PID 1 and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt;
tool from the Ubuntu Base distribution has PID 8 and parent PID 1, i.e. the
&lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail. That’s all the processes that we can see from here! If we try to
identify this bash shell from the global namespace we find something like this&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ ps -ef | grep unshare | grep -v grep
root      5829  4957  0 12:54 pts/1    00:00:00 sudo unshare --fork -p -u ip netns exec test chroot ubuntu-latest
root      5830  5829  0 12:54 pts/1    00:00:00 unshare --fork -p -u ip netns exec test chroot ubuntu-latest
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PIDs in your case will quite likely be different, but the point here is that,
with namespaces, we have broken the assumption that a process has a &lt;em&gt;unique&lt;/em&gt;
process ID.&lt;/p&gt;

&lt;h2 id=&quot;wall-fortification&quot;&gt;Wall Fortification&lt;/h2&gt;

&lt;p&gt;Whilst the process view problem has been solved (we can no longer kill the host
processes since we cannot see them), the fact that the &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail runs as
root still leaves us with the &lt;em&gt;jailbreak&lt;/em&gt; issue. To fix this we just use
namespaces again the way they where meant to be used originally. Recall that,
when they were introduced, namespaces were of just one kind: mount. In fact,
back then, namespaces was a synonym of &lt;em&gt;mount&lt;/em&gt; namespace.&lt;/p&gt;

&lt;p&gt;The other ingredient that is needed to actually secure against jail breaking is
the &lt;code class=&quot;highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt; system call. At first sight it might look like &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt;, but it
is quite different. It allows you to put the old root to a new location and use
a new mount point as the new root for the calling process.&lt;/p&gt;

&lt;p&gt;The key here is the combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt; and the namespace of the kind
mount that allows us to specify a new root and manipulate the mount points that
are visible inside the container that we want to create, without messing about
with the host mount points. So here is the general idea and the steps required:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start a shell session from a shell executable inside the root file system in
a mount namespace.&lt;/li&gt;
  &lt;li&gt;Unmount all the current mount points, including that of type &lt;code class=&quot;highlighter-rouge&quot;&gt;proc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Turn the Ubuntu Base root file system into a (bind) mount point&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt; and `chroot to swap the new root with the old one&lt;/li&gt;
  &lt;li&gt;Unmount the new location of the old root to conceal the full host file
system.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps can be performed with the following initialisation script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;umount &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
umount /proc
mount &lt;span class=&quot;nt&quot;&gt;--bind&lt;/span&gt; ubuntu-latest/ ubuntu-latest/
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ubuntu-latest/
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; old-root &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;old-root
pivot_root &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; old-root/
&lt;span class=&quot;nb&quot;&gt;exec chroot&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;--init-file&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; proc proc /proc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; umount &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /old-root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Copy and paste these lines in a file, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;cnt-init.sh&lt;/code&gt; and then run&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;# &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sudo unshare --fork -p -u -m ubuntu-latest/bin/bash --init-file cnt-init.sh
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can now check that the &lt;code class=&quot;highlighter-rouge&quot;&gt;/old-root&lt;/code&gt; folder is empty, meaning that we now have
no ways of accessing the full host file system, but only the corner that
corresponds to the content of the new root, i.e. the content of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu-latest&lt;/code&gt; folder. Furthermore, you can go on and check that our recipe for
breaking out of a vanilla &lt;code class=&quot;highlighter-rouge&quot;&gt;chroot&lt;/code&gt; jail does not work in this case, because the
jail itself is now an effective, rather than apparent, root!&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;We have come to the end of this journey across the features of the Linux kernel
that make containers possible. I hope this has given you a better understanding
of what many people mean when they say that containers are like virtual
machines, but are &lt;em&gt;not&lt;/em&gt; virtual machine.&lt;/p&gt;

&lt;p&gt;Whilst spinning containers by hand could be fun, and quite likely an interesting
educational experience for many, to actually produce something that is robust
and secure enough requires some effort. Even in our last examples there are many
things that need to be improved, starting from the fact that we would want to
avoid giving control of our containers to users as root. Despite all our effort
to improve containment of resources, an user logged in as root can still do some
nasty things (open lower-numbered ports and all such kind of businesses…). The
point here is that, if you need containers for production environments, you
should turn to well tested and established technologies, like LXC, Docker etc…
.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 17:42:00 +0000</pubDate>
        <link>https://p403n1x87.github.io//linux/2018/08/04/containers.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//linux/2018/08/04/containers.html</guid>
        
        <category>containers</category>
        
        <category>jails</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Extending Python with Assembly</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;If you have landed on this page, you must have had one between two only possible reactions to the title of this post, either “Hmm, this sounds interesting” or “Just, why?”. The straight answer is, well, “just, because”. And perhaps a bit more articulated answer is: because the people in the first category probably enjoy this kind of things :).&lt;/p&gt;

&lt;p&gt;Reactions aside, the subject of this post is the coding of an extension for Python written in pure Assembly for the Intel x86-64 architecture on a Linux-based operating system. If you are familiar with general assembly but have never coded for the architecture that we are targeting, it is perhaps worth reading through my previous post “&lt;a href=&quot;/assembly/x86_64/2016/08/10/getting-started-with-x68-asm.html&quot;&gt;Getting Started with x86-64 Assembly on Linux&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;I will also assume that you are somewhat familiar with extending Python with C. If not, then it probably is a good idea to go through the &lt;a href=&quot;https://docs.python.org/3/extending/extending.html&quot;&gt;official documentation&lt;/a&gt; before reading on, or some things might not make too much sense. The approach of this post is by example and builds on knowledge about C to transition to Assembly. My favourite assembler on Linux is NASM, since it supports the Intel syntax, the one that I am more comfortable with. Therefore the only dependencies for following along are the NASM assembler and the GNU linker &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt;. Optionally, we can make use of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; to assemble and link our code, and perhaps &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; to test it in a clean environment. You will find all the relevant files in the linked &lt;a href=&quot;https://github.com/P403n1x87/asm/tree/master/python&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now it’s time to jump straight into the code.&lt;/p&gt;

&lt;h1 id=&quot;the-code&quot;&gt;The Code&lt;/h1&gt;

&lt;p&gt;There isn’t much more to say before we can see the code really, so here it is. This is the content of my &lt;code class=&quot;highlighter-rouge&quot;&gt;asm.asm&lt;/code&gt; source file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;%include&lt;/span&gt;                &lt;span class=&quot;s&quot;&gt;&quot;asm/python.inc&quot;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;GLOBAL&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;PyInit_asm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_sayit_name&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sayit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l_sayit_doc&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This method has something important to say.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l_sayit_msg&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Assembly is great fun! :)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l_sayit_msg_len&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_msg&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_module_name&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;asm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_asm_methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;;; struct PyMethodDef[] *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ISTRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_name&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_meth&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm_sayit&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_flags&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METH_NOARGS&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_doc&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_doc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEND&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NullMethodDef&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_asm_module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;;; struct PyModuleDef *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ISTRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef_HEAD_INIT&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_name&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_module_name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_doc&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_size&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_methods&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_asm_methods&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_slots&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_traverse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_clear&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_free&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEND&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asm_sayit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;;; ----------------------------------------------------------------&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;; SYS_WRITE&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;; STDOUT&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_msg&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_msg_len&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Py_None&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;inc&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_refcnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; end asm_sayit&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;PyInit_asm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;;; --------------------------------------------------------------&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PYTHON_API_VERSION&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_asm_module&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;PyModule_Create2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; end PyInit_asm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you have never written a C extension for Python before, this might look a bit mysterious to you, although the general structure, at least, should be quite clear after you’ve glimpsed through the official Python documentation on extending Python with C.&lt;/p&gt;

&lt;p&gt;We shall now analyse every single part of the above code sample in details to see what each block of code does.&lt;/p&gt;

&lt;h2 id=&quot;shared-object&quot;&gt;Shared Object&lt;/h2&gt;

&lt;p&gt;On the very first line of the source we see the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our goal is to assemble and link our code into an ELF64 &lt;em&gt;shared object&lt;/em&gt; file. Contrary to ordinary program code, shared object files are dynamically loaded into random memory addresses. It is therefore important that all our code is &lt;em&gt;position-independent&lt;/em&gt;. One way of doing this is to make sure that any memory reference is not absolute, but relative to the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;RIP&lt;/code&gt; register, which points to the current instruction being executed. This guarantees that, no matter where the shared object is loaded into memory, references to local variables are correct. In 64-bit mode, NASM defaults to absolute addresses, therefore the above line is necessary to switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;RIP&lt;/code&gt;-relative addresses.&lt;/p&gt;

&lt;h2 id=&quot;the-cpython-headers&quot;&gt;The CPython Headers&lt;/h2&gt;

&lt;p&gt;On line 3 we include a file to our main Assembly source. Given the simplicity of this example, we could have included the content of the &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; file within &lt;code class=&quot;highlighter-rouge&quot;&gt;asm.asm&lt;/code&gt; itself. However, for larger projects it is perhaps good practice to separate declarations and actual code, like it is usually done in C, with &lt;code class=&quot;highlighter-rouge&quot;&gt;.h&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.c&lt;/code&gt; files. In fact, the &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; file includes the equivalent of structures and macros as declared in the CPython header files. As far as I’m aware, there are no assembly-specific include files provided by the maintainers of CPython, so we have to go through the extra effort of typing them ourselves. We will get back to the content of this file later on.&lt;/p&gt;

&lt;h2 id=&quot;exporting-global-symbols&quot;&gt;Exporting Global Symbols&lt;/h2&gt;

&lt;p&gt;Line 5 is an important one. It exports the symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;PyInit_asm&lt;/code&gt;, of type &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;, and makes it available for external programs. This is the function that CPython calls the moment we load the &lt;code class=&quot;highlighter-rouge&quot;&gt;asm&lt;/code&gt; module with &lt;code class=&quot;highlighter-rouge&quot;&gt;import asm&lt;/code&gt; from the Python interpreter. If we do not export this symbol, then CPython won’t be able to find the code necessary to initialise the module. In analogy with C, this is equivalent to declaring a non-static function.&lt;/p&gt;

&lt;h2 id=&quot;immutable-strings&quot;&gt;Immutable Strings&lt;/h2&gt;

&lt;p&gt;Next we have the read-only data section&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rodata&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_sayit_name&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sayit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l_sayit_doc&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This method has something important to say.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l_sayit_msg&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Assembly is great fun! :)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l_sayit_msg_len&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_msg&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_module_name&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;asm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we initialise the strings that we will need later on. As they won’t change during the course of the code execution, we put them in a read-only section of the shared object. The GNU C compiler does just the same thing with every literal string that you use in C code. You will notice references to their address in the following section, that of (read-write) initialised data.&lt;/p&gt;

&lt;h2 id=&quot;cpython-data-structures&quot;&gt;CPython Data Structures&lt;/h2&gt;

&lt;p&gt;Next is the section of initialised data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_asm_methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;;; struct PyMethodDef[] *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ISTRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_name&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_meth&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm_sayit&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_flags&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METH_NOARGS&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_doc&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_doc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEND&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NullMethodDef&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l_asm_module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;;; struct PyModuleDef *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ISTRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef_HEAD_INIT&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_name&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_module_name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_doc&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_size&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_methods&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_asm_methods&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_slots&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_traverse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_clear&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_free&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEND&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is where things start to get interesting, and the content of the &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; file comes into play. The first two labels point to the beginning of CPython-specific structures. The first is an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyMethodDef&lt;/code&gt; structures. As the name suggests, each instance of this structure is used to hold information about a method that should be made available to the Python interpreter from within our module. To find out in which header file it is defined, we can use the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
grep -nr /usr/include/python3.6 -e &quot;struct PyMethodDef&quot;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case, I get that the structure is defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/include/python3.6/methodobject.h&lt;/code&gt;, starting from line 54. Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; we then have the equivalent structure declaration&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;n&quot;&gt;STRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_name&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; const char *&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_meth&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; PyCFunction&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_flags&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; int&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml_doc&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; const char *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENDSTRUC&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;NullMethodDef&lt;/code&gt; is a NASM macro that conveniently defines the &lt;em&gt;sentinel&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;PyMethodDef&lt;/code&gt; structure, which is used to mark the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyMethodDef&lt;/code&gt; array pointed by &lt;code class=&quot;highlighter-rouge&quot;&gt;l_asm_methods&lt;/code&gt;. Its definition is also in the &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; file and, as you can see, simply initialises a new instance of the structure with all the fields set to &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; or 0, depending on their semantics, i.e. whether they are memory pointers or general integers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;cp&quot;&gt;%define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NullMethodDef&lt;/span&gt;         &lt;span class=&quot;kt&quot;&gt;dq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; is not a native NASM value. To align the coding conventions with C, I have defined NULL as a constant in &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; and assigned the value of 0 to it. The idea is that, like in C, it makes the intent of the code clearer, since any occurrence of &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; indicates a null pointer rather than just the literal value 0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next label, &lt;code class=&quot;highlighter-rouge&quot;&gt;l_asm_module&lt;/code&gt;, points to an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModuleDef&lt;/code&gt; structure, which is pretty much the core data structure of our Python module. It contains all the relevant metadata that is then passed to CPython for correct initialisation and use of the module. Its definition is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;moduleobject.h&lt;/code&gt; header file and, at first sight, looks a bit complicated, with some references to other structures and C macros.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PyModuleDef_Base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PyMethodDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef_Slot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;traverseproc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inquiry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;freefunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So lets take our time to figure out what its byte content looks like. The first field is an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModuleDef_Base&lt;/code&gt; structure, which is defined in the same header file, just a few lines above. The non-trivial bit in this new structure is the first part, &lt;code class=&quot;highlighter-rouge&quot;&gt;PyObject_HEAD&lt;/code&gt;, which looks like a C macro. As the name suggest, its definition is quite likely to be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;object.h&lt;/code&gt;. Indeed, there we find&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define PyObject_HEAD                   PyObject ob_base;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;so our chase continues. The definition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyObject&lt;/code&gt; structure can be found a few lines below. Again, all the fields are quite simple, i.e. just integers value or memory pointers, except for the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;_PyObject_HEAD_EXTRA&lt;/code&gt;. We then have to jump back up a few lines, to find that this macro is conditionally defined as either nothing or &lt;code class=&quot;highlighter-rouge&quot;&gt;0, 0&lt;/code&gt;. By default, the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_TRACE_REFS&lt;/code&gt; is not defined, so in our case &lt;code class=&quot;highlighter-rouge&quot;&gt;_PyObject_HEAD_EXTRA&lt;/code&gt; evaluates to nothing. Backtracking from our macro chase in CPython headers, we see that we can define the following structures in &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;n&quot;&gt;STRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_refcnt&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; Py_ssize_t&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_type&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; struct _typeobject *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENDSTRUC&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef_Base&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_base&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyObject_size&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_init&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; PyObject *&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_index&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; Py_ssize_t&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_copy&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; PyObject *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENDSTRUC&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STRUC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_base&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyModuleDef_Base_size&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_name&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; const char *&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_doc&lt;/span&gt;                &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; const char *&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_size&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; Py_ssize_t&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_methods&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; PyMethodDef *&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_slots&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; struct PyModuleDef_Slot *&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_traverse&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; traverseproc&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_clear&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; inquiry&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_free&lt;/span&gt;               &lt;span class=&quot;kt&quot;&gt;resq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; freefunc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ENDSTRUC&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can easily guess, NASM generates the constants &lt;code class=&quot;highlighter-rouge&quot;&gt;PyObject_size&lt;/code&gt; etc… automatically so that they can be used to reserve enough memory to hold the entire structure in the definition of other structures. This makes nesting quite easy to implement in NASM.&lt;/p&gt;

&lt;h2 id=&quot;local-and-global-functions&quot;&gt;Local and Global Functions&lt;/h2&gt;

&lt;p&gt;Finally we get to the actual code that will get executed by CPython when our module is loaded and initialised, and when the methods that it provides are called.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; ---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asm_sayit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;;; ----------------------------------------------------------------&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;; SYS_WRITE&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;; STDOUT&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_msg&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_sayit_msg_len&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Py_None&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;inc&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ob_refcnt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; end asm_sayit&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;PyInit_asm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;;; --------------------------------------------------------------&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PYTHON_API_VERSION&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_asm_module&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;PyModule_Create2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;; end PyInit_asm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In fact, we have a total of two functions, one local and one global. The first one, &lt;code class=&quot;highlighter-rouge&quot;&gt;asm_sayit&lt;/code&gt;, is the only method contained in our module. All it does is to write a string, &lt;code class=&quot;highlighter-rouge&quot;&gt;l_sayit_msg&lt;/code&gt;, to standard output by invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_WRITE&lt;/code&gt; system call. Perhaps the most interesting bit of this function is the code on lines 61-62. This is the idiom for any function that wishes to return &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; in Python. Recall that, in Python, &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; is an object instantiated by CPython. As such, our shared library needs to import it as an external symbol. This is why you will find the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;PyNone&lt;/code&gt; defined as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;cp&quot;&gt;%define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Py_None&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;_Py_NoneStruct&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;together with the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;kr&quot;&gt;EXTERN&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_Py_NoneStruct&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in the &lt;code class=&quot;highlighter-rouge&quot;&gt;python.inc&lt;/code&gt; file. This is equivalent to the two lines&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;PyAPI_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Py_NoneStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Don't use this directly */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define Py_None (&amp;amp;_Py_NoneStruct)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in the &lt;code class=&quot;highlighter-rouge&quot;&gt;object.h&lt;/code&gt; header file, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; object is defined. All of this explains line 61, but what about line 62? This has to do with &lt;a href=&quot;https://docs.python.org/3/c-api/refcounting.html&quot;&gt;Reference Counting&lt;/a&gt;. In a nutshell, every object created in Python comes with a counter that keeps track of all the references attached to it. When the counter gets down to 0, the object can be de-allocated from memory and resources freed for other objects to use. This is how Python, which heavily relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;, can keep memory leaks at bait. It is therefore very important to properly maintain reference counts in Python extensions. As &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; is a Python object like any others, when we return a reference to it, we have to bump its reference count. In C, this is conveniently done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_INCREF&lt;/code&gt; macro. Its definition is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;object.h&lt;/code&gt; and, as it is easy to guess, it just increases the &lt;code class=&quot;highlighter-rouge&quot;&gt;ob_refcnt&lt;/code&gt; field of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyObject&lt;/code&gt; structure. This is precisely what we do on line 62.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Stack Frames Matter!&lt;/strong&gt; You might be wondering why we are taking care of creating a stack frame on function entry, and cleaning up after ourself on leave. The reason is a pretty obvious one: we don’t know what code will call ours, so it is safe to make sure that stack alignment is preserved across calls by doing what every function is expected to do. When I was lying down the code for this post, I was getting a SIGSEGV exception, and the debugger revealed that the instruction &lt;code class=&quot;highlighter-rouge&quot;&gt;movaps&lt;/code&gt; was trying to store the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmm0&lt;/code&gt; register on a memory location that was not a multiple of 16. The problem was solved by the extra 8 bytes from &lt;code class=&quot;highlighter-rouge&quot;&gt;push rbp&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second and last function is our global exported symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;PyInit_asm&lt;/code&gt;. It gets called by CPython as soon as we &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; the module with &lt;code class=&quot;highlighter-rouge&quot;&gt;import asm&lt;/code&gt;. In this simple case, we don’t have to do much here. In fact, all we have to do is call a standard CPython function and pass it the instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModuleDef&lt;/code&gt; allocated at &lt;code class=&quot;highlighter-rouge&quot;&gt;l_asm_module&lt;/code&gt;. As we have briefly seen, this contains all the information about our module, from the documentation to the list of methods.&lt;/p&gt;

&lt;p&gt;Now, if you have read through the official documentation on how to extend Python with C, you might be wondering why we are calling &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModule_Create2&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModule_Create&lt;/code&gt; (is there a typo?), and why we are passing it two arguments instead of one. If you are starting to smell a C macro, then you are correct! Long story short, &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModule_Create&lt;/code&gt; is a macro defined as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define PyModule_Create(module) PyModule_Create2(module, PYTHON_API_VERSION)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHON_API_VERSION&lt;/code&gt; defined as the literal 1013. So the actual function to call is indeed &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModule_Create2&lt;/code&gt;, and it takes two arguments.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Did you notice that weird &lt;code class=&quot;highlighter-rouge&quot;&gt;WRT ..plt&lt;/code&gt;? Remember the discussion about ensuring position-independent code? Since we have no clue of where the &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModule_Create2&lt;/code&gt; function resides in memory, we have to rely on some sort of indirection. This is provided by the so-called &lt;em&gt;Procedure Linkage Table&lt;/em&gt;, or &lt;em&gt;PLT&lt;/em&gt; for short, which is some code that is part of our shared library. When we call &lt;code class=&quot;highlighter-rouge&quot;&gt;PyModule_Create2 WRT ..plt&lt;/code&gt;, we are jumping to the PLT section of our object file in memory, which contains the necessary code to make the actual jump to the function that we want to call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;Once our assembly code is ready, it needs to be assembled and linked into a shared object file. We will now see how to perform these steps, and how to test and install our Python extension.&lt;/p&gt;

&lt;h2 id=&quot;assembling-and-linking&quot;&gt;Assembling and Linking&lt;/h2&gt;

&lt;p&gt;Once the code is ready, it needs to be assembled and linked into the final shared object file. The NASM assembler is invoked with minimal arguments as&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
nasm -f elf64 -o asm/asm.o asm/asm.asm
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates an intermediate object file &lt;code class=&quot;highlighter-rouge&quot;&gt;asm.o&lt;/code&gt;. To create the final shared object file, we use the GNU linker with the following arguments&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
ld -shared -o asm/asm.so asm/asm.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;-shared&lt;/code&gt; switch, which instructs the linker to create a shared object file.&lt;/p&gt;

&lt;h2 id=&quot;how-to-test-the-module&quot;&gt;How to Test the Module&lt;/h2&gt;

&lt;p&gt;The first thing that you might want to do is to manually test that the shared object file works fine with Python. For CPython to be able to find the module, we need to ensure that its location is included in the search path. One way is to add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; environment variable. For example, from within the project folder, we can launch Python with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
PYTHONPATH=./asm python3
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and from the interactive session we should be able to import the module with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asm&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, we can add the search path to &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.path&lt;/code&gt; with these few lines of Python code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./asm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asm&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have successfully imported our module in Python, we can test that its method &lt;code class=&quot;highlighter-rouge&quot;&gt;sayit&lt;/code&gt; works as expected&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'This method has something important to say.'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;great&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I hope that you would agree :).&lt;/p&gt;

&lt;h2 id=&quot;distributing-the-module&quot;&gt;Distributing the Module&lt;/h2&gt;

&lt;p&gt;The simplicity of our sample module wouldn’t justify the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;setuptools&lt;/code&gt; for distribution. In this case, a simple, old-fashioned Makefile is the simplest solution to go for. Even for larger projects, you would probably still delegate the build job of your code to a Makefile anyway, which would then get called from your &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; at some phase, perhaps during &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;. However, the recommended standard is that you build &lt;em&gt;wheels&lt;/em&gt; instead of &lt;em&gt;eggs&lt;/em&gt;, and the requirement is that you provide pre-built binaries with your package.&lt;/p&gt;

&lt;p&gt;This being said, let’s see how to distribute the module. As we have seen in the previous section, the shared object needs to resides in one of the Python search paths. The easiest way to find out what these paths are on the platform that you are targeting is to launch the Python interpreter and print the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.path&lt;/code&gt;. On my platform, I get the following output&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.6.3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oct&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/lib/python36.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/lib/python3.6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/lib/python3.6/lib-dynload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/local/lib/python3.6/dist-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/lib/python3/dist-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/lib/python3.6/dist-packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Makefile could then contain the following line inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; rule:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;: default
	&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;asm/asm.so /usr/lib/python&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHON_TARGET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/asm.so&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHON_TARGET&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;3.6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To automate the building and testing process of the module, we could use Docker to build an image out of the target platform and trigger a build, and perhaps execute some unit tests too. A simple Dockerfile that does the minimum work to build and test would look something like the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  ubuntu:latest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  root&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;   . asm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN   &lt;/span&gt;apt-get update              &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;      apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;            &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        nasm                        &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        python3-pytest              &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        build-essential
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;   PYTHON_TARGET=3.5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;asm                      &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;      make                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;      make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;      python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pytest &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, we are targeting the latest stable version of Ubuntu, which comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;python3.5&lt;/code&gt;. We make sure we install all the required dependencies, the assembler and the standard build tools, along with &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pytest&lt;/code&gt; to perform unit testing once our module builds successfully.&lt;/p&gt;

&lt;p&gt;The bare minimum that we can test is that the import of the module works fine and that we can call its method. So a possible &lt;code class=&quot;highlighter-rouge&quot;&gt;test_asm.py&lt;/code&gt; test script would look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asm&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Whilst I appreciate that the cases where you’d want to seriously consider extending Python with Assembly code are rare, it is undoubtedly the case that, if you enjoy experimenting with code, this could be a fun and instructing experience. In my case, this has forced me to go look into the CPython header files, which I probably wouldn’t have if I were using C. I now know more about the internal workings of Python and a clearer idea of how CPython is structured.&lt;/p&gt;

&lt;p&gt;As always, I hope you have enjoyed the read. Happy Assembly coding! :)&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 23:32:00 +0000</pubDate>
        <link>https://p403n1x87.github.io//python/assembly/2018/03/23/asm_python.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//python/assembly/2018/03/23/asm_python.html</guid>
        
        <category>Python</category>
        
        <category>Assembly</category>
        
        
        <category>Python</category>
        
        <category>Assembly</category>
        
      </item>
    
      <item>
        <title>IoT with WebSockets and Python's AsyncIO.</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this post, we will get back to the topic of IoT to introduce two new
technologies by example: &lt;strong&gt;WebSockets&lt;/strong&gt; and &lt;strong&gt;Asynchronous I/O&lt;/strong&gt; in Python. The project that will allow us to explore them is a simple system of two LEDs that we will control with the gravity sensor of an Android device via a Raspberry Pi over a network.&lt;/p&gt;

&lt;p&gt;The post is divided into two parts. The first one is theoretical in nature and will cover the essential technical details of the two main subjects, that is &lt;em&gt;WebSockets&lt;/em&gt; and Python’s &lt;em&gt;asyncio&lt;/em&gt;. In the second part we will have a look at the circuit that we are going to control over the network and discuss the server and client code.&lt;/p&gt;

&lt;p&gt;But before we dive into the study of the topics of this post, it is perhaps best to first have a high level view of how all the pieces fit together, thus motivating the choices of technologies mentioned above. The idea of the project stems from the following scenario: suppose you want to build a device that can be controlled over the network, e.g. an hand-held device like a phone. As we have seen in &lt;a href=&quot;/raspberry%20pi/iot/2017/07/31/intro-to-iot.html&quot;&gt;a previous post&lt;/a&gt;, one way of achieving this is by using a single-board computer like a Raspberry Pi and control it via a web server.&lt;/p&gt;

&lt;p&gt;Now, what if you wanted more control over the connection method to the device, and perhaps a bi-directional channel to let data from, e.g. sensors on the device, to flow upstream to the controlling device? An elegant way of achieving this goal these days is with &lt;strong&gt;WebSockets&lt;/strong&gt;, which allow (full) duplex communication between pairs of connected devices. So, for instance, we could have a WebSocket server running on a Raspberry Pi, and have a native application on an Android device to run a WebSocket client. Control commands can then flow from the Android device to the single-board computer, while the server can feed data from any sensors that the device is equipped with back to the client, with just a single connection.&lt;/p&gt;

&lt;p&gt;The code samples that we will look at towards the end of the post implement a Python WebSocket server that will run on, e.g., a Raspberry Pi, and a native Android application that will act as a WebSocket client to control a pair of LEDs mounted on a breadboard. The data that we will transfer from the Android device to our circuit is coming from a gravity sensor, so that when we twist the hand-held device clockwise or anti-clockwise, a different LED will turn on. Furthermore, the brightness will depend on how much the device is tilted.&lt;/p&gt;

&lt;p&gt;So, read on to find out more!&lt;/p&gt;

&lt;h1 id=&quot;connecting-devices-over-a-network-websockets&quot;&gt;Connecting Devices over a Network: WebSockets&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&quot;(/raspberry%20pi/iot/2017/07/31/intro-to-iot.html)&quot;&gt;A Gentle Introduction to IoT&lt;/a&gt;, we saw how to control a single LED over a network by running a web server hosting the controlling web application. This was a simple web page that displayed a button that not only showed the current state of the LED, but allowed to control it by turning it on or off. All we needed to do was to point a web browser to the web server running on the Raspberry Pi and play around with the only web page on it.&lt;/p&gt;

&lt;p&gt;There might be situations where we are not happy with a web server, but we actually want more control over the way devices connect with each other. In a simple client-server relationship, surely TCP/IP sockets spring to mind, but what if we want to allow for data to flow in both directions?&lt;/p&gt;

&lt;p&gt;Contrary to ordinary sockets, WebSockets offer a full-duplex communication channel over a single TCP connection. They are compatible with the HTTP protocol, but make use of their own protocol (the &lt;em&gt;WebSocket&lt;/em&gt; protocol), which is switched to by including an HTTP Upgrade header in the HTTP handshake. By default, they are supposed to operate on the standard HTTP ports (80 for HTTP and 443 for secured HTTP), but a different one can be used for custom use, as we will see in our example. The advantage over any other solutions is that WebSockets have been designed to allow for fast bi-directional communication between client and server via an TCP connection that is kept open until manually closed (or dropped for other reasons), but without the overheads of HTTP headers.&lt;/p&gt;

&lt;p&gt;By design, WebSockets are then the perfect tool for exchanging short &lt;em&gt;messages&lt;/em&gt; between devices. As to what kind of messages we can send back and forth, we will see that we can either send &lt;em&gt;text&lt;/em&gt; messages, or raw &lt;em&gt;binary&lt;/em&gt; data, by either operating the WebSocket with &lt;em&gt;text&lt;/em&gt; or &lt;em&gt;binary&lt;/em&gt; frames.&lt;/p&gt;

&lt;p&gt;Having justified the use of WebSockets for our project, we now have to motivate the use of the other mentioned technology: &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like in &lt;a href=&quot;(/raspberry%20pi/iot/2017/07/31/intro-to-iot.html)&quot;&gt;A Gentle Introduction to IoT&lt;/a&gt;, the choice of Python is motivated by the use of the Raspberry Pi. In Python, WebSocket support is provided by the &lt;a href=&quot;https://pypi.python.org/pypi/websockets&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;websockets&lt;/code&gt;&lt;/a&gt; module, which is built on top of &lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is where we encounter the first constraint though, since &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; was introduced in Python 3.4. We then have to ensure that we are using a version of Python greater than or at least equal to 3.4. But our coding can also vary based on whether we are using Python 3.5 and later. That is because this version of Python introduces the &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; syntax for natively defining coroutines (&lt;a href=&quot;https://www.python.org/dev/peps/pep-0492/&quot;&gt;PEP 492&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In the last part of this post we will have a look at Python code samples written with the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; syntax, as well as the new one introduced by PEP 492. For now, we shall have a quick overview of the new features that are brought to Python 3 by the &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; module to better familiarise with it and its usage.&lt;/p&gt;

&lt;h2 id=&quot;coroutines&quot;&gt;Coroutines&lt;/h2&gt;

&lt;p&gt;I believe that the best way to understand &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; is to first look at the basic concepts involved and recall the notion of &lt;code class=&quot;highlighter-rouge&quot;&gt;coroutine&lt;/code&gt;. In Python we have the concept of &lt;em&gt;Generators&lt;/em&gt; since version 2.2. Generators look and feel like normal functions, but rather than &lt;em&gt;returning&lt;/em&gt; a value, they &lt;em&gt;yield&lt;/em&gt; one, and are normally used in loops to provide iterators.&lt;/p&gt;

&lt;p&gt;The typical scenario where you’d want to opt for a generator rather than a function is when you have to keep track of some state in between the different values returned. A simple example is a generator that generates the first $n$ Fibonacci numbers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If $n=0$, the generator doesn’t yield any number and we can then return. When $n=1$, the generator must yield the first Fibonacci number only, which is 0, and so on. The difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; is that the former terminates the iteration, while the latter allows it to continue. To better understand what is going on here, observe that a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;fibonacci&lt;/code&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;f = fibonacci(10)&lt;/code&gt; doesn’t return a Fibonacci number (you might at first expect this to return the first Fibonacci number), but a &lt;em&gt;generator object&lt;/em&gt; instead, that is, something that we can use with a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, or any function that expects an iterable object, like &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;. The first two Fibonacci numbers can then be generated with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Expected output
# &amp;lt;generator object fibonacci at 0x7f2e0940baf0&amp;gt;
# 0
# 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but if we now try to print yet another Fibonacci number, we get a &lt;code class=&quot;highlighter-rouge&quot;&gt;StopIteration&lt;/code&gt; exception, which signals that the generator has returned and that there are no more values to be generated:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Expected output
# Traceback (most recent call last):
#   File &quot;&amp;lt;stdin&amp;gt;&quot;, line 5, in &amp;lt;module&amp;gt;
#     print(next(f))
#
# StopIteration&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following code snippet illustrates the use of a generator with a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;test_cases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_cases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test case: n = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am omitting the expected output to avoid cluttering the page, but it should be quite clear what the above code is supposed to do. To produce a more compact result we can do something like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sfibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_cases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test case: n = {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Expected output:
#
# Test case: n = 0
#
# Test case: n = 1
# 0
# Test case: n = 2
# 0 1
# Test case: n = 3
# 0 1 1
# Test case: n = 10
# 0 1 1 2 3 5 8 13 21 34
# Test case: n = 20
# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which also shows how to construct a generator out of another generator.&lt;/p&gt;

&lt;p&gt;From the above example we deduce that the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword is generating a value while also “&lt;em&gt;pausing&lt;/em&gt;” the execution of the function, until another value is requested from it. In this case, the execution resumes from the instruction that comes soon after the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;, with all the values of local variables (the &lt;em&gt;state&lt;/em&gt;) preserved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Generators&lt;/em&gt; are also known as &lt;em&gt;semicoroutine&lt;/em&gt;, and this leads us to talk about &lt;em&gt;coroutines&lt;/em&gt;. This is a more general concept, because it encompasses those code elements that not only pass a value to the caller, but also receive and process a value passed to them by another code element (e.g. a generator, or another coroutine). This definition looks a bit circular, and this is due to the fact that, with coroutines, the relation is not of caller-callee, but symmetric. In more concrete terms, we are talking about functions that can retain a state in between invocations, and that can call to other functions, suspending and resuming execution from certain points of the code.&lt;/p&gt;

&lt;p&gt;Starting with Python 2.5, coroutines have become an integral part of the language. They can be easily constructed with &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;, which has been turned into an &lt;em&gt;expression&lt;/em&gt;. The value &lt;code class=&quot;highlighter-rouge&quot;&gt;yields&lt;/code&gt; evaluates to is passed to the coroutine with a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; on the generator, like so&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{} : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Expected output
# #1 : Hello
# #2 : World&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look to code like the above for the first time, you might be wondering why I have included a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;. Remember from our discussion on generators that, contrary to normal functions, a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;coroutine&lt;/code&gt; returns a generator object and not the first generated value. After creation, a coroutine needs to be &lt;em&gt;primed&lt;/em&gt;, that is it needs to be started so that it can execute its code until the first occurrence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; expression. The coroutine then halts and waits for values to be sent to it. In Python, there are two equivalent ways of priming a coroutine: either call &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;, as we have done in the code above, or send it a &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;coro.send(None)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Since it is quite easy to forget to prime a coroutine, a good idea is to define a decorator, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;@coroutine&lt;/code&gt; that creates, primes and returns a coroutine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to know more about coroutines, I recommend that you have a look at David Beazley’s &lt;a href=&quot;http://www.dabeaz.com/coroutines/&quot;&gt;A Curious Course on Coroutines and Concurrency&lt;/a&gt;. Here, I have just stated the essential details that we are going to need for our project. These should be enough to convince you that, with coroutines in Python we can implement single-threaded concurrency, which offer an ideal ground for asynchronous I/O operations, without the overhead of many context switches between different threads.&lt;/p&gt;

&lt;h2 id=&quot;the-asyncio-module&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; module&lt;/h2&gt;

&lt;p&gt;If you have ever done any sort of I/O before, like reading from/writing to a file, or creating a socket and waiting for a connection etc… you will surely know that most of the I/O operations are blocking. For example, if you are trying to read from a file descriptor by making a &lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_READ&lt;/code&gt; system call, your code will hand control over to the OS until your request can be honoured. The normal execution flow then resumes.&lt;/p&gt;

&lt;p&gt;The problem with this wait is that, in most cases, you don’t know when there will be enough data available from the file descriptor to read. Your application then halts while it might be doing something useful instead.&lt;/p&gt;

&lt;p&gt;The typical workaround is to poll the file descriptor periodically, and only read from it when data is actually available. As you can easily imagine, the solutions come in different patterns, and every time you have to deal with this there is some boilerplate code that you would have to write. This amounts to writing your event loop to cycle through your tasks, which include I/O polling. Wouldn’t it be nice if we were provided with such boilerplate code encapsulated in a module that we can use whenever we need to perform asynchronous I/O operations?&lt;/p&gt;

&lt;p&gt;This must be what the people behind &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; must have thought, and that’s why the essential element that this Python module offers is an &lt;strong&gt;event loop&lt;/strong&gt;. This is designed to register and schedule &lt;strong&gt;Tasks&lt;/strong&gt; which, with just a few words, can be described as &lt;em&gt;objects decorating coroutines&lt;/em&gt; (hence, in practice, they are coroutines). Some of these tasks might involve I/O operations, and some of these operations might be blocking. By continuously polling for the I/O status of file descriptors, sockets etc…, &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; allows you to write single-threaded concurrent code that performs I/O.&lt;/p&gt;

&lt;p&gt;In this post, we are interested in working with WebSockets, as as an example of what we have just seen we can play around with some WebSocket servers and clients. In Python, we can make use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;websockets&lt;/code&gt; modules, which builds its functionalities on top of &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt;. The &lt;a href=&quot;https://pypi.python.org/pypi/websockets&quot;&gt;Getting Started&lt;/a&gt; page on PyPI shows how simple it is to create a a WebSocket client, and an echo server to test it. The following examples are based on them, but with just some slight modifications, and a twist: the client sends a string read from STDIN and the echo server reverses it.&lt;/p&gt;

&lt;p&gt;So here is the server code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Echo server. Will reverse everything we throw at it.
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asyncio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;websockets&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_until_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;websockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8765&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and here is the client code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Client. Sends stuff from STDIN to the server.
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asyncio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;websockets&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_until_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ws://localhost:8765'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s where we make our first encounter with the new &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; keywords, introduced by the already cited PEP 492. The new syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;async def&lt;/code&gt; is used to declare a &lt;em&gt;native coroutine&lt;/em&gt; in Python 3.5 and later versions. Perhaps more interesting are &lt;code class=&quot;highlighter-rouge&quot;&gt;async with&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;async for&lt;/code&gt;. The former introduces native asynchronous context managers for classes that define the new magic methods &lt;code class=&quot;highlighter-rouge&quot;&gt;__aenter__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__aexit__&lt;/code&gt;, but apart from this, its usage is analogous to the synchronous counterpart &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;. The new syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;async for&lt;/code&gt; is used to consume asynchronous iterable, i.e. instances of classes that implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;__aiter__&lt;/code&gt; magic method. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword is on its own, it defines an expression that execute the coroutine it appears in to execute the one passed as its argument until it completes. In the case of the code above, we just wait for the &lt;code class=&quot;highlighter-rouge&quot;&gt;websocket&lt;/code&gt; object to complete the task of sending the data.&lt;/p&gt;

&lt;p&gt;After the above discussion, the code for the client application should be quite clear. The first call to &lt;code class=&quot;highlighter-rouge&quot;&gt;websocket.send&lt;/code&gt; is used to &lt;em&gt;prime&lt;/em&gt; the socket, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;async for message in websocket&lt;/code&gt; won’t hang indefinitely, waiting for something to show up on the socket’s reading end.&lt;/p&gt;

&lt;p&gt;Before we look at how to rewrite the above code snippets for Python 3.4, where we do not have native coroutines, I would like to briefly comment on the last two lines of code of the server application. The first time I came across that code, they gave me a bit of thinking as to why we need to call &lt;code class=&quot;highlighter-rouge&quot;&gt;run_until_complete&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;run_forever&lt;/code&gt;. Wouldn’t the former alone suffice? If you recall our discussion about blocking I/O operations and the necessity of constantly polling in order not to halt the execution of our application, you realise that the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;run_until_complete&lt;/code&gt; will register the socket with the I/O polling task. Hence, apart from this task, we have nothing else running, and if we do not start the event loop, the newly created socket won’t be checked and the application simply terminates. The last line is there to ensure that we keep monitoring the socket for new incoming connections. When a client connects, a new task is scheduled to serve the connection with the passed handler, which must be a coroutine. This can be verified by peeking at the source code of both &lt;a href=&quot;https://github.com/python/cpython/tree/a19fb3c6aaa7632410d1d9dcb395d7101d124da4/Lib/asyncio&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/aaugustin/websockets&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;websockets&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And now to the Python 3.4 version of the above code snippets. There are a few rule of thumb that we can use to convert from 3.5 and later to 3.4, where we don’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;. The first is the use of the decorator &lt;code class=&quot;highlighter-rouge&quot;&gt;@asyncio.coroutine&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;async def&lt;/code&gt;. The situation is a bit more complicated for &lt;code class=&quot;highlighter-rouge&quot;&gt;async with&lt;/code&gt;, which requires a replacement for &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;yield from&lt;/code&gt;. The latter is substantially equivalent to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Same as: yield from foo()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this in mind, &lt;code class=&quot;highlighter-rouge&quot;&gt;async with&lt;/code&gt; can be coded with a more traditional &lt;code class=&quot;highlighter-rouge&quot;&gt;try ... finally&lt;/code&gt; block as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# async with coro() as foo:
#     # &amp;lt;code&amp;gt;
#     pass
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# &amp;lt;code&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Whatever coro().__aexit__() would have done.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;async for&lt;/code&gt; loop would translate to something like the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# async for foo in bar():
#     # &amp;lt;code&amp;gt;
#     pass
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__anext__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# &amp;lt;code&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;StopAsyncIteration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This coding is not strict, since you could, or you might have to replace the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;bar().__anext__()&lt;/code&gt; with the actual coding inside this coroutine. This is the case for the code that we are about to see, in which we perform the above translations. The server code for Python 3.4 is the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Echo server. Will reverse everything we throw at it.
# For Python 3.4
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asyncio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;websockets&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coroutine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_until_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;websockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8765&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;while the client code now looks like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Client. Sends stuff from STDIN to the server.
# For Python 3.4
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asyncio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;websockets&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coroutine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_until_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ws://localhost:8765'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note how to execute a native coroutine, or one decorated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@asyncio.coroutine&lt;/code&gt; in Python 3.4, needs to be executed by an event loop from the &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; module.&lt;/p&gt;

&lt;h1 id=&quot;setting-things-up&quot;&gt;Setting Things Up&lt;/h1&gt;

&lt;p&gt;We shall now present the circuit that makes up the device that we want to control over the network, and both the server and client code that will allow us to use the gravity sensor of an Android device to operate it.&lt;/p&gt;

&lt;h2 id=&quot;the-circuitry&quot;&gt;The Circuitry&lt;/h2&gt;

&lt;p&gt;This part of the post will be brief, because we are going to recycle part of the previous post on IoT A Gentle Introduction to IoT. In fact, we are going to double it up by making a circuit with two LEDs, each one following the same design in the just mentioned post. The idea is to turn either one or the other on, depending on the rotation angle of our Android device. For example, if we tilt our device to the right, the green LED will become brighter, while when we tilt it to the left, the red LED will become brighter.&lt;/p&gt;

&lt;p&gt;So, based on the knowledge acquired with the previous post on IoT, the circuit that we want to build will look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/ws_asyncio/ws_asyncio_bb.png&quot; alt=&quot;Double LED configuration&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this project I am using a Raspberry Pi 3 Model B. As you can see from the picture above, we need two LEDs, preferably of different colours, e.g. green and red, and two 220 Ω resistors. The green LED will be controlled via the BCM 18 (8) pin (green jumper wire), while the red one is controlled via the BCM 5 (29) pin (red jumper wire) of the Raspberry Pi. The black jumper wires indicate a connection on a ground pin.&lt;/p&gt;

&lt;h2 id=&quot;the-server-code&quot;&gt;The Server Code&lt;/h2&gt;

&lt;p&gt;The server code will run on the Raspberry Pi and will open a WebSocket server, listening for connection requests. At the moment of writing, Raspbian Jesse has Python 3.4.2 in its repository, so that we cannot benefit of the native Python coroutine offered by Python 3.5, unless we install this version manually.&lt;/p&gt;

&lt;p&gt;All the server code can be found inside the &lt;a href=&quot;https://github.com/P403n1x87/iot/tree/master/gravity_led/server&quot;&gt;gravity_led/server&lt;/a&gt; folder of the &lt;a href=&quot;https://github.com/P403n1x87/iot&quot;&gt;iot&lt;/a&gt; repository. Due to its length I will refrain from embedding it on this post, but I will comment on the essential aspects.&lt;/p&gt;

&lt;p&gt;The code is based on an abstract WebSocket Server class, &lt;code class=&quot;highlighter-rouge&quot;&gt;WSServer&lt;/code&gt;, contained in &lt;a href=&quot;https://github.com/P403n1x87/iot/blob/master/gravity_led/server/lib/wss.py&quot;&gt;lib/wss.py&lt;/a&gt;. An actual WebSocket server has to inherit from this class and implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; method, which is the one that bootstraps the logic of the server application. This will be called as soon as the WebSocket server starts serving connection requests.&lt;/p&gt;

&lt;p&gt;On creation, we can specify the address and port the server is to listen on, as well as a possible limit on the number of simultaneous connections that the server is allowed to serve. Why would such a limit be ever necessary? The reason is that, in this particular example, we only have one device, and this can only be controlled by one client at a time. It makes no sense to accept more than one connection. By setting the limit to 1, we then prevent other clients from connecting and finding out that the device is already being controlled by another client. For the way it is implemented though, the class is flexible enough to allow changing this limit at run-time with a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;set_server_limit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After instantiation, we can run the server with a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; method, and we can check whether it is running at any time with &lt;code class=&quot;highlighter-rouge&quot;&gt;is_running&lt;/code&gt;. Most of the code in the former method provides logging information and a graceful shutdown when the user presses Ctrl+C to halt the server.&lt;/p&gt;

&lt;p&gt;The code contained in &lt;a href=&quot;https://github.com/P403n1x87/iot/blob/master/gravity_led/server/main.py&quot;&gt;main.py&lt;/a&gt; is used to bootstrap the class &lt;code class=&quot;highlighter-rouge&quot;&gt;GyroListener&lt;/code&gt; contained in &lt;a href=&quot;https://github.com/P403n1x87/iot/blob/master/gravity_led/server/gyro_listener.py&quot;&gt;gyro_listener.py&lt;/a&gt;, which holds the actual logic of the server. As you can see, all that we have to do is inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;WSServer&lt;/code&gt; and implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; coroutine, as shown here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coroutine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection ID {} established [path {}]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FREQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FREQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;gyro_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gyro_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Received datum {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionClosed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection ID {} closed.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we initialise the Pi’s GPIO and start listening to data over the socket until the server is running or the connection is closed by the client. The two pins that we have chosen to use to control the LEDs (&lt;code class=&quot;highlighter-rouge&quot;&gt;CHR&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CHL&lt;/code&gt;) are set on the PWM (Pulse Width Modulation) mode so that we can control the brightness: the more the Android device is tilted in one direction, the brighter the LED for that direction.&lt;/p&gt;

&lt;p&gt;Here we also notice the “&lt;em&gt;contract&lt;/em&gt;” between the server and the client: the latter will send the three coordinates of the gravity sensor as a space-separated list of three floating point values. The server will split this string and use the second component (the &lt;em&gt;y&lt;/em&gt;-axis of the gravity sensor) to control the LEDs. When the value is positive the LED on the &lt;code class=&quot;highlighter-rouge&quot;&gt;CHR&lt;/code&gt; pin will turn on, with a duty cycle proportional to the value passed by the client; when the value is negative the LED on the &lt;code class=&quot;highlighter-rouge&quot;&gt;CHL&lt;/code&gt; pin will start to turn on.&lt;/p&gt;

&lt;p&gt;To launch the server, run &lt;code class=&quot;highlighter-rouge&quot;&gt;main.py&lt;/code&gt; and pass the IPv4 address and a port number, for example&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
python3 main.py 0.0.0.0 5678
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to listen on &lt;em&gt;any&lt;/em&gt; IP address on the Raspberry Pi and accept connections from everywhere.&lt;/p&gt;

&lt;h2 id=&quot;the-client-code&quot;&gt;The Client Code&lt;/h2&gt;

&lt;p&gt;For the client, we are going to develop a minimalist Android application, with the same project structure that we have encountered in the previous post on &lt;a href=&quot;/android/java/gradle/2017/10/14/android-dev.html&quot;&gt;Android Development from the Command Line&lt;/a&gt;. Again, the code is quite extensive, but you can find it in the &lt;a href=&quot;https://github.com/P403n1x87/iot/tree/master/gravity_led/client&quot;&gt;gravity_iot/client&lt;/a&gt; folder. Apart from the minimal Android project setup, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; and the resource files for the UI, all that we need is a single activity where we can specify the IP address and the port of the server to connect to, and a toggle button to start and close a connection to the server.&lt;/p&gt;

&lt;p&gt;For dealing with WebSockets in Java, we make use of the &lt;a href=&quot;https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket&quot;&gt;Java WebSockets&lt;/a&gt; library, which offers the &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocketClient&lt;/code&gt; abstract class. As you can see from the code in &lt;a href=&quot;https://github.com/P403n1x87/iot/blob/master/gravity_led/client/src/main/java/MainActivity.java&quot;&gt;MainActivity.java&lt;/a&gt;, all that we have to do is extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocketClient&lt;/code&gt; class and implement a few methods, which we just use for logging purposes. The actual signalling is done via callbacks triggered by the on-board gravity sensor on the Android device:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSensorChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;webSocketClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebsocketNotConnectedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ctrl_ws_client&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sensor updated but socket not connected&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt; class since we decided that this should implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;SensorEventListener&lt;/code&gt; interface. When a connection is successfully started, we register the instance of this class with the sensor, so that when the value is changed a white-space separated list of the three components of the gravity vector are sent in text form to the server via the WebSocket.&lt;/p&gt;

&lt;p&gt;We can use gradle to build and deploy the application for testing on a device with the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
./gradlew installDebug
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;assuming that you have an Android device in developer mode connected to your building machine via USB. This is what it looks like on my Nexus 5&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/ws_asyncio/ctrl_ws_client.png&quot; alt=&quot;ctrl_ws_client&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before moving to the conclusion, just a quick note on the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; file. If you have had a look at it, you might have noticed the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;android:configChanges=&quot;orientation|screenSize&quot;&lt;/code&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;activity&lt;/code&gt; element. This allows the application to rotate with the device orientation, without the application being restarted. If we do not put this attribute, any previous connection would be closed and we would have to restart it by pressing on the toggle button. The use of this attribute is not mandatory, but bear in mind that if you decide not to use it, then you would have to make sure that the same WebSocket connection is persisted across every screen rotation.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;In the introduction, I have mentioned that WebSockets can be operated in two modes: &lt;em&gt;text&lt;/em&gt; and &lt;em&gt;binary&lt;/em&gt;. In the code that we have seen in this post we have sent &lt;em&gt;text&lt;/em&gt; frames between the server and the client. This is because we have used data of type &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; in the Java client code, which is then received as &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; on the Python server end.&lt;/p&gt;

&lt;p&gt;In most practical cases, it is more convenient to send a stream of bytes instead, thus increasing throughput. On the Java side, this is achieved by passing an array of bytes (&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes[]&lt;/code&gt;) to the &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; method. On the Python end, data will then be received as &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt; (that is, the return value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;recv&lt;/code&gt; coroutine is of type &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt;) that one can iterate over, or perform any necessary operation to make sense of the received information.&lt;/p&gt;

&lt;p&gt;The same holds on reverse: if we send an array of bytes from Python, we will receive an binary frame on Java. In this case, though, we will have to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;ByteBuffer&lt;/code&gt; version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;onMessage&lt;/code&gt; callback of the &lt;code class=&quot;highlighter-rouge&quot;&gt;WebSocketClient&lt;/code&gt; class, i.e. the one with signature&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And with this we come to the end of this post :-).&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Mar 2018 21:49:00 +0000</pubDate>
        <link>https://p403n1x87.github.io//iot/websockets/asynchronous%20i/o/2018/03/03/websockets_asyncio.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//iot/websockets/asynchronous%20i/o/2018/03/03/websockets_asyncio.html</guid>
        
        <category>IoT</category>
        
        <category>Python</category>
        
        <category>Android</category>
        
        <category>WebSockets</category>
        
        <category>asyncio</category>
        
        
        <category>IoT</category>
        
        <category>WebSockets</category>
        
        <category>Asynchronous I/O</category>
        
      </item>
    
      <item>
        <title>Android Development from the Command Line</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Yes you guessed it right, I’m not a huge fan of IDEs. Don’t get me wrong though, I am fully aware of how powerful modern IDEs are, and all the magic that they can do for you to assist you while you are coding your application. But this is also why I don’t like them, especially when I’m picking up something new.&lt;/p&gt;

&lt;p&gt;To the date of writing, I am not an experienced Android developer. When I started developing applications (there was a time when I believed that no matter how big a project could be, you could always find the time to code it in assembly language), a plain old text editor was my friend, together with some command line tools, like assemblers, linkers, compilers, debuggers etc…. With no support at all, you had to know exactly what you were doing, you had to know the syntax, the APIs and where they were located. You also needed a minimum knowledge of what a linker is for and when and why you need one.&lt;/p&gt;

&lt;p&gt;Whenever I tried an IDE, e.g. Android Studio, I always felt like I didn’t really need to know much about the frameworks I was using, as all the built-in tools would come to my rescue. As a consequence, I started feeling like I wasn’t really mastering anything and put the project I was working on aside for future me to one day resume working on it. Rather than me using the IDE, it kind of was the other way around: the IDE was using me to magically generate code.&lt;/p&gt;

&lt;p&gt;IDEs also tend to hide all the machinery involved in the build process from the developer as well. In most cases, everything goes well, but what would you do if you suddenly come across a problem and you have no clue at which stage of the build process it is happening?&lt;/p&gt;

&lt;p&gt;Surely, if you work on a big company project, it would be crazy to renounce entirely to IDEs, as your life might be a bit harder in everyday maintenance of your code, but for smaller projects this argument is somewhat weak, and opting for a plain text editor might have its many advantages. For once, you are in total control of the code that is going into your final product. And then again, there is also the educational aspect, which can give you the right amount of experience to tackle unexpected issues that could pop up during any stage of the development life-cycle.&lt;/p&gt;

&lt;p&gt;All this being said, in this post we shall see how to develop an Android application by only relying on a text editor of your choice and the standard CLI tool provided by the Android SDK. The focus is on the steps required to install the Android SDK command line tools and how to organise your source code, rather than on the details of the application itself.&lt;/p&gt;

&lt;p&gt;As with a standard Android project created with Android Studio, we are going to rely on Gradle and the Android Gradle plugin for the build process. You may rightfully think that this somehow partly defeats the point of this post, but, hey, in the end Gradle is just a command line tool, and quite a standard way to build and deploy Java projects these days.&lt;/p&gt;

&lt;p&gt;This post is targeted to Linux users, but there is a good chance that the steps that we will go through have an equivalent on other platforms, like Windows. I’m afraid this is something that you will have to find out on your own.&lt;/p&gt;

&lt;p&gt;Code very similar to the one presented in this post can be found in the GitHub repository &lt;a href=&quot;https://www.github.com/P403n1x87/androtest&quot;&gt;androtest&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;

&lt;p&gt;Before embarking on an adventure, it is wise to check that we are taking all that we need along the way with us. As we are trying to keep things as simple as possible, we won’t need much, but there are a few preliminary steps that we need to perform in order to set up our development environment.&lt;/p&gt;

&lt;p&gt;The first few steps couldn’t be simpler: pick your favourite text editor (my laptop can still handle an application like Atom) and terminal application, and we already have almost half of what we need! The rest of the tools is provided by the Java Development Kit, the Android SDK Tools and Gradle. More details in due time.&lt;/p&gt;

&lt;p&gt;The JDK is usually available from your distro’s repositories. On Ubuntu, it can be installed with, e.g.&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sudo apt install openjdk-9-jdk
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Android SDK might not be available from the official repositories. In principle the could be installed along with Android Studio, but if you are not going to use Google’s official IDE then it is a bit of waste of space. The &lt;em&gt;cleaner&lt;/em&gt; alternative is to just download the Android SDK Tools from the &lt;a href=&quot;https://developer.android.com/studio/index.html#command-tools&quot;&gt;Android Studio&lt;/a&gt; download page. For simplicity, I will split the installation process of the Android SDK into different steps.&lt;/p&gt;

&lt;h2 id=&quot;android-sdk-tools&quot;&gt;Android SDK Tools&lt;/h2&gt;

&lt;p&gt;Download the zip archive and extract it somewhere, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.android/sdk&lt;/code&gt;, then update your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;ANDROID_HOME&lt;/code&gt; environment variable and include the SDK tools binaries in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable by adding the following lines&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Android SDK Tools&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ANDROID_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.android/sdk
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/tools:&lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/tools/bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that most of the tools installed in &lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_HOME/tools&lt;/code&gt; are deprecated and one should use the dedicated ones provided in the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_HOME/tools/bin&lt;/code&gt; folder. These include the fundamental &lt;a href=&quot;https://developer.android.com/studio/command-line/sdkmanager.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdkmanager&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://developer.android.com/studio/command-line/avdmanager.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;avdmanager&lt;/code&gt;&lt;/a&gt; tools for respectively creating and managing different SDK versions (and other packages too) and virtual devices (the emulators).&lt;/p&gt;

&lt;h2 id=&quot;android-sdk-platform-tools&quot;&gt;Android SDK Platform Tools&lt;/h2&gt;

&lt;p&gt;Throughout the Android development life-cycle, you are likely to need to interface with the Android platform for testing your progress. In concrete terms this means that you might want to compile your project as you develop it for testing on an actual Android device. In order to connect to the device and look at the log you will need the Android Debug Bridge, which is provided with the Android Platform Tools. To install them we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkmanager&lt;/code&gt; CLI tool to pull the latest released version with the following command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager &quot;platform-tools&quot;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the Platform Tools into the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_HOME/platform-tools&lt;/code&gt; folder. We can then add it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable for easy invocation by simply adding the following lines to &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Android Platform Tools&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/platform-tools&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;android-sdk-platforms&quot;&gt;Android SDK Platforms&lt;/h2&gt;

&lt;p&gt;In order to compile a project we need a certain API revision to be installed. This provides all the functionalities that our application can use and are provided in the form of Java packages and classes and other useful components. For example, if our project targets Marshmallow, then we need to install the Android SDK Platform API Level 23. You can find out more at &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels&quot;&gt;this page&lt;/a&gt;. To find out about all the packages available to download we can use the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager --list --verbose
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the moment we are interested in Android platforms, i.e. those packages that are prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;platforms;&lt;/code&gt;, so we can filter the output of the above command as follows&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager --list --verbose | grep -A 3 platforms\;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Among the matching results, you should see something similar to the following&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
platforms;android-23
    Description:        Android SDK Platform 23
    Version:            3
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then proceed to installing the Android SDK Platform API Level 23 with the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager &quot;platforms;android-23&quot;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkmanager&lt;/code&gt; tool, you might see the following warning message&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Warning: File /home/user/.android/repositories.cfg could not be loaded.&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;In order to get rid of it you can simply create this file with no content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;android-sdk-build-tools&quot;&gt;Android SDK Build Tools&lt;/h2&gt;

&lt;p&gt;Now that we have the API to compile against, we need the tools to actually be able to build a project: the build tools. They provide utilities like &lt;code class=&quot;highlighter-rouge&quot;&gt;apksigner&lt;/code&gt;, Jack and Jill etc…, but for the moment we don’t have to worry about the details of this package, as they will be invoked behind the scenes by Gradle.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.android.com/studio/releases/build-tools.html&quot;&gt;Android Studio User Guide&lt;/a&gt; recommends that you keep the build tools updated to the latest version. To find out all the versions available for download, run the following command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager --list --verbose | grep -A 3 build-tools\;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and locate the latest version. At the moment of writing this is 26.0.1, so the command to use in this case is&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager &quot;build-tools;26.0.1&quot;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;android-emulator&quot;&gt;Android Emulator&lt;/h2&gt;

&lt;p&gt;The installation of the Android Emulator package is not mandatory, as you can decide to test your application on an actual Android device. However, there are many reasons why you might want to use an emulator: you probably don’t own a huge variety of Android devices, differing not only in physical size, but also in the API version (Kit Kat, Lollipop, Marshmallow, just to name a few of the most recent code-names). The package can be installed through the &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkmanger&lt;/code&gt; with the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager &quot;emulator&quot;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, we can add the emulator folder to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable for easy access. However, the Android SDK Tools provides a deprecated set of tools, &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator-check&lt;/code&gt;, that would collide with the ones we have just installed. To solve this problem we can rename the deprecated executables with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ 
$ 
$ 
$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
chmod -x $ANDROID_HOME/tools/emulator
chmod -x $ANDROID_HOME/tools/emulator-check
mv $ANDROID_HOME/tools/emulator $ANDROID_HOME/tools/emulator.dep
mv $ANDROID_HOME/tools/emulator-check $ANDROID_HOME/tools/emulator-check.dep
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then add the others to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variables by appending the following lines to the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; file&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Android Emulator&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/emulator&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;gradle&quot;&gt;Gradle&lt;/h2&gt;

&lt;p&gt;Let’s now proceed to the installation of Gradle, a build automation system that is also the default in Android Studio. Google has developed a dedicated Android plugin to assist with the most common tasks. The ones that I personally tend to run more frequently are collected in the following table&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compileDebugJavaWithJavac&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Compiles the debug version of the java sources. Useful to check for syntax errors while coding&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;installDebug &lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Compiles and installs the debug version on all the devices discovered by the ADB.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Runs a lint on the sources, producing a report in &lt;code class=&quot;highlighter-rouge&quot;&gt;build/reports&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Gradle is quite popular so it should be available from your distro’s official repositories. On Ubuntu 17.04 though, a quite old version of Gradle is available from them, so I would recommend that you add &lt;a href=&quot;https://launchpad.net/~cwchien/+archive/ubuntu/gradle&quot;&gt;Cheng-Wei Chien’s  PPA&lt;/a&gt; to your software sources and install Gradle from there&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ 
$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sudo add-apt-repository ppa:cwchien/gradle
sudo apt update &amp;amp;&amp;amp; sudo apt install gradle
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gradle is quite a powerful tool, but you might find that it has a rather steep learning curve to master all of its features, especially if you are not familiar with Groovy. In this post we shall only scratch the very surface and look at only the closures that we need for this project, as a discussion on Gradle surely deserves a dedicated post on its own.&lt;/p&gt;

&lt;p&gt;Getting back on business, the installation of Gradle was the last step that we needed to perform in order to set up the development environment, and we can now move on to creating an Android project from scratch.&lt;/p&gt;

&lt;h1 id=&quot;creating-the-gradle-project&quot;&gt;Creating the Gradle Project&lt;/h1&gt;

&lt;p&gt;The first thing to do is to create a Gradle project of Java type. This involves setting up a directory structure in the project’s parent folder and creating the Gradle build script &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;. With Gradle installed, these steps can be automated with the &lt;a href=&quot;https://docs.gradle.org/current/userguide/build_init_plugin.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;&lt;/a&gt; task&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
gradle init --type java-library
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are contributing to a project that is the work of many hands, it will probably be the case that everybody is using the same build tools. As everybody can have a different version of Gradle on their local machine, the Gradle project recommends that one uses a &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;wrapper&lt;/a&gt; to build a project, rather than invoke the local installation of Gradle directly. By sharing the wrapper along with your project, every other developer working on the same project will be able to use the same version of Gradle as everybody else, thus getting rid of problems caused by switching between different versions. Even though this is a sample project, we will nonetheless create and use a Gradle wrapper to build our project. The previous command should have created a &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew&lt;/code&gt; shell script in the project’s folder. If not, run the following command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
gradle wrapper
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should also have a folder &lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt; containing all the sub-folders where Gradle expects the sources and the resources that make up your project. But, most importantly, you should also have the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; files containing some sample build settings. This structure is slightly different from the one generated by Android Studio, and documented on the &lt;a href=&quot;https://developer.android.com/studio/build/index.html&quot;&gt;developer portal&lt;/a&gt;, where you can notice a nested Gradle project, with the topmost one used to import the actual project as a module, and configure the global build settings. For the case at hand, we could to without this nested structure and only define a single build script, since our project is made up of only one module.&lt;/p&gt;

&lt;p&gt;The following is the content of the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.tools.build:gradle:2.3.3'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.application'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'26.0.1'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find a detailed explanation of the meaning of each closure in the &lt;a href=&quot;https://developer.android.com/studio/build/index.html#top-level&quot;&gt;Configure Your Build&lt;/a&gt; page of the Android Developer portal. Briefly, the &lt;code class=&quot;highlighter-rouge&quot;&gt;buildscript&lt;/code&gt; closure is used to configure Gradle itself so that it knows where to find the Android-specific Gradle tools that we want to use. We can then import the Android Gradle plugin and use the extensions to the DSL that it provides to configure the Android-specific build process. In this case we specify that the compilation SDK version that we want to use is Level 23 (Marshmallow), and that we want to use the version &lt;code class=&quot;highlighter-rouge&quot;&gt;26.0.1&lt;/code&gt; of the build tools.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; file is used to configure the project-wide Gradle settings, such as the Gradle daemon’s maximum heap size. In fact, this is all we will use it for in our case. Open it with your text editor and put the following content in it&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jvmargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xmx1536m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is our Gradle project created and configured! All the magic of the building process is hidden from us by the Android Gradle plugin so that we don’t have to worry about anything else and just focus on our application code.&lt;/p&gt;

&lt;h1 id=&quot;writing-the-application&quot;&gt;Writing the Application&lt;/h1&gt;

&lt;p&gt;Two essential ingredients for an Android application are the &lt;strong&gt;Main Activity&lt;/strong&gt; and the &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/manifest-intro.html&quot;&gt;&lt;strong&gt;App Manifest&lt;/strong&gt;&lt;/a&gt;. Let’s start with the latter first.&lt;/p&gt;

&lt;h2 id=&quot;the-application-manifest&quot;&gt;The Application Manifest&lt;/h2&gt;

&lt;p&gt;The Android Application Manifest is an XML manifest file that is used to provide the Android system with essential information of an application, like the name of the Java package, the activities provided, the permissions required, the minimum SDK version supported etc… . Within a Gradle project, this file must be located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main&lt;/code&gt; folder and named rigorously &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;. In our case, this is what such manifest file would look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.p403n1x87.androtest&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-sdk&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:minSdkVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;21&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:targetSdkVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;23&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AndroTest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@android:style/Theme.Material&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainActivity&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The structure of the Android Application Manifest file is described &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/manifest-intro.html#filestruct&quot;&gt;on the developer portal&lt;/a&gt; in the form of a skeleton, as it is not based on any XML schema like DTD or XSD.&lt;/p&gt;

&lt;p&gt;The root element is &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest&lt;/code&gt;, which accepts the &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; attribute. Here we specify the name of the Java package of our application. We also specify our target API level to 23. The minimum level supported is set to 21 for reasons that relate to the output of the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; Android Gradle task that we will look at later on. It is recommended that you set this attribute to a reasonable value. For example, if you do not set it, Android will automatically add the legacy overflow &lt;em&gt;three-dot&lt;/em&gt; button, even though there are no actions to show. Starting from level 11, Android does not add this button by default.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest&lt;/code&gt; element must contain a unique &lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt; element that describes our application in may aspects, from the theme to use, to the activity content. In this case we set the application name to &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroTest&lt;/code&gt; and the theme to &lt;code class=&quot;highlighter-rouge&quot;&gt;Material&lt;/code&gt; and we expose only one activity, i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;, which is the entry point of our application, and the one that would be fired up when we launch it.&lt;/p&gt;

&lt;h2 id=&quot;the-main-activity&quot;&gt;The Main Activity&lt;/h2&gt;

&lt;p&gt;This takes us now to the main activity, i.e. the Java class that contains the code to be executed when our application is launched. Within a Gradle project, the main Java code should reside in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java&lt;/code&gt; folder. Since the package name is &lt;code class=&quot;highlighter-rouge&quot;&gt;com.p403n1x87.androtest&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt; source file should be created within the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java/com/p403n1x87/androtest&lt;/code&gt; folder. Here is the code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;p403n1x87&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;androtest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.app.Activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.content.Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.hardware.Sensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.hardware.SensorEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.hardware.SensorEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.hardware.SensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.ViewGroup.LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.widget.TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.widget.LinearLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sensor&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearLayout&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;layoutMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// UI&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main_layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Sensors&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mSensorManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SENSOR_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mSensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE_GRAVITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gravSensors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSensorList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE_GRAVITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nSensors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gravSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Detected gravity sensors: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvSensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;tvSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mSensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gravSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mSensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSensorChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    		    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    		    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    		    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;tvSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sensor %d: %f m/s^2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAccuracyChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sensor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SensorManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SENSOR_DELAY_NORMAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;layoutMain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvSensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;We DO NOT have gravity! :(&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code is fairly simple and quite self-explanatory. We override the &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt; class, from which &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt; inherits, to set up the UI. We use a layout resource as a basis, which we then dynamically extend with extra &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; widgets to hold the value of each gravity sensor that gets discovered at run-time.&lt;/p&gt;

&lt;h2 id=&quot;the-layout-resource&quot;&gt;The Layout Resource&lt;/h2&gt;

&lt;p&gt;In this project we have a mixture of static layout resources and dynamic creation of &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; elements. This offers us the chance to see how to make resources available to the Java code, i.e. by placing them in the place where Gradle, and the Android Gradle plugin, would expect them. Files placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/res&lt;/code&gt; folder are treated as resources and can be referenced in the way described at the Android Developer portal. In the previous code block, on line 36 we have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main_layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The expression &lt;code class=&quot;highlighter-rouge&quot;&gt;R.layout.main_layout&lt;/code&gt; refers to the resource &lt;code class=&quot;highlighter-rouge&quot;&gt;main_layout.xml&lt;/code&gt; located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt; sub-folder of &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/res&lt;/code&gt;. The various grouping of resources is detailed at the page &lt;a href=&quot;https://developer.android.com/guide/topics/resources/providing-resources.html&quot;&gt;Providing Resources&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Later on, in dealing with the output of the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; task, we will have the chance to look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;strings.xml&lt;/code&gt; resources in the &lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt; sub-folder. For the time being, let’s have a look at what the &lt;code class=&quot;highlighter-rouge&quot;&gt;main_layout.xml&lt;/code&gt; looks like in this case:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/layout_main&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;android:padding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;32px&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;android:gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertical&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/text&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:paddingBottom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12px&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Gravity sensors&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
  A new TextView element will be added programmatically for each on-board
  gravity sensor detected.
  --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a rather simple layout. We create a vertical &lt;code class=&quot;highlighter-rouge&quot;&gt;LinearLayout&lt;/code&gt; container to display a vertical stack of &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; elements. The first one, statically included in the XML resource file, will hold the counter of the discovered gravity sensors. More &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; elements are added at run-time, one for each of the sensors, to display their updated value.&lt;/p&gt;

&lt;h1 id=&quot;running-the-application&quot;&gt;Running the Application&lt;/h1&gt;

&lt;p&gt;Now that we have set up the Gradle project and coded our application, it is time to build it and install it on an Android device to run it. In this section we shall see how to invoke the Gradle &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; task to generate the APK (the Android Package Kit) package, and how to install it on our devices, being them either virtual or physical, in two different ways. Finally, we will give a final touch to our sample application by fixing a few of the issue reported by the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; task.&lt;/p&gt;

&lt;h2 id=&quot;building-with-gradle&quot;&gt;Building with Gradle&lt;/h2&gt;

&lt;p&gt;The process of building an Android application involves many steps and tools. If we rely on a Gradle project, as we have done in this case, and as it would be if you were using Android Studio, all of the details of this process are hidden to us. In a post where we are trying to make use of only simple tools, you may think that Gradle would defeat the point. Whilst I’d agree with you, I also believe that we will have to draw a line at some point, and Gradle feels like the right place. If, at any point, you feel the need to manually build your project, you can refer to these two references for more details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spin.atomicobject.com/2011/08/22/building-android-application-bundles-apks-by-hand/&quot;&gt;Building Android Application Bundles (APKs) by Hand&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://czak.pl/2016/05/31/handbuilt-android-project.html&quot;&gt;Jack, Jill &amp;amp; building Android apps by hand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This being said, let’s see how to build our sample project with Gradle. We can list all the available tasks with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
./gradlew tasks --all
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Among all the tasks listed by the previous command, we should see the following ones&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
Build tasks
-----------
assemble - Assembles all variants of all applications and secondary packages.
assembleAndroidTest - Assembles all the Test applications.
assembleDebug - Assembles all Debug builds.
assembleRelease - Assembles all Release builds.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
clean - Deletes the build directory.
cleanBuildCache - Deletes the build cache directory.
compileDebugAndroidTestSources
compileDebugSources
compileDebugUnitTestSources
compileReleaseSources
compileReleaseUnitTestSources
mockableAndroidJar - Creates a version of android.jar that's suitable for unit tests.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could decide to &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; our project, or &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; it in case we also wrote tests and want them built too. As it doesn’t make much of a difference in our case, we can run the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; task with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
./gradlew build
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; task actually does a bit more than assemble and execute tests. It also runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; task. More on this later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the build task was successful, you should now have the &lt;code class=&quot;highlighter-rouge&quot;&gt;androtest-debug.apk&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;build/outputs/apk&lt;/code&gt; folder, ready to be deployed on an Android device.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-virtual-device&quot;&gt;Creating a Virtual Device&lt;/h2&gt;

&lt;p&gt;In case you want to install the application on a physical device, you can skip this section and go straight to the next one. Under some circumstances, you might want to test your application on diverse hardware settings, and the best way is probably to make use of a &lt;em&gt;virtual device&lt;/em&gt;. If you have installed the &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator&lt;/code&gt; package as previously described, you can create a virtual machine with the following commands. But first we need to install a &lt;em&gt;system image&lt;/em&gt;, for example the &lt;strong&gt;Intel x86 Atom_64 System Image&lt;/strong&gt;. Since our application doesn’t make use of the Google APIs we can opt for the default image:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sdkmanager &quot;system-images;android-23;default;x86_64&quot;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The download and installation might take some time, so just wait for &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkmanager&lt;/code&gt; to complete. You can then proceed to creating a virtual device with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
avdmanager create avd -n test -k &quot;system-images;android-23;default;x86_64&quot; -d 8
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create a virtual device named &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; with the system image that we have just downloaded. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; switch specifies which device we want to emulate. In this case the value 8 represents a “Nexus 5” device. A complete list of the devices that can be emulated may be found with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
avdmanager list device
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, to run the newly created virtual device we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator&lt;/code&gt; tool, just like this:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
emulator @test -skin 768x1280
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;@test&lt;/code&gt; specified the name of the virtual device we want to run, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;-skin&lt;/code&gt; switch defines the resolution we want to run the emulator at. Note that a bug in the &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator&lt;/code&gt; tools prevents you from running this command from any working directory. Instead, you need to navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;$ANDROID_HOME/emulator&lt;/code&gt; in order to start it without errors.&lt;/p&gt;

&lt;p&gt;For more details on how to manage virtual devices, have a look at the &lt;a href=&quot;https://developer.android.com/studio/command-line/avdmanager.html#global_options&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;avdmanager&lt;/code&gt;&lt;/a&gt; documentation page.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-apk&quot;&gt;Installing the APK&lt;/h2&gt;

&lt;p&gt;There are at least to ways of installing the APK to an Android device. One is via a Gradle task, and the other is more manual and involves the Android Debug Bridge tool &lt;code class=&quot;highlighter-rouge&quot;&gt;adb&lt;/code&gt;. Let’s have a look at both.&lt;/p&gt;

&lt;p&gt;From the previous run of the &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew tasks --all&lt;/code&gt;, you should have seen the following tasks&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
Install tasks
-------------
installDebug - Installs the Debug build.
installDebugAndroidTest - Installs the android (on device) tests for the Debug build.
uninstallAll - Uninstall all applications.
uninstallDebug - Uninstalls the Debug build.
uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.
uninstallRelease - Uninstalls the Release build.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;installDebug&lt;/code&gt; task will look for all the Android devices in debugging mode connected to your machine and attempt to install the APK on &lt;em&gt;all&lt;/em&gt; of them. For instance, if you have a physical device in debug mode connected to your PC/laptop while also running a virtual device, this Gradle task will install the APK on both of them.&lt;/p&gt;

&lt;p&gt;If you want to install the APK on only one of the currently connected devices, you can do so with the &lt;code class=&quot;highlighter-rouge&quot;&gt;adb&lt;/code&gt; tool. First of all, determine the identifier of each of the connected devices with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ adb devices
List of devices attached
* daemon not running. starting it now at tcp:5037 *
* daemon started successfully *
05426e2409d30434	device
emulator-5554	device
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The device with ID &lt;code class=&quot;highlighter-rouge&quot;&gt;05426e2409d30434&lt;/code&gt; is a physical Nexus 5 in debug mode connected via USB to my laptop, while &lt;code class=&quot;highlighter-rouge&quot;&gt;emulator-5554&lt;/code&gt;, as the name indicates, is a running instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; virtual device we created before. We can install the APK on e.g. the emulator with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
adb -s &quot;emulator-5554&quot; install build/outputs/apk/androtest-debug.apk
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which will now be ready to be executed on the virtual device.&lt;/p&gt;

&lt;h2 id=&quot;the-lint-tasks&quot;&gt;The lint tasks&lt;/h2&gt;

&lt;p&gt;If you have ever used Android Studio you might wonder if there is the chance to get all the useful code analysis and hints that the IDE brings up while you code your application. While this feature is probably not supported by the text editor of your choice, we can remedy by using the lint tool provided by the Android SDK. A convenient way to invoke it is through a dedicated Gradle task. From the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew tasks --all&lt;/code&gt; you should also see the following tasks&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
Verification tasks
------------------
check - Runs all checks.
connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.
connectedCheck - Runs all device checks on currently connected devices.
connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.
deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.
deviceCheck - Runs all device checks using Device Providers and Test Servers.
lint - Runs lint on all variants.
lintDebug - Runs lint on the Debug build.
lintRelease - Runs lint on the Release build.
test - Run unit tests for all variants.
testDebugUnitTest - Run unit tests for the debug build.
testReleaseUnitTest - Run unit tests for the release build.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how we can invoke the lint tool in multiple ways. As we saw before, the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; task, as opposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt;, will also run the lint tool. But we can also choose to run it as part of a full check with the &lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt; task, or just on its own, on every variant of our project or simply on the debug build. As an example, let’s run the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; task with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
./gradlew lint
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output should contain something that looks like the following&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
...
&amp;gt; Task :lint
Ran lint on variant debug: 13 issues found
Ran lint on variant release: 13 issues found
Wrote HTML report to file:///home/gabriele/Projects/androtest/build/reports/lint-results.html
Wrote XML report to file:///home/gabriele/Projects/androtest/build/reports/lint-results.xml


BUILD SUCCESSFUL in 1s
25 actionable tasks: 7 executed, 18 up-to-date
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells us that the lint tool has found 13 issues on both the debug and the release build of our project, and that a report is available as both an HTML and an XML file in &lt;code class=&quot;highlighter-rouge&quot;&gt;build/reports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s open the HTML report and have a look at the reported issues. As predictable, the largest number of issues is about &lt;em&gt;internationalisation&lt;/em&gt;, as we have used many hard-coded strings in our source code. So let’s try to fix some of these, starting from the &lt;code class=&quot;highlighter-rouge&quot;&gt;HardcodedText&lt;/code&gt; one. By clicking on it, we get sent to a more detailed part of the page that suggests us to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;@string&lt;/code&gt; resource instead of the hard-coded string &lt;code class=&quot;highlighter-rouge&quot;&gt;Gravity sensors&lt;/code&gt;. Since our code will change the string at run-time in any case, the simplest solution is to replace it with an empty string. If we now run the lint task again, we should see only 12 issues. Good! :).&lt;/p&gt;

&lt;p&gt;Let’s now tackle a couple of &lt;em&gt;TextView Internationalization&lt;/em&gt; issues. The first one is about the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Detected gravity sensors: &quot; + Integer.toString(nSensors)&lt;/code&gt; that we have used in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt; source file. The problem here is two-fold. We should use a resource string and favour placeholders rather than concatenation. So let’s create a &lt;a href=&quot;https://developer.android.com/guide/topics/resources/string-resource.html&quot;&gt;string resource&lt;/a&gt; file. Recall from before that this should go in an XML file, say &lt;code class=&quot;highlighter-rouge&quot;&gt;strings.xml&lt;/code&gt;, within the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/res/values&lt;/code&gt; folder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sensors_no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Detected gravity sensors: %d&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now replace line 44 in &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt; with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;      &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sensors_no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nSensors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run the lint task again, and the count should now be down to only 9 issues. This should give you the idea of how to continue fixing the remaining findings.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;In this post we saw that, if we want to develop Android applications by simply relying on a text editor and some command line tools, the initial set up of the development environment requires a few preliminary steps, some of which are performed when you install Android Studio. However, some of the other steps need to be performed regardless, with the only difference that, in Android Studio, you would have a GUI to assist you. The bonus of going IDE-free, however, is in the fact that we now know what operations are being performed by the IDE when, e.g., we install an Android SDK that targets a certain API level.&lt;/p&gt;

&lt;p&gt;Creating a Gradle project is quite easy, and in this we are assisted by Gradle itself. The Android Gradle plugin takes care of invoking the right tools to perform the most common tasks, like building our project, or even installing it on an Android device. One handy feature that we might miss out with a plain text editor is the live linting of our code. However, at any stage of the development, we can run the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; Gradle task to generate a report with all the issues that have been discovered within the whole project.&lt;/p&gt;

&lt;p&gt;This post should have also showed you that, whilst Android Studio is a very useful tool, there is practically nothing that we would miss out by using the command line tools of the SDK instead. Development might at first be less smooth, and the learning curve steeper, but surely has its positives too.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Oct 2017 21:42:00 +0000</pubDate>
        <link>https://p403n1x87.github.io//android/java/gradle/2017/10/14/android-dev.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//android/java/gradle/2017/10/14/android-dev.html</guid>
        
        <category>Programming</category>
        
        <category>Java</category>
        
        <category>Android</category>
        
        <category>Gradle</category>
        
        <category>Lint</category>
        
        
        <category>Android</category>
        
        <category>Java</category>
        
        <category>Gradle</category>
        
      </item>
    
      <item>
        <title>A Gentle Introduction to IoT</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/iot/iot.jpg&quot; alt=&quot;IoT everywhere&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;preamble&quot;&gt;Preamble&lt;/h1&gt;

&lt;p&gt;No, I’m afraid this post is not on how to build your army of toy soldiers, like the one that Buzz Lightyear and friends fought in the first instalment of Toy Story. If the disappointment hasn’t stopped you from reading any further, what I will discuss here is something simpler and more peaceful, involving general electronics single board computers, LEDs, Python, web servers and web applications. All in just one place!&lt;/p&gt;

&lt;p&gt;I will try to introduce the fundamental concepts of IoT by example, and I will do so by sharing my recent hands-on experience with my first Raspberry Pi, and how this has led me to get to know of fascinating technologies of the modern era. If your main objective is still to build an army of toy soldiers, this is definitely a first step (however you should consider using technology for better purposes, really!).&lt;/p&gt;

&lt;p&gt;I will try not to give much for granted, but of course I will have to draw a line at some point, or this post would have never been finished! The subject is software, but it is also hardware, for the former would make little sense without the latter.&lt;/p&gt;

&lt;p&gt;The approach will be very practical. We will start with a concrete problem, and we shall see how to solve it, both from a hardware and a software perspective.&lt;/p&gt;

&lt;h2 id=&quot;whats-iot&quot;&gt;What’s IoT?&lt;/h2&gt;

&lt;p&gt;Can you eat it? Well, although your are free of munching on a breadboard if you really want to, IoT, as you probably know already, stands for &lt;em&gt;Internet of Things&lt;/em&gt;. This term is used to indicate the inter-networking of physical devices (the &lt;em&gt;things&lt;/em&gt;) that are equipped with electronics, sensors, motors etc.. and that communicate information with each other, sometimes taking actions based on the received inputs. In this sense, every-day life devices, like the fridges or the washing machines in our homes, or vending machines, or cars even, become &lt;em&gt;smart&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Even though the first example of &lt;em&gt;smart things&lt;/em&gt; appeared in the 1982 (and you can surely consider the toy army of Toy Story as an example of IoT in early animation movies), it is around 2016 that the IoT has evolved greatly, and the key aspect is the almost ubiquitous availability of wireless networks that allow an increasing pool of diverse devices to communicate with one another.&lt;/p&gt;

&lt;p&gt;The IoT example of this post is somewhat a classic, but that will hopefully give you a rough idea of what the IoT is also about, in case this is the first time that you came across it. It is also quite simple and with a contained cost, but nonetheless will spawn many interesting connections with some fascinating modern technologies.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;

&lt;p&gt;So what is exactly the project described in this post about? The idea is to turn some LEDs on and off by sending commands to a Raspberry Pi through a web page. This might seem quite a trivial project, but it has given me the opportunity to refresh some rusty knowledge of electronics that dated back to my undergraduate years, as well as learn a great deal of new things from the software side too.&lt;/p&gt;

&lt;h1 id=&quot;the-hardware&quot;&gt;The Hardware&lt;/h1&gt;

&lt;p&gt;In this first part I will describe all the hardware that is necessary for the project. The main one is, I would say, a single-board computer like a Raspberry Pi. In my case, I’m using a Raspberry Pi 3 Model B running the Raspbian OS. To turn an LED on and off we will use one of the GPIO pins. For commodity, I will also use a T-cobbler to connect all the GPIO pins on a breadboard, where the rest of the circuit will be assembled. All that we still need are a couple of jumper wires, a 220 Ω resistor and an LED of your favourite colour. To summarise, here is the minimum required:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1x Raspberry Pi&lt;/li&gt;
  &lt;li&gt;1x breadboard&lt;/li&gt;
  &lt;li&gt;1x T-cobbler and a bus cable (alternatively 2x male-to-female jumper wires)&lt;/li&gt;
  &lt;li&gt;2x male-to-male jumper wires&lt;/li&gt;
  &lt;li&gt;1x 220 Ω resistor&lt;/li&gt;
  &lt;li&gt;1x LED (about 20 mA max current)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-gpio-pins&quot;&gt;The GPIO Pins&lt;/h2&gt;

&lt;p&gt;Before looking at the circuit, it is probably best to mention a few facts about the Raspberry Pi. In particular, the key part here is the set of GPIO pins that it provides.&lt;/p&gt;

&lt;p&gt;The General Purpose Input-Output pins represent, as the name itself suggests, a way to connect to external devices in order to send commands to and from the Raspberry Pi. Some of these can be set to work as input or output, and can be set either high (3.3 V or a logic 1) or low (0 V or a logic 0). Some pins can be used together for other purposes, like communicating with another device through a Serial Peripheral Interface (SPI), attaching LCD screen through the Display Parallel Interface (DPI) etc…. Good references for the Raspberry Pi GPIO pins are &lt;a href=&quot;https://pinout.xyz/&quot;&gt;this website&lt;/a&gt; and the &lt;a href=&quot;https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf&quot;&gt;Broadcom BCM2835 ARM Peripherals&lt;/a&gt; manual.&lt;/p&gt;

&lt;p&gt;From the software side, the pins can be conveniently configured and controlled by means of the RPi Python module. The thing to be mindful of is that there are a bunch of different naming conventions for the pins on the Raspberry Pi. The main ones, to use a terminology proper of the RPi module, is &lt;code class=&quot;highlighter-rouge&quot;&gt;BOARD&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;BCM&lt;/code&gt;. The former is a pin numbering that reflects the physical location of the pins on the PCB. Pin number one is on the top-left corner and gives a 3.3 V fixed output. Pin 2 is the one to its right, Pin 3 is the one below it, and so forth. The latter is the numbering convention used in the Broadcom manual.&lt;/p&gt;

&lt;h2 id=&quot;the-circuit&quot;&gt;The Circuit&lt;/h2&gt;

&lt;p&gt;Here is the schematic of the circuit that we want to build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/iot/iot_schem.png&quot; alt=&quot;The circuit schematics&quot; class=&quot;center-image&quot; /&gt;
&lt;em&gt;The schematic of the circuit, showing all the components used for this project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I have already mentioned, I prefer using a T-cobbler to connect all the GPIO pins to the breadboard. In case you are not using one, this is what your breadboard should look like this picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/iot/iot_bb.png&quot; alt=&quot;The physical components&quot; class=&quot;center-image&quot; /&gt;
&lt;em&gt;Another schematic representation of the circuit, showing how the components are physically connected with each other on the breadboard and the Raspberry Pi 3 Model B.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Where did the magic number 220 Ω come from? The explanation is very simple and essentially based on Ohm’s law. Across a resistor $R$ to which a voltage difference of $V$ is applied, the current flowing through it is given by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I = \frac VR.&lt;/script&gt;

&lt;p&gt;An LED is a diode, i.e. a p-n junction, that is capable of emitting light. In &lt;em&gt;forward bias&lt;/em&gt;, an order-one approximation of a diode is given by a small resistor (order of 10 Ω) in series with a voltage generator (of about -0.67 V). The manufacturer of the LED usually provides the maximum current that the diode can withstand. In the case of common LEDs, this value is around 20 mA. Considering that, when a GPIO pin is on, it will provide 3.3 V to our circuit, in order not to burn our LED we need to use a resistor of resistance $R$ given by the inequality&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{3.3\text{ V} - 0.67\text{ V}} R \leq 20\text{ mA},&lt;/script&gt;

&lt;p&gt;which yields&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;R\geq 130\ \Omega.&lt;/script&gt;

&lt;p&gt;For a better estimate, we can look at the V-I chart provided by the manufacturer, which would probably give us a minimum value closer to 200 Ω. Anything below and you might risk frying your LED. Using a way bigger resistor, however, would starve it of current and it would not turn on at all. But with 220 Ω we should be perfectly fine (and safe!).&lt;/p&gt;

&lt;h1 id=&quot;the-software&quot;&gt;The Software&lt;/h1&gt;

&lt;p&gt;Now that we have assembled the required hardware, it is time to see how to control it. What we have done so far is to connect the Raspberry Pi with a very simple one-wire device, i.e. an LED. The IoT is the possibility of controlling a device from the internet, anywhere in the world, with the actual device that we want to control possibly miles and miles away from us.&lt;/p&gt;

&lt;p&gt;What we now need is then a simple interface, accessible from the internet, that allows us to control the LED. Let’s see how to create such interface, step-by-step.&lt;/p&gt;

&lt;p&gt;But before we go any further, let’s have a look, like we did with the hardware part, at all that we will need.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python (2.7 or later; note that the project has been tested with Python2.7 and it might have to be adapted slightly to work with Python3)&lt;/li&gt;
  &lt;li&gt;a web server e.g. Apache2&lt;/li&gt;
  &lt;li&gt;a text editor of your choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yep, that’s all.&lt;/p&gt;

&lt;h2 id=&quot;the-rpi-python-module&quot;&gt;The RPi Python Module&lt;/h2&gt;

&lt;p&gt;On Raspbian there is a pretty simple way to control the GPIO pin that comes already bundled with the OS. I’m talking about the &lt;a href=&quot;https://pypi.python.org/pypi/RPi.GPIO&quot;&gt;RPi&lt;/a&gt; Python module. For the simple task that we want to achieve here, RPi exposes all the features that we need. However, keep in mind that more advanced tasks, like real-time applications, cannot be solved by this module. This is not just because it is a Python module, but a “limitation” of any OS based on the Linux kernel, which is multitasking in nature. This means that the kernel can decide on its own how to allocate resources for all the running processes, potentially giving rise to jitter in your applications.&lt;/p&gt;

&lt;p&gt;Another important limitation that should push you towards other approaches, like &lt;a href=&quot;http://wiringpi.com/&quot;&gt;wiringPi&lt;/a&gt;, is the lack of hardware PWM. PWM stands for Pulse-Width Modulation and is a technique used to encode a message in a pulsing signal. Some of the common uses are that of dimming an LED (recall that an LED response is exponential, even though we treated it as linear in our first-order approximation discussed above), or controlling a motor, but this is a topic that would take us away from the main focus of this post, and it might be the subject of a future one.&lt;/p&gt;

&lt;p&gt;Returning to our project, let’s have a look at how to turn our LED on. Recall from the schematic above that we are using the GPIO Pin 16 (according to the Broadcom convention), which is the 36th physical pin on the GPIO.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Import the GPIO component from the RPi module
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# Define a constant with the pin number where the LED
&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;# is connected
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Set the pin numbering mode to the physical number
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Set the LED pin to output mode
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Set the pin to high (3.3 V)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can type the above lines of Python code directly into the Python interpreter. To turn the LED off we can either set the value on the pin 36 back to 0&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or clean up the GPIO configuration with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we’ll ever want to use more than just one LED on our breadboard, we can encapsulate most of the above code inside a Python class so that it can be reused instead of having to type it every time with setup a new LED. A minimalist Python class that would represent a physical LED would be something like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# File: led.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;property&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our code for turning an LED on and off would then reduce to the following few lines&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;led&lt;/span&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;led_red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;led_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;led_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The extra method &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle&lt;/code&gt; can be used, as the name suggests, to toggle the LED state from on to off and vice-versa. In the above example we could then replace both &lt;code class=&quot;highlighter-rouge&quot;&gt;led_red.on&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;led_red.off()&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;led_red.toggle()&lt;/code&gt;. The property &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; is used to get the state of the LED as a Boolean value (&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; for on and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; for off), and it can also be used to set it. For instance, something like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;led_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would turn the LED on, since &lt;code class=&quot;highlighter-rouge&quot;&gt;[1]&lt;/code&gt; evaluates to &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; when converted to a Boolean. Analogously, the following line of code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;led_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would turn the LED off, since &lt;code class=&quot;highlighter-rouge&quot;&gt;bool({}) = False&lt;/code&gt; in Python.&lt;/p&gt;

&lt;p&gt;Sweet! We now know how to control our LED with code and all that’s left to do is build a nice web interface that will execute this code on demand.&lt;/p&gt;

&lt;h2 id=&quot;the-wsgi-specification&quot;&gt;The WSGI Specification&lt;/h2&gt;

&lt;p&gt;Given that we already have some code in Python to control our LED, it would be good if the web interface could use that code directly. Is this possible? The (short) answer is &lt;em&gt;yes&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;A more articulated answer to the above question leads us into the realm of the Web Server Gateway Interface specification, or WSGI for short. It is a universal specification that was born out of the necessity of putting some order among all the Python frameworks for developing web applications. Before the specification, each of said frameworks would be compatible with just a few web servers. Choosing one of them would then restrict your choice of a web server to go with it, and vice-versa. To overcome this limitation, the WSGI specification was proposed in the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0333/&quot;&gt;PEP 333&lt;/a&gt;, which dates back ton 2003. The technical details can be found in the linked page. Here we just limit ourself to the essential details of the specification that will allow us to write a simple web application to control the LED over the internet.&lt;/p&gt;

&lt;p&gt;In very simple terms, a Python web application consists of a &lt;em&gt;bootstrap callable&lt;/em&gt; object that is called by the web server. The python code contained in the callable is executed, and the web server expects a response consisting of a code (200 for OK, 403 for Forbidden, 404 for Not Found etc…) and a stream of bytes (usually the HTML code to be rendered by the browser). A callable can be any Python object that exposes a &lt;code class=&quot;highlighter-rouge&quot;&gt;__call__&lt;/code&gt; function like, e.g., classes and functions.&lt;/p&gt;

&lt;p&gt;My favourite web server is Apache2 and it will be the one that I will discuss in this post. Its functionalities can be extended with modules, and the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt; project provides a WSGI-compliant module for Apache. The documentation is very detailed and covers all the aspects, from the installation to the configuration and debugging techniques.&lt;/p&gt;

&lt;p&gt;Regarding the installation process, this can be carried out in two modes. Either on the Apache-side, or on the Python-side. If you are into the IoT, chances are you will have your web server running on a Raspberry Pi. For this reason, I will discuss how to install the mod_wsgi module for the Apache web server. On Raspbian, this can be done with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sudo apt install libapache2-mod-wsgi
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the installation, the module should already be enabled. If this isn’t the case, you can enable it with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sudo a2enmod wsgi
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;writing-the-web-application&quot;&gt;Writing the Web Application&lt;/h2&gt;

&lt;p&gt;The next steps are to actually write our web application and configure Apache to run it when a request comes in. In the configuration process we will specify our bootstrap Python script. By default, Apache expects to find a callable object inside it with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt;. The simplest thing that we could do is then to create a Python script and define a function with such a name. The code of our application would then be contained in this function, or called by it, in case we decide for a more modular approach.&lt;/p&gt;

&lt;p&gt;In case things would go wrong while we develop our web application, we might want to be able to have a look at the Python stack trace to see where the problems are. Normally we would have to look in the Apache error log (usually in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/apache2/error.log&lt;/code&gt;). However, we can make use of a middleware from the &lt;a href=&quot;https://paste.readthedocs.io/en/latest/&quot;&gt;paste&lt;/a&gt; Python package, which is specifically designed for WSGI applications. Our bootstrap script will then look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# File: bootstrap.wsgi
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'200 OK'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response_headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-type'&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'text/html'&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Length'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paste.exceptions.errormiddleware&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorMiddleware&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first two lines are necessary if we want to be able to import modules and packages that are in the same folder as the bootstrap script.&lt;/p&gt;

&lt;p&gt;We then import the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; module. This is just a design choice. The bootstrap script contains the essential code to get us to the main page (by means of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt; class), and returns us the full stack trace in case of errors (by means of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorMiddleware&lt;/code&gt; class from the paste package). To make sense of the rest of the code, have a look at the already referenced documentation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_wsgi&lt;/code&gt; module for Apache2.&lt;/p&gt;

&lt;p&gt;The core code of our application is contained in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt; class from the &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# File index.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;led&lt;/span&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;action&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'toggle'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;on&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In fact, this module looks more like a view rather than a controller, as the actual code for controlling the LED is buried in the &lt;code class=&quot;highlighter-rouge&quot;&gt;led&lt;/code&gt; module that we have analysed previously. The &lt;code class=&quot;highlighter-rouge&quot;&gt;util.py&lt;/code&gt; module contains some helper functions to conveniently deal with HTML templates and query strings. We refrain from showing the code in this post, but you can find it in the &lt;a href=&quot;https://github.com/P403n1x87/led_app&quot;&gt;dedicated GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The HTML template contained in the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file is very simple and looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;theme-color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#666666&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;led_app/led.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?action=toggle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button {state}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The body is essentially just a link that executes a request with the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle&lt;/code&gt;, containing a placeholder &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; element. The look-and-feel of a 3D button is then provided by the classes contained in the linked stylesheet, which you can find in the GitHub repository. Note how we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;{state}&lt;/code&gt; placeholder in the class attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; element. This allows us setting the button appearance according to the LED current state. In the stylesheet we have two classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;.on&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.off&lt;/code&gt;, the former giving a bright red colour to the button, while the latter giving a darker shade. The value is passed by the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;on&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in the static method &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Index&lt;/code&gt; class of &lt;code class=&quot;highlighter-rouge&quot;&gt;index.py&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-apache&quot;&gt;Configuring Apache&lt;/h2&gt;

&lt;p&gt;We are almost ready to start playing with our LED over the internet. The last step is to put our application up and running on the Apache web server. To this end there is a tiny bit of configuration that we need to do. We can start by making a copy of the default web site Apache2 comes with. On Raspbian, this is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/sites-available&lt;/code&gt; and is contained in the &lt;code class=&quot;highlighter-rouge&quot;&gt;000-default.conf&lt;/code&gt; configuration file. Make a copy of this file in, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;led.conf&lt;/code&gt; and modify it to look like the following one.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;c&quot;&gt;# File: led.conf&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; *:80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;ServerAdmin&lt;/span&gt; webmaster@localhost

  &lt;span class=&quot;c&quot;&gt;# Required by static data storage access (e.g. css files)&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;DocumentRoot&lt;/span&gt; /home/pi/Projects/www

  &lt;span class=&quot;nc&quot;&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/error.log
  &lt;span class=&quot;nc&quot;&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/access.log combined

  &lt;span class=&quot;c&quot;&gt;# WSGI Configuration&lt;/span&gt;
  WSGIScriptAlias /led /home/pi/Projects/www/led_app/bootstrap.wsgi

  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /home/pi/Projects/www/led_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; all granted
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even though we are implementing a WSGI application, the &lt;code class=&quot;highlighter-rouge&quot;&gt;DocumentRoot /home/pi/Projects/www&lt;/code&gt; is needed because we are importing a css file in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. The above configuration file assumes that the web application resides in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/pi/Projects/www/led_app&lt;/code&gt; folder. This way, static files can be accessed with a relative path referring to the parent folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/pi/Projects/www&lt;/code&gt;. This explains why we are importing the &lt;code class=&quot;highlighter-rouge&quot;&gt;led.css&lt;/code&gt; file as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;led_app/led.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The section below the &lt;code class=&quot;highlighter-rouge&quot;&gt;# WSGI Configuration&lt;/code&gt; comment is the WSGI part of the configuration. The first line of this section tells Apache which script to use to bootstrap the web application. This is the script that is assumed to contain the callable object named &lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt;. The rest of the WSGI configuration section is required to set the rights to read the bootstrap and the python scripts contained in the web application folder.&lt;/p&gt;

&lt;p&gt;That’s it! All we have to do now is deactivate any other website on port 80 with &lt;code class=&quot;highlighter-rouge&quot;&gt;a2dissite&lt;/code&gt; (this is only required if the web sites are not named), and enable &lt;code class=&quot;highlighter-rouge&quot;&gt;led.conf&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;a2ensite led.conf&lt;/code&gt;. Restart the Apache2 web server with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
sudo service apache2 restart
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and point the browser on any device that is on the same local network as the Pi to its local IP address, append ‘/led’ to it to start the web application (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.0.203/led&lt;/code&gt;) and you should now be in the web application, with a red button that will now allow you to control the LED state over the LAN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p403n1x87.github.io//images/iot/website.png&quot; alt=&quot;The final look of the web application&quot; class=&quot;center-image&quot; /&gt;
&lt;em&gt;The final look of the web application. The red button in the middle is used to toggle the LED state.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are behind a router, of course you will need to forward the port 80 to the Pi’s local address before you could be able to access your web application from the internet, outside of your local network. In this case you will have to use the router’s public IP instead of the local IP.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;We have come to the end of this post on a simple IoT project. Its main purpose, like most of the other posts in this blog, is two-fold. On one hand, it is a way for me to take notes of new things that I have discovered and that I can later come back to if I need to. All the information gathered from the cited sources is gathered in a single place, which makes it more convenient than having to go through them separately. On the other hand, it is a way to share my experience with others, in the hope that it could be useful somehow. Even though the project in it self, as I have remarked many times now, is quite simple, the post includes references to many topics, e.g. electronics, programming, web servers and applications, and it shows you how all these different aspects can be organically combined together to create something.&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 18:30:15 +0000</pubDate>
        <link>https://p403n1x87.github.io//raspberry%20pi/iot/2017/07/31/intro-to-iot.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//raspberry%20pi/iot/2017/07/31/intro-to-iot.html</guid>
        
        <category>Electronics</category>
        
        <category>Programming</category>
        
        <category>Web Applications</category>
        
        <category>Web Servers</category>
        
        <category>Apache</category>
        
        <category>Raspberry Pi</category>
        
        <category>WSGI</category>
        
        
        <category>Raspberry Pi</category>
        
        <category>IoT</category>
        
      </item>
    
      <item>
        <title>Prime Numbers, Algorithms and Computer Architectures</title>
        <description>&lt;p&gt;A natural number $p\in\mathbb N$ is said to be &lt;em&gt;prime&lt;/em&gt; if its only divisors are 1 and $p$ itself. Any other number that does not have this property is sometimes called &lt;em&gt;composite&lt;/em&gt;. The discovery that there are infinitely many prime numbers dates back to c. 300 BC and is due to Euclid. His argument by contradiction is very simple: suppose that, indeed, there are only finitely many primes, say $p_1,\ldots,p_n$. The natural number&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;m=p_1p_2\cdots p_n + 1&lt;/script&gt;

&lt;p&gt;is larger than and evidently not divisible by any of the primes by construction, and therefore $m$ must be prime. However, being larger than any of the $p_k$s, $m$ cannot be one of the finitely many primes, thus reaching to a contradiction.&lt;/p&gt;

&lt;p&gt;Prime numbers play a fundamental role in &lt;em&gt;Number Theory&lt;/em&gt;, a branch of Mathematics that deals with the properties of the natural numbers. Everybody gets to know about the prime factorisation of the natural numbers, a result so important that has been given the name of &lt;em&gt;Fundamental Theorem of Arithmetic&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;counting-primes&quot;&gt;Counting Primes&lt;/h1&gt;

&lt;p&gt;Even though we saw that prime numbers are infinite, one might still want to know how many prime numbers are there within a certain upper bound. As numbers become bigger, the help of a calculator becomes crucial to tackle this problem and therefore it makes sense to think of algorithms that would get us to the answer efficiently.&lt;/p&gt;

&lt;p&gt;The fastest way to count all the primes less than a given upper bound $n$ is by means of an ancient algorithm known as the &lt;em&gt;Sieve of Eratosthenes&lt;/em&gt;. The idea is to start with the sequence of all the numbers from 0 up to $n$ and discard/mark the composite numbers as they are discovered. By definition, 0 and 1 are not prime, so they are removed. The number 2 is prime, but all its multiples are not, so we proceed by removing all the multiples of 2. We keep the first number that remains after 2, 3 in this case, and proceed to remove its multiples (starting from its square, since smaller multiples have already been removed at the previous steps). The process is repeated until it is no longer possible to proceed beyond the assigned bound $n$. It is clear that it is enough to get up to at most $\lceil\sqrt n\rceil$.&lt;/p&gt;

&lt;p&gt;The following is a simple implementation in C++.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;cassert&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sieve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Sieve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;There are &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; primes between 0 and &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;#ifdef VERBOSE
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;A vector of booleans is implemented in C++ by an arry of bits instead of single bytes. Apart from turning all the possible complier optimisations, at the hardware level, this more compact data structure is more cache-friendly. Here is a first link between a software implementation of a prime search and the computer architecture the code runs on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With an input of the order of $10^6$ the sieve is still quite fast. However the memory requirements are substantial: up to $10^9$ we are able to still use integers, but the memory consumption is of the order of the GB. The amount of memory on the system then can pose a serious limitation to the input parameter.&lt;/p&gt;

&lt;h1 id=&quot;segmented-sieve&quot;&gt;Segmented Sieve&lt;/h1&gt;

&lt;p&gt;If we want to list and/or count all the primes between two given (and possibly quite large) integers, we need a &lt;em&gt;Segmented Sieve&lt;/em&gt;. If we are interested in all the primes between $a$ and $b$ we could, in principle, use the sieve of Eratosthenes to find all the primes up to $b$ and then list/count all the primes larger than $a$. But with $b$ of the order, say, $10^{15}$, a lot of memory is required to hold the result. Instead we can split the interval $[a,b]$ into chunks and process them separately.&lt;/p&gt;

&lt;p&gt;The two main questions that we need to answer are: how do we adapt the sieve algorithm to start from $a$ rather than 0, and how do we fix the chunk size. Let us deal with the latter question first. The reason why we need a segmented sieve in the first place is because of memory limitations. So an upper bound for the chunck size is given by the available memory. However, for large values of the inputs, the sieve might need to jump to memory location which are further apart. But how do we quantify this “further apart”? The answer, again, is in the system architecture, which quite likely include a system of cache memory. In order not to violate the locality principle we should choose a chunk size which is comparable to the cache size. Assuming this to be of the order of the MB, and recalling that &lt;code class=&quot;highlighter-rouge&quot;&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; is an array of bits, a possible chunk size is of the order of $10^7$.&lt;/p&gt;

&lt;p&gt;Coming to the question of how to implemente a segmented sieve, all we need to do is mark/remove all the composite number in range. Of course we would need to start by removing all the even numbers, then all the multiples of 3, then of 5 and so on. Therefore we still need the knowledge of the primes starting from 2 and going above. But how much above? Since our upper limit is $b$, we need all the prime numbers up to $\lceil\sqrt b\rceil$, which can be obtained with the standard sieve discussed earlier. These prime numbers can then be used to discover all the primes in the range $[a,b]$. We start by removing the first even number greater than or equal to $a$, together with all the numbers obtained by repeatedly adding 2 to it until we are out of bound. More generally, to find the first multiple of the prime $p$ in $[a,b]$ we use the formula&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;s = \left\lceil\frac ap\right\rceil\cdot p&lt;/script&gt;

&lt;p&gt;However, recall that, for the standard sieve we really have to start from $p^2$, since lower multiples of $p$ have already been removed at the previous iteration. Therefore, as our starting point we pick the &lt;em&gt;maximum&lt;/em&gt; between $s$ and $p^2$ (actually between $\lceil a/p\rceil$ and $p$).&lt;/p&gt;

&lt;p&gt;The following is a simple implementation of the Segmented Sieve in C++.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define CHUNK 10000000 // 10e7
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SSieve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Sieve&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Sieve&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Segmented Sieve&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// primes in each segment&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Bounds&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Cached primes count&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Current segment&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Total numbers in interval&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;max_seg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Total number of segments&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do not regenerate the current segment&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_seg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Determine segment bounds&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Allocate the new segmented sieve&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Remove composite numbers in segment&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SSieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The standard sieve&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_seg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_seg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Keep track of the number of primes in segments&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This is used by SSieve::get to retrieve the primes&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Determine which segment the requested prime belongs to&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Reconstruct the segmented sieve if necessary&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Translate into the actual prime&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seg_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can be tested with a slightly modified &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; procedure, for example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;SSieve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;There are &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; primes between &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;#ifdef VERBOSE
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 06 Mar 2017 23:15:00 +0000</pubDate>
        <link>https://p403n1x87.github.io//number%20theory/algorithms/architecture/2017/03/06/primes.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//number%20theory/algorithms/architecture/2017/03/06/primes.html</guid>
        
        <category>Programming</category>
        
        <category>C++</category>
        
        <category>Prime Numbers</category>
        
        <category>Algorithms</category>
        
        
        <category>Number Theory</category>
        
        <category>Algorithms</category>
        
        <category>Architecture</category>
        
      </item>
    
      <item>
        <title>Getting Started with x86-64 Assembly on Linux</title>
        <description>&lt;p&gt;In this post we will learn how to assemble and link a simple “Hello World” application written in x86-64 assembly for the Linux operating system. If you have experience with Intel IA-32 assembly and you want to quickly get adjusted to the x86-64 world then this post is for you. If you’re trying to learn the assembly language from scratch then I’m afraid this post is not for you. There are many great resources online on 32-bit assembly. One of my favourite documents is Paul Carter’s PC Assembly Language, which I highly recommend if you’re moving your first steps into the assembly language. If you then decide to come back to this post, you should be able to read it with no problems, since the tools that I will employ here are the same used in Carter’s book.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;This post is organised as follows. In the next section, I gather some details about the tools that we will use to code, assemble, link and execute the applications. As already mentioned above, most of the tools are the same as those used in Carter’s book. Our assembler (and hence the syntax) will be NASM. I will make use of two linkers, &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; and the one that comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;, the GNU C Compiler, for reasons that will be explained later. The first x64 application that we will code will give us the chance to get familiar with the new system calls and how they differ from the 32-bit architecture. With the second one we will make use of the Standard C Library. Both examples will give us the chance to explore the x86-64 calling convention as set out in the &lt;a href=&quot;http://www.x86-64.org/documentation/abi.pdf&quot;&gt;System V Application Binary Interface&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the code shown in this post will also be available from the &lt;a href=&quot;https://github.com/P403n1x87/asm/tree/master/hello64&quot;&gt;dedicated asm GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;p&gt;The Netwide Assembler is arguably the most popular assembler for the Linux Operating System and it is an open-source project. Its documentation is nicely written and explains all the features of the language and of the (dis)assembler. This post will try to be as much self-contained as possible, but whenever you feel the need to explore something a bit more, the NASM documentation will probably be the right place. To assemble a 64-bit application we will need to use the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
nasm -f elf64 -o myapp.o myapp.asm
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-f elf64&lt;/code&gt; instructs NASM that we want to create a 64-bit ELF object file. The flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-o myapp.o&lt;/code&gt; tells the assembler that we want the output object file to be &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.o&lt;/code&gt; in the current directory, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.asm&lt;/code&gt; specifies the name of the source file containing the NASM code to be assembled.&lt;/p&gt;

&lt;p&gt;When an application calls functions from shared libraries it is necessary to &lt;em&gt;link&lt;/em&gt; our object file to them so that it knows where to find them. Even if we are not using any external libraries, we still need to invoke the linker in order to obtain a valid executable file. The typical usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; that we will encounter in this post is&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
ld -o myapp.o myapp
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is enough to produce a valid executable when we are not linking our object file &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.o&lt;/code&gt; against any external shared library or any other object file. Occasionally, depending on your distribution, you will have to specify which interpreter you want to use. This is a library which, for ELF executables, acts as a loader. It loads the application in memory, as well as the required linked shared libraries. On Ubuntu 16.04, the right 64-bit interpreter is at &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib64/ld-linux-x86-64.so.2&lt;/code&gt; and therefore my invocation of &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; will look like&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
ld -o myapp myapp.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some external shared libraries are designed to work with C. It is then advisable to include a &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function in the assembly source code since the Standard C Library will take care of some essential cleanup steps when the execution returns from it. Cases where one might want to opt for this approach are when the application works with file descriptors and/or spawns child processes. We will see an example of this situation in a future tutorial on assembly and Gtk+. For the time being, we shall limit ourselves to see how to use the GNU C Compiler to link our object file with other object files (and in particular with &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt;). The typical usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; will be something like&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
gcc -o myapp.o myapp
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is very much similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;hello-syscalls&quot;&gt;Hello Syscalls!&lt;/h1&gt;

&lt;p&gt;In this first example we will make use of the Linux system calls to print the string &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; to the screen. Here is where we encounter a major difference between the 32-bit and the 64-bit Linux world.&lt;/p&gt;

&lt;p&gt;But before we get to that, let’s have a look at what is probably the most important difference between the 32-bit and the 64-bit architecture: the registers. The number of the general purpose registers (GPRs for short) has doubled and now have a maximum size of … well … 64-bit. The old &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; etc… are now the low 32-bit of the larger &lt;code class=&quot;highlighter-rouge&quot;&gt;RAX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RBX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RCX&lt;/code&gt; etc… respectively, while the new 8 GPRs are named &lt;code class=&quot;highlighter-rouge&quot;&gt;R8&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;R15&lt;/code&gt;. The prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; stands for, surprise, surprise, &lt;em&gt;register&lt;/em&gt;. This seems like a sensible decision, since this is in line with many other CPU manufacturers. Further details can be found in &lt;a href=&quot;http://www.nasm.us/doc/nasmdo11.html&quot;&gt;Chapter 11&lt;/a&gt; of the NASM documentation and in &lt;a href=&quot;https://software.intel.com/sites/default/files/m/d/4/1/d/8/Introduction_to_x64_Assembly.pdf&quot;&gt;this Intel white&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now move back to system calls. Unix systems and derivatives do not make use of software interrupts, with the only exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;INT 0x80&lt;/code&gt;, which on 32-bit systems is used to make system calls. A system call is a way to request a service from the kernel of the operating system. Most C programmers don’t need to worry about them, as the Standard C Library provides wrappers around them. The x86_64 architecture introduced the dedicated instruction &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; in order to make system calls. You can still use interrupts to make system calls, but &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; will be faster as it does not access the interrupt descriptor table.&lt;/p&gt;

&lt;p&gt;The purpose of this section is to explore this new opcode with an example. Without further ado, let’s dive into some assembly code. The following is the content of my &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64.asm&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; CONSTANTS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYS_WRITE&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYS_EXIT&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STDOUT&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; char *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;; size_t&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; syscall(SYS_WRITE, STDOUT, hello, hello_len);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYS_WRITE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STDOUT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; syscall(SYS_EXIT, &amp;lt;sys_write return value&amp;gt; - hello_len);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;caption&quot;&gt;hello64.asm&lt;/p&gt;

&lt;p&gt;Lines 1, 13, 20 and 22 are part of the skeleton of any NASM source code. With line 1 we export the symbol &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt;, which defines the entry point for the application, i.e. the point in where the execution starts from. The actual symbol is declared on line 22, and line 24 will be the fist one to be executed.&lt;/p&gt;

&lt;p&gt;In lines 6 to 8 we define some constants to increase the readability of the code. The price to pay is that NASM will export these symbols as well, thus increasing the size of the final executable file. I will discuss how to deal with this later on in this post. For the time being, let’s focus on the rest of the code.&lt;/p&gt;

&lt;p&gt;Line 13 marks the beginning of the initialised data section. Here we define strings and other immediate values. In this case we only need to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello World!\n&quot;&lt;/code&gt; string (&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; is the ASCII code for the newline character &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;) and label it &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;. Line 15 defines a constant equals to the length of the string, and this is accomplished by subtracting the address of the label &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; from the current address, given by &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; in NASM syntax.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; section, where the actual code resides, starts at line 20. Here we declare the &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt; symbol, i.e. the entry point of the application, followed by the code to be executed. In this simple example, all we need to do is print the string to screen and then terminate the application. This means that we need to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; system call, followed by a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt;, perhaps with an exit code that will tell us whether the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; has been successful or not.&lt;/p&gt;

&lt;p&gt;Here is our first encounter with the new syscall opcode and the x86_64 calling convention. There isn’t much to say about syscall. It does what you would expect it to do, i.e. make a system call. The system call to make is specified by the value of the rax register, whereas the parameters are passed according to the already mentioned x86_64 calling convention. It is recommended that you have a look at the official documentation to fully grasp it, especially when it comes to complex calls. In a nutshell, some of the parameters are passed through registers and the rest go to the stack. The order of the registers is: &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi, rsi, rdx, r10, r8, r9&lt;/code&gt;. We shall see in the next code example that, when we call a C function, we should use &lt;code class=&quot;highlighter-rouge&quot;&gt;rcx&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;r10&lt;/code&gt;. Indeed, the latter is only used for the Linux kernel interface, while the former is used in all the other cases.&lt;/p&gt;

&lt;p&gt;On line 23 we have a comment that shows us the equivalent C code for a call to sys_write. Its “signature” is the following.&lt;/p&gt;

&lt;div style=&quot;background-color: #202000;padding:24px;margin:12px;font-size:80%;&quot;&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;1. SYS_WRITE&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;padding-top:.5em;font-weight:bold;&quot;&gt;Parameters&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          &lt;table style=&quot;padding-left:1em;&quot;&gt;
            &lt;tbody&gt;
              &lt;tr&gt;
                &lt;td style=&quot;font-family: monospace;padding-right:12px;&quot;&gt;unsigned int&lt;/td&gt;
                &lt;td&gt;file descriptor&lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td style=&quot;font-family: monospace;padding-right:12px;&quot;&gt;const char *&lt;/td&gt;
                &lt;td&gt;pointer to the string&lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td style=&quot;font-family: monospace;padding-right:12px;&quot;&gt;size_t&lt;/td&gt;
                &lt;td&gt;number of bytes to write&lt;/td&gt;
              &lt;/tr&gt;
            &lt;/tbody&gt;
          &lt;/table&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;padding-top:.5em;font-weight:bold;&quot;&gt;Return value&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;padding-left:1em;&quot;&gt;The number of bytes of the pointed string written on the file descriptor.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The number that appears on the top right corner is the code associated to the system call (compare this with line 6 above), and by convention this goes into the &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; register (see line 24). Since &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; requires 3 integer parameters we only need the registers &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt;, in this order. Therefore, the file descriptor, the standard output in this case, will go in &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;, the address of the first byte of the string will go in &lt;code class=&quot;highlighter-rouge&quot;&gt;rsi&lt;/code&gt; while its length will be loaded into &lt;code class=&quot;highlighter-rouge&quot;&gt;rdx&lt;/code&gt; (lines 25 to 27).&lt;/p&gt;

&lt;p&gt;In order to make the actual system call we can now use the new opcode &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt;. The return value, namely the number of bytes written by &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; in this case, is returned in the &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; register. With line 29 we save the return value in the stack in order to use it as an exit code to be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the application has done everything that needed to be done, i.e. print a string to standard output, we are ready to terminate the execution of the main process. This is achieved by making the exit system call, whose “signature” is the following.&lt;/p&gt;

&lt;div style=&quot;background-color: #202000;padding:24px;margin:12px;font-size:80%;&quot;&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;60. SYS_EXIT&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;padding-top:.5em;font-weight:bold;&quot;&gt;Parameters&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          &lt;table style=&quot;padding-left:1em;&quot;&gt;
            &lt;tbody&gt;
              &lt;tr&gt;
                &lt;td style=&quot;font-family: monospace;padding-right:12px;&quot;&gt;int&lt;/td&gt;
                &lt;td&gt;error code&lt;/td&gt;
              &lt;/tr&gt;
            &lt;/tbody&gt;
          &lt;/table&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;padding-top:.5em;font-weight:bold;&quot;&gt;Return value&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;padding-left:1em;&quot;&gt;This system call does not return.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;With line 32 we load the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; register in preparation for the system call. As error code, we might want to return &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; has done its job properly, i.e. if it has written all the expected number of bytes, and something else otherwise. The simplest way to achieve this is by subtracting the string length from the return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt;. Remember that we stored the latter in the stack, so it is now time to retrieve it. The first and only argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt; must go in &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;, so we might as well pop the &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; return value in there directly, and this is precisely what line 33 does. On line 34 we subtract the length of the string from &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt;, so that if &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; has written all the expected number of bytes, &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; will now be &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. The last instruction on line 35 is the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; opcode that will make the system call and terminate the execution.&lt;/p&gt;

&lt;p&gt;All right, time now to assemble, link and execute the above code.&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ 
$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
nasm -f elf64 -o hello64.o hello64.asm
ld -o hello64 hello64.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will assemble the source code of &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64.asm&lt;/code&gt; into the object file &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64.o&lt;/code&gt;, while the linker will finish off the job by linking the interpreter to the object file and produce the ELF64 executable. To run the application, simply type&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
./hello64
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you also want to display the exit code to make sure the executable is behaving as expected we could use&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
./hello64; echo &quot;exit code:&quot; $?
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and, on screen, we should now see&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
Hello World!
exit code: 0
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apart from the fun, another reason to write assembly code is that you can shrink the size of the executable file. Let’s check how big &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64&lt;/code&gt; is at this stage&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ wc -c &amp;lt; hello64
1048
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A kilobyte seems a bit excessive for an assembly application that only prints a short string on screen. The reason of such a bloated executable is in the symbol table created by NASM. This plays an important role inside our ELF file in case we’d need to link it with other object files. You can see all the symbols stored in the elf file with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ objdump -t hello64

hello64:     file format elf64-x86-64

SYMBOL TABLE:
00000000004000b0 l    d  .text 0000000000000000 .text
00000000006000d8 l    d  .data 0000000000000000 .data
0000000000000000 l    df *ABS* 0000000000000000 hello64.asm
0000000000000001 l       *ABS* 0000000000000000 SYS_WRITE
000000000000003c l       *ABS* 0000000000000000 SYS_EXIT
0000000000000001 l       *ABS* 0000000000000000 STDOUT
00000000006000d8 l       .data 0000000000000000 hello
000000000000000d l       *ABS* 0000000000000000 hello_len
00000000004000b0 g       .text 0000000000000000 _start
00000000006000e5 g       .data 0000000000000000 __bss_start
00000000006000e5 g       .data 0000000000000000 _edata
00000000006000e8 g       .data 0000000000000000 _end
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming that we are not planning of doing this with our simple Hello World example, we strip the symbol table off &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64&lt;/code&gt; with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
strip -s hello64
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we now check the file size again, this is what we get&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ wc -c &amp;lt; hello64
512
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i.e. less than half the original size. Looking at the symbol table again, this is what we get now:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ objdump -t hello64

hello64: file format elf64-x86-64

SYMBOL TABLE:
no symbols
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observe that we can obtain the same result with the -s switch to the linker we decide to use, that is, either ld or gcc. Thus, for example,&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
ld -s -o hello64 hello64.o
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will produce an ELF executable that lacks the symbol table completely.&lt;/p&gt;

&lt;p&gt;The possibility of removing symbols from an ELF file gives us the chance of defining the constants for the system calls once and for all. In my GitHub repository you can find the file &lt;a href=&quot;https://github.com/P403n1x87/asm/blob/master/syscalls/syscalls.inc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syscalls.inc&lt;/code&gt;&lt;/a&gt; where I have defined all the system calls together with their associated ID, and the “signature” of each on a comment line. With the help of this file, our source code would look like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;%include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../syscalls.inc&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; CONSTANTS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STDOUT&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; char *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;; size_t&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; syscall(SYS_WRITE, STDOUT, hello, hello_len);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYS_WRITE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STDOUT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[hello]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; syscall(SYS_EXIT, &amp;lt;sys_write return value&amp;gt; - hello_len);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;caption&quot;&gt;hello64_inc.asm&lt;/p&gt;

&lt;p&gt;Note the inclusion of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;syscalls.inc&lt;/code&gt; at line 3, assumed to be stored in the parent folder of the one containing the assembly source code, and the only constant &lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; at line 8.&lt;/p&gt;

&lt;p&gt;If you do not need symbols in the final ELF file, you can just remove the symbol table completely with the previous command. However, if you want to retain some, but get rid of the one associated to constants that are meaningful to just your source code, you can add a &lt;code class=&quot;highlighter-rouge&quot;&gt;-N &amp;lt;symbol name&amp;gt;&lt;/code&gt; (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;strip -N STDOUT hello64&lt;/code&gt;) switch to strip for each symbol you want dropped. To automate this when using &lt;code class=&quot;highlighter-rouge&quot;&gt;syscalls.inc&lt;/code&gt;, one can execute the following (rather long) command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
strip `while IFS='' read -r line || [[ -n &quot;$line&quot; ]]; do read s _ &amp;lt;&amp;lt;&amp;lt; $line; echo -n &quot;-N $s &quot;; done &amp;lt; &amp;lt;(tail -n +5 ../syscalls.inc)` hello64
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;on the ELF executable.&lt;/p&gt;

&lt;p&gt;Finally, let’s verify that all we really have is pure assembly code, i.e. that our application doesn’t depend on external shared objects:&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ ldd hello64
        not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, this output is telling us that &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64&lt;/code&gt; is not linked to any other shared object files.&lt;/p&gt;

&lt;h1 id=&quot;hello-libc&quot;&gt;Hello libc!&lt;/h1&gt;

&lt;p&gt;We shall now rewrite the above Hello World! example and let the Standard C Library take care of the output operation. That is, we won’t deal with system calls directly, we shall instead delegate a higher abstraction layer, the Standard C Library, do that for us. Furthermore, with this approach, we will also delegate some basic clean-up involving, e.g., open file descriptor, child processes etc…, which we would have to deal with otherwise. For a simple application like a Hello World! this last point is pretty much immaterial, but we will see in another post on GUIs with Gtk+ 3 the importance of waiting for child processes to terminate an application gracefully.&lt;/p&gt;

&lt;p&gt;So the code we want to write is the assembly analogue of the following C code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function, we call &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; to print the string on screen and then use its return value, decreased by the string length, as exit code. Thus, if &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; writes all the bytes of our string, we get 0 as exit code, meaning that the call has been successful.&lt;/p&gt;

&lt;p&gt;The didactic importance of this example resides in the use of the variadic function &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. The System V ABI specifies that, when calling a variadic function, the register &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; should hold the number of XMM registers used for parameter passing. In this case, since we are just printing a string, we are not passing any other arguments apart from the location of the first character of the string, and therefore we need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; to zero. With all these considerations, the assembly analogue of the above C code will look like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; const char *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;; size_t&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; int main ()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; return printf(hello) - hello_len;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[hello]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;caption&quot;&gt;hello64_libc.asm&lt;/p&gt;

&lt;p&gt;On line 1 we export the main symbol, which will get called by the &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; framework. On line 3 we instruct NASM that our application uses an external symbol, i.e. the variadic function &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. There is nothing new to say about the &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; section, that starts at line 8. The code, however, is quite different. On line 17 we declare the label &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, which marks the entry point of the C main function. We do not need local variables no access the standard argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;argc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;argv&lt;/code&gt;, so we do not create a local stack frame. Instead, we go straight to calling &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. We load the string address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;rdi&lt;/code&gt; register (line 19), set the &lt;code class=&quot;highlighter-rouge&quot;&gt;rax&lt;/code&gt; register to zero (line 20), since we are not passing any arguments by the XMM registers, and finally call the &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function. On the last line we subtract the string length, &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_len&lt;/code&gt;, from the return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assuming the above code resides in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64_libc.asm&lt;/code&gt;, we can assemble and link it with&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ 
$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
nasm -f elf64 -o hello64_libc.o hello64_libc
gcc -o hello64_libc hello64_libc.o
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ELF executable I get on my machine is 8696 bytes in size, and 6328 without the symbol table. If we thought 1048 was too much for a simple Hello World application, the libc example is 8 times bigger. And without symbols, you can see that we are wasting about 8K by relying on the Standard C Library.&lt;/p&gt;

&lt;p&gt;A somewhat intermediate approach is to drop the main function and only use the &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function from &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt;. The advantage is a reduced file size, since our executable only depends on the Standard C Library. However, as discussed above, we lose an important clean-up process that can be convenient, if not necessary, at times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;%include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../syscalls.inc&quot;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Initialised data goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;db&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; const char *&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;equ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; size_t&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code goes here&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;SECTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; printf(hello) - hello_len;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lea&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[hello]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_len&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; syscall(SYS_EXIT, rax - hello_len)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pop&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;caption&quot;&gt;hello64_libc2.asm&lt;/p&gt;

&lt;p&gt;Note how, on lines 1 and 18, we removed the main function and reintroduced the &lt;code class=&quot;highlighter-rouge&quot;&gt;_start&lt;/code&gt; symbol to tell NASM where the entry point is. Thus, execution of our application now starts at line 20. Here we prepare to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function from &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; (lines 20 to 22), we compute the exit code (line 23) and we store it in the stack. Now there is no Standard C Library framework to terminate the execution for us, since we cannot return from the non-existent main function, and therefore we have to make a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_EXIT&lt;/code&gt; ourselves (lines 26 to 29).&lt;/p&gt;

&lt;p&gt;Assuming this code resides in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;hello64_libc2&lt;/code&gt;, we assemble and link with the commands&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ 
$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
nasm -f elf64 -o hello64_libc2.o hello64_libc2
ld -s -o hello64_libc2 hello64_libc.o -I/lib64/ld-linux-x86-64.so.2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Checking the file size, this is what I get on my machine now&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ wc -c &amp;lt; hello64_libc2
2056
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i.e. about a third of the “full” &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; example above. There is something we can still do with &lt;code class=&quot;highlighter-rouge&quot;&gt;strip&lt;/code&gt;, namely determine which sections are not needed. After linking with &lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt;, the ELF I get has the following sections&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div&gt;&lt;pre&gt;
$ readelf -S hello64_libc2 | grep [.]
  [ 1] .interp           PROGBITS         0000000000400158  00000158
  [ 2] .hash             HASH             0000000000400178  00000178
  [ 3] .dynsym           DYNSYM           0000000000400190  00000190
  [ 4] .dynstr           STRTAB           00000000004001c0  000001c0
  [ 5] .gnu.version      VERSYM           00000000004001de  000001de
  [ 6] .gnu.version_r    VERNEED          00000000004001e8  000001e8
  [ 7] .rela.plt         RELA             0000000000400208  00000208
  [ 8] .plt              PROGBITS         0000000000400220  00000220
  [ 9] .text             PROGBITS         0000000000400240  00000240
  [10] .eh_frame         PROGBITS         0000000000400260  00000260
  [11] .dynamic          DYNAMIC          0000000000600260  00000260
  [12] .got.plt          PROGBITS         00000000006003a0  000003a0
  [13] .data             PROGBITS         00000000006003c0  000003c0
  [14] .shstrtab         STRTAB           0000000000000000  000003ce
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By trials and errors, I have discovered that I can get rid of &lt;code class=&quot;highlighter-rouge&quot;&gt;.hash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.gnu.version&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.eh_frame&lt;/code&gt; while still getting a valid ELF executable that does its job. To get rid of these sections one can use the command&lt;/p&gt;

&lt;div class=&quot;terminal&quot;&gt;&lt;div class=&quot;terminal-body flex-container flex-row&quot;&gt;&lt;div class=&quot;pad-right&quot;&gt;&lt;pre&gt;$ &lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;
strip -R .hash -R .gnu.version -R .eh_frame hello64_libc2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which yields an executable of 1832 bytes.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;With the above examples, we have seen that, if our real goal is that of coding a Hello World application meant to run on an architecture with the x86_64 instruction set, assembly is the best shot we have. Chances are, if you are coding an application, it is more complex than just printing a string on screen. Even pretending for a moment that you don’t care about the portability of your code, there are certainly some benefits from linking your application with gcc and letting the Standard C Library do some clean-up work for you. We will have the chance to see this last point from a close-up perspective in a future post. So take this current post as a reference point where you can look back when you need to recall the basics of writing a 64-bit assembly application for the Linux OS.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Aug 2016 14:48:37 +0000</pubDate>
        <link>https://p403n1x87.github.io//assembly/x86_64/2016/08/10/getting-started-with-x68-asm.html</link>
        <guid isPermaLink="true">https://p403n1x87.github.io//assembly/x86_64/2016/08/10/getting-started-with-x68-asm.html</guid>
        
        <category>Programming</category>
        
        <category>Assembly</category>
        
        <category>x86_64</category>
        
        
        <category>Assembly</category>
        
        <category>x86_64</category>
        
      </item>
    
  </channel>
</rss>
